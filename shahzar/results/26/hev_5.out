
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((fit - tgt)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300, verbose = T) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   
+   if (verbose) {
+     cat('(', 
+         format(fit[1], digits = 4, nsmall = 4), ' ',
+         format(fit[2], digits = 4, nsmall = 4), ')\t', sep = '')
+   }
+       
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.05, 0.0005)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   cat('START:', '\t', sep = '')
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   cat('\n')
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat(i, '\t[', 
+         format(curr[1], digits = 5, nsmall = 3), ' ', 
+         format(curr[2], digits = 3, nsmall = 4), ']\t', 
+         format(curr_lik, digits = 3, nsmall = 3), '\t', sep = '')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     
+     cat('[', 
+         format(prop[1], digits = 5, nsmall = 3), ' ', 
+         format(prop[2], digits = 3, nsmall = 4), '] ', sep = '')
+     
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat(format(prop_lik, digits = 3, nsmall = 3), '\t', sep = '')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(r, digits = 3, nsmall = 3), '\t', 
+         format(p, digits = 3, nsmall = 3), '\n', sep = '')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '5/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '5/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '5/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.05, 0.25)
> start <- c(55.9281356104072, 0.0684567246743088)
> results <- metropolis(start, target, num_sim = 2000, num_iter = 200)
START:	(0.05081 0.2496)	
1	[55.928 0.0685]	14.025	[55.879 0.0694] (0.05035 0.2574)	9.800	0.0146	0.160
2	[55.928 0.0685]	14.025	[55.888 0.0678] (0.04813 0.2571)	9.828	0.015	0.0598
3	[55.928 0.0685]	14.025	[55.993 0.0689] (0.05072 0.2513)	13.040	0.374	0.266
4	[55.993 0.0689]	13.040	[55.916 0.0691] (0.05293 0.2520)	11.281	0.172	0.950
5	[55.993 0.0689]	13.040	[55.977 0.0693] (0.05358 0.2502)	11.259	0.168	0.0335
6	[55.977 0.0693]	11.259	[55.896 0.0692] (0.05071 0.2507)	13.888	13.869	0.403
7	[55.896 0.0692]	13.888	[55.883 0.0685] (0.04798 0.2536)	10.961	0.0535	0.537
8	[55.896 0.0692]	13.888	[55.779 0.0694] (0.04967 0.2535)	11.273	0.0731	0.499
9	[55.896 0.0692]	13.888	[55.951 0.0689] (0.0516 0.2587)	9.453	0.0118	0.509
10	[55.896 0.0692]	13.888	[55.866 0.0689] (0.04898 0.2434)	10.029	0.0211	0.439
11	[55.896 0.0692]	13.888	[55.929 0.0695] (0.05192 0.2520)	11.797	0.124	0.454
12	[55.896 0.0692]	13.888	[55.802 0.0688] (0.05334 0.2532)	10.742	0.043	0.783
13	[55.896 0.0692]	13.888	[55.821 0.0693] (0.05302 0.2543)	10.491	0.0335	0.844
14	[55.896 0.0692]	13.888	[55.972 0.0691] (0.05224 0.2471)	11.215	0.069	0.0652
15	[55.972 0.0691]	11.215	[55.990 0.0690] (0.05148 0.2544)	10.728	0.615	0.510
16	[55.990 0.0690]	10.728	[56.028 0.0686] (0.04988 0.2515)	13.060	10.296	0.135
17	[56.028 0.0686]	13.060	[56.058 0.0682] (0.05006 0.2477)	12.166	0.409	0.882
18	[56.028 0.0686]	13.060	[55.992 0.0680] (0.04757 0.2455)	10.566	0.0825	0.086
19	[56.028 0.0686]	13.060	[56.095 0.0696] (0.05431 0.2547)	10.113	0.0525	0.124
20	[56.028 0.0686]	13.060	[56.029 0.0686] (0.05061 0.2476)	11.996	0.345	0.265
21	[56.029 0.0686]	11.996	[56.074 0.0687] (0.04977 0.2427)	9.828	0.114	0.452
22	[56.029 0.0686]	11.996	[56.062 0.0691] (0.05298 0.2506)	11.596	0.670	0.0649
23	[56.062 0.0691]	11.596	[56.121 0.0681] (0.04897 0.2548)	10.620	0.377	0.296
24	[56.121 0.0681]	10.620	[56.194 0.0669] (0.04784 0.2496)	12.250	5.108	0.340
25	[56.194 0.0669]	12.250	[56.203 0.0665] (0.04619 0.2524)	10.816	0.238	0.0683
26	[56.203 0.0665]	10.816	[56.211 0.0664] (0.0445 0.2569)	9.467	0.260	0.715
27	[56.203 0.0665]	10.816	[56.303 0.0660] (0.04576 0.2523)	10.674	0.868	0.441
28	[56.303 0.0660]	10.674	[56.342 0.0663] (0.04583 0.2514)	10.860	1.205	0.362
29	[56.342 0.0663]	10.860	[56.289 0.0654] (0.04572 0.2533)	10.440	0.657	0.302
30	[56.289 0.0654]	10.440	[56.244 0.0661] (0.04465 0.2540)	10.025	0.660	0.298
31	[56.244 0.0661]	10.025	[56.243 0.0658] (0.04445 0.2516)	10.306	1.325	0.961
32	[56.243 0.0658]	10.306	[56.242 0.0651] (0.04464 0.2573)	9.405	0.406	0.226
33	[56.242 0.0651]	9.405	[56.237 0.0651] (0.04417 0.2578)	9.264	0.868	0.450
34	[56.237 0.0651]	9.264	[56.276 0.0644] (0.0401 0.2545)	9.042	0.801	0.491
35	[56.276 0.0644]	9.042	[56.316 0.0638] (0.03926 0.2413)	8.567	0.621	0.804
36	[56.276 0.0644]	9.042	[56.323 0.0646] (0.04351 0.2524)	9.948	2.473	0.584
37	[56.323 0.0646]	9.948	[56.372 0.0646] (0.03976 0.2529)	9.086	0.422	0.930
38	[56.323 0.0646]	9.948	[56.327 0.0650] (0.04323 0.2528)	9.835	0.893	0.0792
39	[56.327 0.0650]	9.835	[56.388 0.0656] (0.04182 0.2508)	9.604	0.794	0.395
40	[56.388 0.0656]	9.604	[56.334 0.0659] (0.04208 0.2458)	9.428	0.839	0.992
41	[56.388 0.0656]	9.604	[56.386 0.0658] (0.04224 0.2565)	9.189	0.661	0.398
42	[56.386 0.0658]	9.189	[56.423 0.0653] (0.0460 0.2569)	9.657	1.597	0.323
43	[56.423 0.0653]	9.657	[56.366 0.0649] (0.04287 0.2572)	9.189	0.626	0.173
44	[56.366 0.0649]	9.189	[56.432 0.0658] (0.0470 0.2514)	11.417	9.281	0.378
45	[56.432 0.0658]	11.417	[56.379 0.0652] (0.04469 0.2477)	10.311	0.331	0.547
46	[56.432 0.0658]	11.417	[56.406 0.0660] (0.04659 0.2508)	11.308	0.897	0.625
47	[56.406 0.0660]	11.308	[56.419 0.0659] (0.04574 0.2544)	10.190	0.327	0.526
48	[56.406 0.0660]	11.308	[56.355 0.0653] (0.04546 0.2531)	10.414	0.409	0.0279
49	[56.355 0.0653]	10.414	[56.301 0.0649] (0.04245 0.2471)	9.631	0.457	0.0115
50	[56.301 0.0649]	9.631	[56.461 0.0650] (0.04118 0.2440)	9.078	0.575	0.304
51	[56.461 0.0650]	9.078	[56.564 0.0651] (0.04364 0.2610)	8.732	0.707	0.272
52	[56.564 0.0651]	8.732	[56.561 0.0648] (0.04292 0.2502)	9.900	3.217	0.0952
53	[56.561 0.0648]	9.900	[56.610 0.0654] (0.04442 0.2588)	9.128	0.462	0.599
54	[56.561 0.0648]	9.900	[56.513 0.0651] (0.04209 0.2562)	9.197	0.495	0.323
55	[56.513 0.0651]	9.197	[56.449 0.0649] (0.04451 0.2601)	8.930	0.765	0.0256
56	[56.449 0.0649]	8.930	[56.389 0.0646] (0.04033 0.2585)	8.710	0.803	0.991
57	[56.449 0.0649]	8.930	[56.391 0.0640] (0.04008 0.2513)	9.208	1.321	0.941
58	[56.391 0.0640]	9.208	[56.327 0.0625] (0.04026 0.2546)	9.058	0.861	0.124
59	[56.327 0.0625]	9.058	[56.340 0.0627] (0.04068 0.2601)	8.574	0.616	0.764
60	[56.327 0.0625]	9.058	[56.245 0.0627] (0.03531 0.2508)	8.438	0.538	0.501
61	[56.245 0.0627]	8.438	[56.228 0.0617] (0.03636 0.2562)	8.401	0.964	0.628
62	[56.228 0.0617]	8.401	[56.241 0.0616] (0.03464 0.2498)	8.352	0.952	0.824
63	[56.241 0.0616]	8.352	[56.313 0.0606] (0.0333 0.2534)	8.144	0.812	0.930
64	[56.241 0.0616]	8.352	[56.179 0.0610] (0.03478 0.2553)	8.254	0.907	0.0404
65	[56.179 0.0610]	8.254	[56.218 0.0612] (0.03564 0.2569)	8.277	1.023	0.0661
66	[56.218 0.0612]	8.277	[56.155 0.0621] (0.03812 0.2530)	8.803	1.692	0.218
67	[56.155 0.0621]	8.803	[56.210 0.0623] (0.03756 0.2508)	8.769	0.967	0.449
68	[56.210 0.0623]	8.769	[56.108 0.0625] (0.03785 0.2518)	8.799	1.030	0.784
69	[56.108 0.0625]	8.799	[56.148 0.0629] (0.0393 0.2568)	8.732	0.935	0.892
70	[56.148 0.0629]	8.732	[56.144 0.0633] (0.04036 0.2458)	9.114	1.465	0.951
71	[56.144 0.0633]	9.114	[56.213 0.0630] (0.03898 0.2531)	8.941	0.841	0.042
72	[56.213 0.0630]	8.941	[56.197 0.0632] (0.03994 0.2535)	9.086	1.156	0.728
73	[56.197 0.0632]	9.086	[56.278 0.0627] (0.03927 0.2521)	9.031	0.947	0.540
74	[56.278 0.0627]	9.031	[56.302 0.0628] (0.03878 0.2491)	8.974	0.945	0.511
75	[56.302 0.0628]	8.974	[56.227 0.0635] (0.03975 0.2568)	8.794	0.835	0.095
76	[56.227 0.0635]	8.794	[56.236 0.0633] (0.03894 0.2605)	8.367	0.653	0.239
77	[56.236 0.0633]	8.367	[56.208 0.0633] (0.03788 0.2539)	8.729	1.435	0.690
78	[56.208 0.0633]	8.729	[56.224 0.0642] (0.04087 0.2463)	9.240	1.668	0.387
79	[56.224 0.0642]	9.240	[56.260 0.0635] (0.03956 0.2531)	9.036	0.816	0.0807
80	[56.260 0.0635]	9.036	[56.366 0.0634] (0.04072 0.2577)	8.832	0.815	0.513
81	[56.366 0.0634]	8.832	[56.391 0.0628] (0.03782 0.2533)	8.746	0.917	0.526
82	[56.391 0.0628]	8.746	[56.413 0.0630] (0.03751 0.2489)	8.759	1.013	0.684
83	[56.413 0.0630]	8.759	[56.311 0.0631] (0.03824 0.2517)	8.865	1.112	0.729
84	[56.311 0.0631]	8.865	[56.364 0.0631] (0.04054 0.2519)	9.279	1.514	0.177
85	[56.364 0.0631]	9.279	[56.341 0.0626] (0.03879 0.2519)	8.952	0.721	0.190
86	[56.341 0.0626]	8.952	[56.421 0.0621] (0.03921 0.2555)	8.828	0.883	0.630
87	[56.421 0.0621]	8.828	[56.421 0.0624] (0.04008 0.2490)	9.216	1.474	0.913
88	[56.421 0.0624]	9.216	[56.357 0.0626] (0.03859 0.2533)	8.868	0.706	0.998
89	[56.421 0.0624]	9.216	[56.464 0.0628] (0.03888 0.2581)	8.572	0.525	0.470
90	[56.464 0.0628]	8.572	[56.527 0.0633] (0.04018 0.2629)	8.241	0.718	0.291
91	[56.527 0.0633]	8.241	[56.575 0.0639] (0.04294 0.2541)	9.615	3.954	0.774
92	[56.575 0.0639]	9.615	[56.574 0.0637] (0.04014 0.2482)	9.204	0.663	0.946
93	[56.575 0.0639]	9.615	[56.513 0.0632] (0.03795 0.2505)	8.835	0.458	0.161
94	[56.513 0.0632]	8.835	[56.426 0.0637] (0.0390 0.2483)	8.997	1.175	0.897
95	[56.426 0.0637]	8.997	[56.463 0.0643] (0.04269 0.2535)	9.634	1.891	0.309
96	[56.463 0.0643]	9.634	[56.350 0.0642] (0.03888 0.2489)	8.988	0.524	0.500
97	[56.350 0.0642]	8.988	[56.302 0.0646] (0.04342 0.2519)	9.968	2.666	0.506
98	[56.302 0.0646]	9.968	[56.315 0.0644] (0.03972 0.2503)	9.154	0.443	0.647
99	[56.302 0.0646]	9.968	[56.343 0.0644] (0.04187 0.2523)	9.550	0.658	0.790
100	[56.302 0.0646]	9.968	[56.274 0.0643] (0.04107 0.2522)	9.376	0.553	0.182
101	[56.274 0.0643]	9.376	[56.309 0.0640] (0.03853 0.2437)	8.674	0.495	0.309
102	[56.309 0.0640]	8.674	[56.350 0.0637] (0.04075 0.2566)	8.952	1.321	0.331
103	[56.350 0.0637]	8.952	[56.400 0.0632] (0.03975 0.2640)	8.108	0.430	0.843
104	[56.350 0.0637]	8.952	[56.389 0.0640] (0.03975 0.2492)	9.155	1.225	0.867
105	[56.389 0.0640]	9.155	[56.364 0.0641] (0.04192 0.2592)	8.805	0.704	0.460
106	[56.364 0.0641]	8.805	[56.337 0.0643] (0.04348 0.2612)	8.697	0.898	0.289
107	[56.337 0.0643]	8.697	[56.339 0.0643] (0.04115 0.2542)	9.253	1.744	0.823
108	[56.339 0.0643]	9.253	[56.301 0.0638] (0.04307 0.2467)	9.741	1.629	0.263
109	[56.301 0.0638]	9.741	[56.287 0.0636] (0.03873 0.2499)	8.971	0.463	0.174
110	[56.287 0.0636]	8.971	[56.265 0.0643] (0.03918 0.2530)	8.979	1.007	0.781
111	[56.265 0.0643]	8.979	[56.198 0.0636] (0.03928 0.2511)	9.061	1.086	0.680
112	[56.198 0.0636]	9.061	[56.219 0.0635] (0.03947 0.2465)	9.005	0.945	0.808
113	[56.219 0.0635]	9.005	[56.177 0.0635] (0.03952 0.2483)	9.090	1.089	0.777
114	[56.177 0.0635]	9.090	[56.193 0.0631] (0.03713 0.2545)	8.591	0.607	0.080
115	[56.193 0.0631]	8.591	[56.232 0.0633] (0.03902 0.2498)	9.022	1.539	0.893
116	[56.232 0.0633]	9.022	[56.219 0.0633] (0.03945 0.2525)	9.048	1.026	0.807
117	[56.219 0.0633]	9.048	[56.142 0.0630] (0.03666 0.2533)	8.575	0.623	0.957
118	[56.219 0.0633]	9.048	[56.227 0.0628] (0.04091 0.2596)	8.653	0.674	0.505
119	[56.227 0.0628]	8.653	[56.183 0.0637] (0.04155 0.2549)	9.253	1.820	0.297
120	[56.183 0.0637]	9.253	[56.147 0.0631] (0.03796 0.2557)	8.638	0.541	0.00959
121	[56.147 0.0631]	8.638	[56.218 0.0633] (0.03838 0.2491)	8.904	1.304	0.682
122	[56.218 0.0633]	8.904	[56.182 0.0633] (0.04024 0.2503)	9.259	1.426	0.340
123	[56.182 0.0633]	9.259	[56.187 0.0623] (0.03776 0.2489)	8.798	0.631	0.785
124	[56.182 0.0633]	9.259	[56.132 0.0631] (0.03966 0.2550)	8.932	0.721	0.352
125	[56.132 0.0631]	8.932	[56.099 0.0626] (0.03799 0.2487)	8.833	0.906	0.525
126	[56.099 0.0626]	8.833	[56.070 0.0624] (0.03849 0.2526)	8.880	1.048	0.473
127	[56.070 0.0624]	8.880	[56.083 0.0626] (0.03844 0.2445)	8.718	0.850	0.740
128	[56.083 0.0626]	8.718	[56.027 0.0625] (0.03628 0.2499)	8.578	0.869	0.307
129	[56.027 0.0625]	8.578	[55.988 0.0626] (0.03834 0.2525)	8.860	1.326	0.056
130	[55.988 0.0626]	8.860	[55.982 0.0630] (0.03759 0.2538)	8.687	0.841	0.943
131	[55.988 0.0626]	8.860	[56.009 0.0635] (0.03934 0.2571)	8.711	0.862	0.076
132	[56.009 0.0635]	8.711	[56.081 0.0638] (0.04011 0.2527)	9.162	1.570	0.662
133	[56.081 0.0638]	9.162	[56.158 0.0633] (0.04081 0.2567)	8.951	0.810	0.889
134	[56.081 0.0638]	9.162	[56.066 0.0641] (0.04015 0.2496)	9.239	1.080	0.0782
135	[56.066 0.0641]	9.239	[56.056 0.0636] (0.03959 0.2482)	9.102	0.872	0.621
136	[56.056 0.0636]	9.102	[56.087 0.0642] (0.04001 0.2548)	9.008	0.910	0.0919
137	[56.087 0.0642]	9.008	[56.076 0.0651] (0.04482 0.2553)	9.818	2.248	0.840
138	[56.076 0.0651]	9.818	[56.116 0.0647] (0.04019 0.2577)	8.771	0.351	0.509
139	[56.076 0.0651]	9.818	[56.135 0.0649] (0.04095 0.2479)	9.359	0.632	0.812
140	[56.076 0.0651]	9.818	[55.950 0.0655] (0.04238 0.2527)	9.632	0.831	0.270
141	[55.950 0.0655]	9.632	[55.899 0.0660] (0.04466 0.2582)	9.252	0.684	0.374
142	[55.899 0.0660]	9.252	[55.987 0.0661] (0.04421 0.2520)	10.193	2.562	0.845
143	[55.987 0.0661]	10.193	[55.972 0.0668] (0.04606 0.2481)	10.873	1.974	0.772
144	[55.972 0.0668]	10.873	[55.976 0.0662] (0.04539 0.2511)	10.707	0.847	0.662
145	[55.976 0.0662]	10.707	[55.921 0.0650] (0.04058 0.2452)	9.097	0.200	0.807
146	[55.976 0.0662]	10.707	[56.077 0.0654] (0.04283 0.2511)	9.853	0.426	0.0531
147	[56.077 0.0654]	9.853	[56.008 0.0662] (0.0458 0.2497)	10.943	2.973	0.0193
148	[56.008 0.0662]	10.943	[56.031 0.0657] 