
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((fit - tgt)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300, verbose = T) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   
+   if (verbose) {
+     cat('(', 
+         format(fit[1], digits = 4, nsmall = 4), ' ',
+         format(fit[2], digits = 4, nsmall = 4), ')\t', sep = '')
+   }
+       
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.05, 0.0005)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   cat('START:', '\t', sep = '')
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   cat('\n')
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat(i, '\t[', 
+         format(curr[1], digits = 5, nsmall = 3), ' ', 
+         format(curr[2], digits = 3, nsmall = 4), ']\t', 
+         format(curr_lik, digits = 3, nsmall = 3), '\t', sep = '')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     
+     cat('[', 
+         format(prop[1], digits = 5, nsmall = 3), ' ', 
+         format(prop[2], digits = 3, nsmall = 4), '] ', sep = '')
+     
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat(format(prop_lik, digits = 3, nsmall = 3), '\t', sep = '')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(r, digits = 3, nsmall = 3), '\t', 
+         format(p, digits = 3, nsmall = 3), '\n', sep = '')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '10/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '10/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '10/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.10, 0.25)
> start <- c(55.3335146287223, 0.0853955049853785)
> results <- metropolis(start, target, num_sim = 2000, num_iter = 200)
START:	(0.09926 0.2465)	
1	[55.334 0.0854]	11.249	[55.365 0.0854] (0.1001 0.2532)	11.506	1.293	0.160
2	[55.365 0.0854]	11.506	[55.402 0.0853] (0.1016 0.2506)	12.775	3.558	0.916
3	[55.402 0.0853]	12.775	[55.447 0.0854] (0.1079 0.2579)	8.987	0.0226	0.237
4	[55.402 0.0853]	12.775	[55.371 0.0849] (0.1031 0.2527)	10.990	0.168	0.0685
5	[55.371 0.0849]	10.990	[55.378 0.0848] (0.09668 0.2466)	10.690	0.741	0.760
6	[55.371 0.0849]	10.990	[55.371 0.0851] (0.1005 0.2451)	10.606	0.681	0.0796
7	[55.371 0.0851]	10.606	[55.277 0.0851] (0.1028 0.2523)	11.227	1.861	0.591
8	[55.277 0.0851]	11.227	[55.177 0.0859] (0.1035 0.2489)	11.190	0.964	0.407
9	[55.177 0.0859]	11.190	[55.124 0.0854] (0.09819 0.2456)	10.712	0.620	0.485
10	[55.124 0.0854]	10.712	[55.099 0.0853] (0.1029 0.2509)	11.585	2.393	0.860
11	[55.099 0.0853]	11.585	[54.992 0.0860] (0.1027 0.2449)	10.302	0.277	0.431
12	[55.099 0.0853]	11.585	[55.165 0.0858] (0.09887 0.2461)	11.014	0.565	0.131
13	[55.165 0.0858]	11.014	[55.286 0.0860] (0.1027 0.2482)	11.446	1.540	0.991
14	[55.286 0.0860]	11.446	[55.245 0.0857] (0.1072 0.2459)	9.572	0.154	0.196
15	[55.286 0.0860]	11.446	[55.259 0.0854] (0.1023 0.2463)	10.889	0.573	0.354
16	[55.259 0.0854]	10.889	[55.203 0.0857] (0.1053 0.2535)	10.139	0.472	0.128
17	[55.203 0.0857]	10.139	[55.292 0.0856] (0.1053 0.2527)	10.261	1.129	0.880
18	[55.292 0.0856]	10.261	[55.293 0.0858] (0.1043 0.2455)	10.161	0.904	0.242
19	[55.293 0.0858]	10.161	[55.314 0.0863] (0.1061 0.2483)	10.114	0.955	0.740
20	[55.314 0.0863]	10.114	[55.303 0.0857] (0.1065 0.2536)	9.803	0.733	0.146
21	[55.303 0.0857]	9.803	[55.355 0.0850] (0.09762 0.2544)	10.607	2.235	0.172
22	[55.355 0.0850]	10.607	[55.425 0.0858] (0.1036 0.2531)	10.698	1.094	0.326
23	[55.425 0.0858]	10.698	[55.428 0.0851] (0.1016 0.2552)	10.438	0.771	0.266
24	[55.428 0.0851]	10.438	[55.406 0.0855] (0.1018 0.2557)	10.255	0.833	0.491
25	[55.406 0.0855]	10.255	[55.382 0.0850] (0.1016 0.2485)	12.236	7.252	0.827
26	[55.382 0.0850]	12.236	[55.428 0.0844] (0.09807 0.2475)	11.517	0.487	0.459
27	[55.428 0.0844]	11.517	[55.420 0.0847] (0.09555 0.2461)	10.270	0.287	0.393
28	[55.428 0.0844]	11.517	[55.495 0.0854] (0.1021 0.2540)	10.794	0.485	0.298
29	[55.495 0.0854]	10.794	[55.553 0.0853] (0.09629 0.2461)	10.461	0.717	0.124
30	[55.553 0.0853]	10.461	[55.548 0.0855] (0.1033 0.2515)	11.229	2.156	0.446
31	[55.548 0.0855]	11.229	[55.578 0.0851] (0.1018 0.2513)	12.171	2.563	0.945
32	[55.578 0.0851]	12.171	[55.532 0.0853] (0.0948 0.2493)	10.498	0.188	0.0402
33	[55.532 0.0853]	10.498	[55.560 0.0851] (0.09788 0.2485)	11.911	4.108	0.764
34	[55.560 0.0851]	11.911	[55.473 0.0843] (0.09347 0.2490)	10.042	0.154	0.463
35	[55.560 0.0851]	11.911	[55.499 0.0843] (0.09638 0.2535)	10.570	0.262	0.442
36	[55.560 0.0851]	11.911	[55.483 0.0847] (0.09888 0.2479)	12.076	1.179	0.753
37	[55.483 0.0847]	12.076	[55.508 0.0854] (0.1034 0.2494)	11.319	0.469	0.362
38	[55.508 0.0854]	11.319	[55.561 0.0858] (0.1061 0.2480)	10.108	0.298	0.0271
39	[55.561 0.0858]	10.108	[55.661 0.0852] (0.1020 0.2572)	9.779	0.720	0.121
40	[55.661 0.0852]	9.779	[55.625 0.0844] (0.09751 0.2473)	11.196	4.122	0.221
41	[55.625 0.0844]	11.196	[55.694 0.0843] (0.09822 0.2493)	12.532	3.804	0.991
42	[55.694 0.0843]	12.532	[55.696 0.0844] (0.09934 0.2505)	14.166	5.128	0.277
43	[55.696 0.0844]	14.166	[55.688 0.0850] (0.1027 0.2499)	11.855	0.0991	0.902
44	[55.696 0.0844]	14.166	[55.600 0.0841] (0.1014 0.2495)	13.013	0.316	0.232
45	[55.600 0.0841]	13.013	[55.606 0.0841] (0.09902 0.2499)	13.849	2.307	0.736
46	[55.606 0.0841]	13.849	[55.657 0.0845] (0.1007 0.2523)	12.021	0.161	0.342
47	[55.606 0.0841]	13.849	[55.525 0.0827] (0.08995 0.2558)	8.915	0.00719	0.737
48	[55.606 0.0841]	13.849	[55.549 0.0851] (0.1002 0.2438)	10.176	0.0254	0.261
49	[55.606 0.0841]	13.849	[55.663 0.0849] (0.1009 0.2550)	10.569	0.0376	0.250
50	[55.606 0.0841]	13.849	[55.596 0.0843] (0.1049 0.2527)	10.383	0.0312	0.397
51	[55.606 0.0841]	13.849	[55.667 0.0843] (0.1005 0.2516)	12.823	0.358	0.693
52	[55.606 0.0841]	13.849	[55.574 0.0829] (0.09024 0.2476)	9.200	0.00956	0.146
53	[55.606 0.0841]	13.849	[55.645 0.0840] (0.09424 0.2465)	10.001	0.0213	0.479
54	[55.606 0.0841]	13.849	[55.655 0.0840] (0.0962 0.2491)	11.095	0.0637	0.149
55	[55.606 0.0841]	13.849	[55.632 0.0835] (0.09821 0.2508)	12.472	0.252	0.625
56	[55.606 0.0841]	13.849	[55.572 0.0840] (0.09911 0.2495)	13.814	0.965	0.0728
57	[55.572 0.0840]	13.814	[55.623 0.0837] (0.09494 0.2509)	10.544	0.038	0.351
58	[55.572 0.0840]	13.814	[55.565 0.0840] (0.09814 0.2534)	11.100	0.0663	0.415
59	[55.572 0.0840]	13.814	[55.597 0.0833] (0.09725 0.2513)	11.596	0.109	0.958
60	[55.572 0.0840]	13.814	[55.571 0.0838] (0.09557 0.2503)	10.835	0.0508	0.432
61	[55.572 0.0840]	13.814	[55.640 0.0834] (0.09421 0.2517)	10.224	0.0276	0.285
62	[55.572 0.0840]	13.814	[55.513 0.0847] (0.1025 0.2527)	11.187	0.0723	0.564
63	[55.572 0.0840]	13.814	[55.603 0.0837] (0.09084 0.2496)	9.384	0.0119	0.567
64	[55.572 0.0840]	13.814	[55.594 0.0839] (0.1008 0.2533)	11.396	0.0891	0.349
65	[55.572 0.0840]	13.814	[55.561 0.0833] (0.09559 0.2522)	10.631	0.0414	0.955
66	[55.572 0.0840]	13.814	[55.681 0.0844] (0.09953 0.2496)	14.845	2.804	0.631
67	[55.681 0.0844]	14.845	[55.674 0.0841] (0.09265 0.2442)	9.339	0.00406	0.245
68	[55.681 0.0844]	14.845	[55.701 0.0841] (0.09854 0.2495)	12.966	0.153	0.0412
69	[55.701 0.0841]	12.966	[55.660 0.0848] (0.1024 0.2536)	10.877	0.124	0.990
70	[55.701 0.0841]	12.966	[55.654 0.0838] (0.09884 0.2517)	12.386	0.560	0.825
71	[55.701 0.0841]	12.966	[55.690 0.0842] (0.0950 0.2468)	10.253	0.0664	0.757
72	[55.701 0.0841]	12.966	[55.635 0.0839] (0.0959 0.2483)	10.837	0.119	0.532
73	[55.701 0.0841]	12.966	[55.787 0.0833] (0.09187 0.2477)	9.548	0.0328	0.815
74	[55.701 0.0841]	12.966	[55.670 0.0843] (0.09707 0.2476)	11.145	0.162	0.950
75	[55.701 0.0841]	12.966	[55.703 0.0849] (0.1043 0.2518)	10.734	0.107	0.920
76	[55.701 0.0841]	12.966	[55.784 0.0839] (0.09543 0.2484)	10.653	0.099	0.0685
77	[55.784 0.0839]	10.653	[55.794 0.0841] (0.09701 0.2523)	11.147	1.639	0.281
78	[55.794 0.0841]	11.147	[55.849 0.0841] (0.09955 0.2548)	10.684	0.629	0.768
79	[55.794 0.0841]	11.147	[55.801 0.0849] (0.1036 0.2480)	11.017	0.878	0.213
80	[55.801 0.0849]	11.017	[55.867 0.0852] (0.1031 0.2501)	11.540	1.688	0.0564
81	[55.867 0.0852]	11.540	[55.869 0.0850] (0.1041 0.2498)	10.993	0.579	0.438
82	[55.869 0.0850]	10.993	[55.879 0.0845] (0.09926 0.2525)	11.911	2.504	0.416
83	[55.879 0.0845]	11.911	[55.903 0.0854] (0.1036 0.2513)	11.120	0.454	0.693
84	[55.879 0.0845]	11.911	[55.858 0.0845] (0.0996 0.2535)	11.309	0.548	0.122
85	[55.858 0.0845]	11.309	[55.967 0.0842] (0.0999 0.2582)	9.598	0.181	0.773
86	[55.858 0.0845]	11.309	[55.895 0.0838] (0.0962 0.2527)	10.739	0.566	0.411
87	[55.895 0.0838]	10.739	[55.939 0.0834] (0.09742 0.2537)	10.787	1.048	0.100
88	[55.939 0.0834]	10.787	[55.949 0.0831] (0.09211 0.2461)	9.462	0.266	0.0131
89	[55.949 0.0831]	9.462	[55.949 0.0831] (0.09469 0.2492)	10.453	2.693	0.688
90	[55.949 0.0831]	10.453	[55.983 0.0827] (0.09302 0.2543)	9.611	0.431	0.777
91	[55.949 0.0831]	10.453	[55.926 0.0826] (0.09058 0.2511)	9.317	0.321	0.827
92	[55.949 0.0831]	10.453	[55.939 0.0830] (0.09596 0.2500)	11.022	1.766	0.869
93	[55.939 0.0830]	11.022	[55.987 0.0830] (0.09189 0.2539)	9.422	0.202	0.870
94	[55.939 0.0830]	11.022	[55.952 0.0821] (0.08994 0.2553)	8.952	0.126	0.592
95	[55.939 0.0830]	11.022	[55.823 0.0826] (0.09163 0.2490)	9.551	0.230	0.672
96	[55.939 0.0830]	11.022	[55.913 0.0831] (0.09631 0.2513)	11.085	1.065	0.583
97	[55.913 0.0831]	11.085	[55.960 0.0820] (0.09373 0.2537)	9.843	0.289	0.992
98	[55.913 0.0831]	11.085	[55.922 0.0830] (0.09269 0.2492)	9.825	0.284	0.161
99	[55.922 0.0830]	9.825	[55.927 0.0831] (0.09619 0.2525)	10.791	2.627	0.0279
100	[55.927 0.0831]	10.791	[55.913 0.0833] (0.09277 0.2553)	9.425	0.255	0.726
101	[55.927 0.0831]	10.791	[55.989 0.0831] (0.0925 0.2523)	9.693	0.334	0.360
102	[55.927 0.0831]	10.791	[55.968 0.0821] (0.09414 0.2545)	9.811	0.375	0.383
103	[55.927 0.0831]	10.791	[55.957 0.0830] (0.09368 0.2515)	10.076	0.489	0.663
104	[55.927 0.0831]	10.791	[56.014 0.0831] (0.09373 0.2529)	9.951	0.432	0.424
105	[56.014 0.0831]	9.951	[56.033 0.0822] (0.09162 0.2519)	9.511	0.644	0.242
106	[56.033 0.0822]	9.511	[56.074 0.0816] (0.0846 0.2502)	8.347	0.312	0.263
107	[56.074 0.0816]	8.347	[56.012 0.0809] (0.0854 0.2504)	8.453	1.112	0.569
108	[56.012 0.0809]	8.453	[56.025 0.0804] (0.08586 0.2555)	8.377	0.926	0.623
109	[56.025 0.0804]	8.377	[56.039 0.0804] (0.08812 0.2565)	8.606	1.258	0.953
110	[56.039 0.0804]	8.606	[56.042 0.0806] (0.08619 0.2550)	8.443	0.850	0.250
111	[56.042 0.0806]	8.443	[55.994 0.0804] (0.08171 0.2461)	7.958	0.616	0.123
112	[55.994 0.0804]	7.958	[56.018 0.0803] (0.08434 0.2492)	8.311	1.423	0.0457
113	[56.018 0.0803]	8.311	[56.098 0.0808] (0.08879 0.2537)	8.877	1.762	0.315
114	[56.098 0.0808]	8.877	[56.155 0.0798] (0.07904 0.2498)	7.730	0.317	0.300
115	[56.155 0.0798]	7.730	[56.135 0.0802] (0.08322 0.2505)	8.174	1.560	0.0159
116	[56.135 0.0802]	8.174	[56.129 0.0807] (0.08576 0.2483)	8.490	1.370	0.473
117	[56.129 0.0807]	8.490	[56.116 0.0801] 