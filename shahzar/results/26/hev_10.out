
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.1, 0.001)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 5), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 5), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '10/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '10/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '10/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.1, 0.25)
> start <- c(55.0560239597619, 0.0849340061708643)
> results <- metropolis(start, target, num_sim = 1000, num_iter = 500)
1	[55.056	0.08493]	11.289		[55.083	0.08483]	13.976	14.696	0.366
2	[55.083	0.08483]	13.976		[55.101	0.08477]	9.931	0.018	0.626
3	[55.083	0.08483]	13.976		[55.208	0.08645]	10.694	0.038	0.763
4	[55.083	0.08483]	13.976		[55.295	0.08418]	10.133	0.021	0.532
5	[55.083	0.08483]	13.976		[54.964	0.08635]	10.978	0.05	0.313
6	[55.083	0.08483]	13.976		[55.171	0.08493]	9.597	0.013	0.489
7	[55.083	0.08483]	13.976		[55.176	0.08254]	10.049	0.02	0.336
8	[55.083	0.08483]	13.976		[55.117	0.08381]	9.94	0.018	0.541
9	[55.083	0.08483]	13.976		[55.209	0.08451]	9.856	0.016	0.494
10	[55.083	0.08483]	13.976		[54.926	0.08487]	8.281	0.003	0.898
11	[55.083	0.08483]	13.976		[54.969	0.08517]	11.236	0.065	0.041
12	[54.969	0.08517]	11.236		[54.899	0.08592]	11.188	0.953	0.034
13	[54.899	0.08592]	11.188		[54.969	0.08467]	11.214	1.026	0.813
14	[54.969	0.08467]	11.214		[54.902	0.08406]	8.45	0.063	0.15
15	[54.969	0.08467]	11.214		[54.975	0.08556]	10.671	0.581	0.491
16	[54.975	0.08556]	10.671		[55.005	0.08603]	12.588	6.796	0.434
17	[55.005	0.08603]	12.588		[55.032	0.08707]	10.059	0.08	0.59
18	[55.005	0.08603]	12.588		[55.018	0.08586]	9.626	0.052	0.995
19	[55.005	0.08603]	12.588		[54.924	0.08585]	10.574	0.134	0.119
20	[54.924	0.08585]	10.574		[54.93	0.08547]	10.87	1.343	0.081
21	[54.93	0.08547]	10.87		[54.926	0.0849]	11.893	2.784	0.787
22	[54.926	0.0849]	11.893		[54.975	0.0861]	12.917	2.783	0.966
23	[54.975	0.0861]	12.917		[55.08	0.08404]	9.902	0.049	0.795
24	[54.975	0.0861]	12.917		[54.84	0.08717]	11.301	0.199	0.234
25	[54.975	0.0861]	12.917		[55.005	0.08624]	9.57	0.035	0.776
26	[54.975	0.0861]	12.917		[55.072	0.08438]	9.869	0.047	0.489
27	[54.975	0.0861]	12.917		[55.047	0.08674]	9.027	0.02	0.861
28	[54.975	0.0861]	12.917		[54.985	0.08809]	8.691	0.015	0.568
29	[54.975	0.0861]	12.917		[54.975	0.0852]	10.456	0.085	0.537
30	[54.975	0.0861]	12.917		[54.904	0.08586]	13.447	1.699	0.57
31	[54.904	0.08586]	13.447		[54.859	0.0832]	8.664	0.008	0.403
32	[54.904	0.08586]	13.447		[54.992	0.08587]	8.7	0.009	0.394
33	[54.904	0.08586]	13.447		[55.026	0.0858]	9.044	0.012	0.41
34	[54.904	0.08586]	13.447		[54.878	0.08637]	7.977	0.004	0.844
35	[54.904	0.08586]	13.447		[55.038	0.0875]	8.593	0.008	0.721
36	[54.904	0.08586]	13.447		[54.91	0.08491]	11.578	0.154	0.247
37	[54.904	0.08586]	13.447		[54.98	0.0859]	9.184	0.014	0.035
38	[54.904	0.08586]	13.447		[54.914	0.08669]	10.625	0.059	0.832
39	[54.904	0.08586]	13.447		[54.784	0.0865]	8.957	0.011	0.606
40	[54.904	0.08586]	13.447		[54.819	0.08632]	10.28	0.042	0.163
41	[54.904	0.08586]	13.447		[54.841	0.0843]	11.883	0.209	0.718
42	[54.904	0.08586]	13.447		[55.104	0.08539]	9.993	0.032	0.401
43	[54.904	0.08586]	13.447		[54.831	0.08497]	12.41	0.355	0.228
44	[54.831	0.08497]	12.41		[54.905	0.08667]	9.321	0.046	0.336
45	[54.831	0.08497]	12.41		[54.864	0.08441]	11.878	0.588	0.041
46	[54.864	0.08441]	11.878		[54.768	0.08555]	10.898	0.375	0.861
47	[54.864	0.08441]	11.878		[54.97	0.08487]	9.062	0.06	0.521
48	[54.864	0.08441]	11.878		[54.919	0.08424]	10.626	0.286	0.679
49	[54.864	0.08441]	11.878		[54.919	0.08563]	9.58	0.1	0.467
50	[54.864	0.08441]	11.878		[54.936	0.08442]	8.966	0.054	0.786
51	[54.864	0.08441]	11.878		[55.039	0.08384]	12.52	1.899	0.95
52	[55.039	0.08384]	12.52		[55.139	0.08403]	9.29	0.04	0.864
53	[55.039	0.08384]	12.52		[54.941	0.0835]	9.676	0.058	0.573
54	[55.039	0.08384]	12.52		[55.162	0.08476]	13.386	2.38	0.094
55	[55.162	0.08476]	13.386		[55.277	0.08518]	9.878	0.03	0.176
56	[55.162	0.08476]	13.386		[55.055	0.08482]	11.636	0.174	0.592
57	[55.162	0.08476]	13.386		[55.144	0.08387]	9.909	0.031	0.269
58	[55.162	0.08476]	13.386		[55.309	0.08349]	10.539	0.058	0.628
59	[55.162	0.08476]	13.386		[55.056	0.08555]	10.353	0.048	0.954
60	[55.162	0.08476]	13.386		[55.125	0.08564]	11.948	0.237	0.164
61	[55.125	0.08564]	11.948		[55.179	0.08515]	10.354	0.203	0.753
62	[55.125	0.08564]	11.948		[55.07	0.08462]	10.8	0.317	0.841
63	[55.125	0.08564]	11.948		[55.061	0.08568]	11.224	0.485	0.512
64	[55.125	0.08564]	11.948		[55.246	0.08638]	10.145	0.165	0.66
65	[55.125	0.08564]	11.948		[55.234	0.08606]	8.59	0.035	0.615
66	[55.125	0.08564]	11.948		[55.164	0.08661]	10.587	0.256	0.273
67	[55.125	0.08564]	11.948		[55.021	0.08625]	10.001	0.143	0.31
68	[55.125	0.08564]	11.948		[55.282	0.08581]	10.025	0.146	0.46
69	[55.125	0.08564]	11.948		[54.966	0.08601]	8.877	0.046	0.219
70	[55.125	0.08564]	11.948		[55.174	0.08716]	9.97	0.138	0.249
71	[55.125	0.08564]	11.948		[54.966	0.0872]	10.115	0.16	0.204
72	[55.125	0.08564]	11.948		[55.127	0.08775]	9.227	0.066	0.502
73	[55.125	0.08564]	11.948		[55.019	0.08607]	10.415	0.216	0.813
74	[55.125	0.08564]	11.948		[55.051	0.0851]	10.433	0.22	0.297
75	[55.125	0.08564]	11.948		[55.232	0.08496]	8.702	0.039	0.544
76	[55.125	0.08564]	11.948		[55.302	0.08646]	9.696	0.105	0.496
77	[55.125	0.08564]	11.948		[55.133	0.08608]	14.581	13.909	0.34
78	[55.133	0.08608]	14.581		[55.188	0.08689]	8.611	0.003	0.684
79	[55.133	0.08608]	14.581		[55.106	0.08611]	10.457	0.016	0.666
80	[55.133	0.08608]	14.581		[55.24	0.08704]	8.633	0.003	0.892
81	[55.133	0.08608]	14.581		[55.144	0.08716]	9.011	0.004	0.443
82	[55.133	0.08608]	14.581		[55.032	0.08692]	8.68	0.003	0.683
83	[55.133	0.08608]	14.581		[55.107	0.08604]	10.14	0.012	0.214
84	[55.133	0.08608]	14.581		[55.339	0.08634]	9.632	0.007	0.243
85	[55.133	0.08608]	14.581		[55.185	0.08647]	9.975	0.01	0.196
86	[55.133	0.08608]	14.581		[55.128	0.08508]	9.598	0.007	0.774
87	[55.133	0.08608]	14.581		[55.17	0.08636]	10.394	0.015	0.284
88	[55.133	0.08608]	14.581		[55.316	0.08449]	11.608	0.051	0.854
89	[55.133	0.08608]	14.581		[55.099	0.08629]	11.001	0.028	0.245
90	[55.133	0.08608]	14.581		[55.171	0.08708]	9.819	0.009	0.963
91	[55.133	0.08608]	14.581		[55.066	0.08666]	9.894	0.009	0.33
92	[55.133	0.08608]	14.581		[54.976	0.08675]	8.831	0.003	0.181
93	[55.133	0.08608]	14.581		[55.099	0.08672]	8.891	0.003	0.991
94	[55.133	0.08608]	14.581		[54.967	0.08684]	9.203	0.005	0.709
95	[55.133	0.08608]	14.581		[55.206	0.08654]	8.842	0.003	0.42
96	[55.133	0.08608]	14.581		[55.156	0.086]	10.807	0.023	0.63
97	[55.133	0.08608]	14.581		[54.96	0.0862]	10.335	0.014	0.566
98	[55.133	0.08608]	14.581		[55.142	0.0848]	10.117	0.012	0.264
99	[55.133	0.08608]	14.581		[55.284	0.08488]	13.921	0.517	0.857
100	[55.133	0.08608]	14.581		[54.911	0.08456]	10.452	0.016	0.762
101	[55.133	0.08608]	14.581		[55.133	0.0847]	10.129	0.012	0.29
102	[55.133	0.08608]	14.581		[55.237	0.08319]	8.788	0.003	0.524
103	[55.133	0.08608]	14.581		[55.143	0.08844]	8.281	0.002	0.629
104	[55.133	0.08608]	14.581		[55.14	0.08907]	8.704	0.003	0.294
105	[55.133	0.08608]	14.581		[54.963	0.08401]	9.854	0.009	0.411
106	[55.133	0.08608]	14.581		[55.133	0.08614]	11.116	0.031	0.45
107	[55.133	0.08608]	14.581		[55.053	0.08819]	8.523	0.002	0.46
108	[55.133	0.08608]	14.581		[55.214	0.08603]	9.632	0.007	0.936
109	[55.133	0.08608]	14.581		[54.946	0.08607]	11.381	0.041	0.384
110	[55.133	0.08608]	14.581		[55.21	0.08558]	10.44	0.016	0.9
111	[55.133	0.08608]	14.581		[54.999	0.08643]	9.058	0.004	0.392
112	[55.133	0.08608]	14.581		[55.216	0.08747]	9.756	0.008	0.566
113	[55.133	0.08608]	14.581		[55.047	0.08596]	9.885	0.009	0.472
114	[55.133	0.08608]	14.581		[55.069	0.08658]	10.337	0.014	0.519
115	[55.133	0.08608]	14.581		[54.974	0.08467]	10.099	0.011	0.855
116	[55.133	0.08608]	14.581		[55.163	0.08677]	9.566	0.007	0.419
117	[55.133	0.08608]	14.581		[55.09	0.08623]	9.936	0.01	0.791
118	[55.133	0.08608]	14.581		[55.251	0.08546]	10.886	0.025	0.376
119	[55.133	0.08608]	14.581		[55.267	0.08521]	9.671	0.007	0.889
120	[55.133	0.08608]	14.581		[55.257	0.08662]	8.224	0.002	0.686
121	[55.133	0.08608]	14.581		[55.159	0.08675]	9.778	0.008	0.868
122	[55.133	0.08608]	14.581		[55.123	0.08627]	8.45	0.002	0.774
123	[55.133	0.08608]	14.581		[54.962	0.08644]	8.993	0.004	0.113
124	[55.133	0.08608]	14.581		[55.099	0.08695]	8.529	0.002	0.682
125	[55.133	0.08608]	14.581		[55.2	0.08503]	11.189	0.034	0.777
126	[55.133	0.08608]	14.581		[55.188	0.08683]	11.87	0.067	0.888
127	[55.133	0.08608]	14.581		[55.314	0.08587]	11.399	0.042	0.726
128	[55.133	0.08608]	14.581		[55.087	0.08683]	9.077	0.004	0.48
129	[55.133	0.08608]	14.581		[55.142	0.08752]	8.591	0.003	0.105
130	[55.133	0.08608]	14.581		[55.051	0.08636]	10.661	0.02	0.224
131	[55.133	0.08608]	14.581		[55.155	0.08505]	10.688	0.02	0.123
132	[55.133	0.08608]	14.581		[54.847	0.08614]	9.788	0.008	0.793
133	[55.133	0.08608]	14.581		[55.03	0.08637]	11.162	0.033	0.024
134	[55.03	0.08637]	11.162		[54.939	0.08647]	9.448	0.18	0.645
135	[55.03	0.08637]	11.162		[54.908	0.08641]	11.095	0.935	0.084
136	[54.908	0.08641]	11.095		[54.898	0.08559]	10.332	0.466	0.536
137	[54.908	0.08641]	11.095		[54.819	0.08698]	11.993	2.454	0.572
138	[54.819	0.08698]	11.993		[54.836	0.08677]	9.248	0.064	0.587
139	[54.819	0.08698]	11.993		[54.873	0.08659]	9.163	0.059	0.712
140	[54.819	0.08698]	11.993		[54.841	0.0861]	10.998	0.37	0.612
141	[54.819	0.08698]	11.993		[54.572	0.08773]	11.983	0.99	0.633
142	[54.572	0.08773]	11.983		[54.75	0.08777]	8.754	0.04	0.653
143	[54.572	0.08773]	11.983		[54.521	0.08753]	8.914	0.046	0.022
144	[54.521	0.08753]	8.914		[54.502	0.08639]	10.573	5.255	0.079
145	[54.502	0.08639]	10.573		[54.803	0.08516]	11.46	2.428	0.966
146	[54.803	0.08516]	11.46		[54.849	0.08542]	9.534	0.146	0.701
147	[54.803	0.08516]	11.46		[54.811	0.08568]	11.077	0.682	0.796
148	[54.803	0.08516]	11.46		[54.903	0.08474]	9.794	0.189	0.464
149	[54.803	0.08516]	11.46		[54.828	0.0855]	14.38	18.542	0.421
150	[54.828	0.0855]	14.38		[54.839	0.0844]	10.012	0.013	0.721
151	[54.828	0.0855]	14.38		[54.831	0.08587]	10.84	0.029	0.37
152	[54.828	0.0855]	14.38		[55.032	0.08658]	9.957	0.012	0.578
153	[54.828	0.0855]	14.38		[54.743	0.08511]	11.917	0.085	0.887
154	[54.828	0.0855]	14.38		[54.701	0.08303]	9.7	0.009	0.674
155	[54.828	0.0855]	14.38		[54.686	0.08629]	9.291	0.006	0.842
156	[54.828	0.0855]	14.38		[54.699	0.08444]	9.463	0.007	0.474
157	[54.828	0.0855]	14.38		[54.822	0.08438]	11.079	0.037	0.238
158	[54.828	0.0855]	14.38		[54.824	0.08695]	9.713	0.009	0.389
159	[54.828	0.0855]	14.38		[54.8	0.08798]	8.164	0.002	0.883
160	[54.828	0.0855]	14.38		[54.806	0.0867]	9.089	0.005	0.625
161	[54.828	0.0855]	14.38		[54.971	0.08651]	9.26	0.006	0.056
162	[54.828	0.0855]	14.38		[54.931	0.08587]	11.969	0.09	0.41
163	[54.828	0.0855]	14.38		[54.973	0.08414]	9.958	0.012	0.13
164	[54.828	0.0855]	14.38		[54.967	0.0858]	10.273	0.016	0.095
165	[54.828	0.0855]	14.38		[54.696	0.08505]	11.732	0.071	0.497
166	[54.828	0.0855]	14.38		[54.8	0.08665]	10.651	0.024	0.752
167	[54.828	0.0855]	14.38		[54.959	0.08717]	9.674	0.009	0.513
168	[54.828	0.0855]	14.38		[54.81	0.08524]	10.163	0.015	0.933
169	[54.828	0.0855]	14.38		[54.629	0.08671]	12.682	0.183	0.898
170	[54.828	0.0855]	14.38		[54.87	0.08575]	10.392	0.019	0.434
171	[54.828	0.0855]	14.38		[54.865	0.08533]	10.431	0.019	0.352
172	[54.828	0.0855]	14.38		[54.698	0.08546]	12.535	0.158	0.023
173	[54.698	0.08546]	12.535		[54.773	0.08448]	10.964	0.208	0.786
174	[54.698	0.08546]	12.535		[54.65	0.08616]	13.145	1.84	0.465
175	[54.65	0.08616]	13.145		[54.629	0.0863]	9.647	0.03	0.951
176	[54.65	0.08616]	13.145		[54.704	0.0858]	10.129	0.049	0.56
177	[54.65	0.08616]	13.145		[54.799	0.08693]	11.901	0.288	0.043
178	[54.799	0.08693]	11.901		[54.751	0.08695]	10.832	0.343	0.923
179	[54.799	0.08693]	11.901		[54.972	0.08762]	9.596	0.1	0.355
180	[54.799	0.08693]	11.901		[54.803	0.08782]	9.023	0.056	0.181
181	[54.799	0.08693]	11.901		[54.703	0.08749]	9.417	0.083	0.622
182	[54.799	0.08693]	11.901		[54.841	0.08792]	9.551	0.095	0.672
183	[54.799	0.08693]	11.901		[54.758	0.08753]	10.032	0.154	0.094
184	[54.758	0.08753]	10.032		[54.763	0.0858]	13.683	38.506	0.479
185	[54.763	0.0858]	13.683		[54.693	0.08515]	11.501	0.113	0.698
186	[54.763	0.0858]	13.683		[54.729	0.08605]	15.356	5.33	0.75
187	[54.729	0.08605]	15.356		[54.597	0.08394]	9.203	0.002	0.392
188	[54.729	0.08605]	15.356		[54.81	0.08618]	9.913	0.004	0.606
189	[54.729	0.08605]	15.356		[54.666	0.0869]	8.68	0.001	0.138
190	[54.729	0.08605]	15.356		[54.709	0.0866]	10.031	0.005	0.697
191	[54.729	0.08605]	15.356		[54.803	0.08631]	8.76	0.001	0.99
192	[54.729	0.08605]	15.356		[54.74	0.08524]	11.837	0.03	0.715
193	[54.729	0.08605]	15.356		[54.657	0.08615]	9.754	0.004	0.114
194	[54.729	0.08605]	15.356		[54.38	0.0867]	8.923	0.002	0.548
195	[54.729	0.08605]	15.356		[54.704	0.08624]	9.318	0.002	0.595
196	[54.729	0.08605]	15.356		[54.871	0.08809]	8.672	0.001	0.817
197	[54.729	0.08605]	15.356		[54.655	0.08714]	9.511	0.003	0.707
198	[54.729	0.08605]	15.356		[54.898	0.08626]	9.84	0.004	0.52
199	[54.729	0.08605]	15.356		[54.624	0.0857]	10.092	0.005	0.961
200	[54.729	0.08605]	15.356		[54.913	0.08629]	9.93	0.004	0.63
201	[54.729	0.08605]	15.356		[54.825	0.08639]	9.849	0.004	0.034
202	[54.729	0.08605]	15.356		[54.904	0.08366]	10.349	0.007	0.012
203	[54.729	0.08605]	15.356		[54.621	0.08732]	9.297	0.002	0.025
204	[54.729	0.08605]	15.356		[54.721	0.08568]	9.893	0.004	0.847
205	[54.729	0.08605]	15.356		[54.782	0.08668]	9.387	0.003	0.106
206	[54.729	0.08605]	15.356		[54.688	0.08803]	9.788	0.004	0.428
207	[54.729	0.08605]	15.356		[54.847	0.0844]	8.639	0.001	0.439
208	[54.729	0.08605]	15.356		[54.69	0.0852]	9.949	0.004	0.066
209	[54.729	0.08605]	15.356		[54.779	0.08732]	8.973	0.002	0.699
210	[54.729	0.08605]	15.356		[54.75	0.08555]	13.043	0.099	0.832
211	[54.729	0.08605]	15.356		[54.522	0.08599]	10.644	0.009	0.814
212	[54.729	0.08605]	15.356		[54.835	0.08586]	9.883	0.004	0.939
213	[54.729	0.08605]	15.356		[54.871	0.08568]	9.508	0.003	0.025
214	[54.729	0.08605]	15.356		[54.791	0.08694]	9.293	0.002	0.434
215	[54.729	0.08605]	15.356		[54.569	0.08943]	7.892	0.001	0.772
216	[54.729	0.08605]	15.356		[54.896	0.08661]	9.596	0.003	0.192
217	[54.729	0.08605]	15.356		[54.755	0.08491]	10.658	0.009	0.799
218	[54.729	0.08605]	15.356		[54.921	0.08555]	12.116	0.039	0.757
219	[54.729	0.08605]	15.356		[54.659	0.08446]	9.193	0.002	0.844
220	[54.729	0.08605]	15.356		[54.897	0.08658]	9.466	0.003	0.848
221	[54.729	0.08605]	15.356		[54.47	0.08674]	10.486	0.008	0.689
222	[54.729	0.08605]	15.356		[54.822	0.08549]	10.988	0.013	0.328
223	[54.729	0.08605]	15.356		[54.617	0.0865]	12.036	0.036	0.529
224	[54.729	0.08605]	15.356		[54.641	0.08567]	11.426	0.02	0.928
225	[54.729	0.08605]	15.356		[54.806	0.08571]	15.424	1.07	0.402
226	[54.806	0.08571]	15.424		[54.693	0.08467]	10.764	0.009	0.416
227	[54.806	0.08571]	15.424		[54.641	0.08658]	11.41	0.018	0.461
228	[54.806	0.08571]	15.424		[54.859	0.08593]	9.629	0.003	0.364
229	[54.806	0.08571]	15.424		[54.872	0.08658]	9.702	0.003	0.854
230	[54.806	0.08571]	15.424		[54.901	0.08663]	8.494	0.001	0.877
231	[54.806	0.08571]	15.424		[54.885	0.08547]	9.973	0.004	0.429
232	[54.806	0.08571]	15.424		[54.655	0.08613]	9.572	0.003	0.481
233	[54.806	0.08571]	15.424		[54.927	0.08628]	9.384	0.002	0.344
234	[54.806	0.08571]	15.424		[54.884	0.08596]	9.429	0.002	0.666
235	[54.806	0.08571]	15.424		[54.837	0.08415]	11.667	0.023	0.451
236	[54.806	0.08571]	15.424		[54.863	0.08482]	8.997	0.002	0.374
237	[54.806	0.08571]	15.424		[54.726	0.08376]	9.662	0.003	0.848
238	[54.806	0.08571]	15.424		[54.673	0.08545]	9.915	0.004	0.804
239	[54.806	0.08571]	15.424		[54.586	0.08437]	9.986	0.004	0.987
240	[54.806	0.08571]	15.424		[54.932	0.0861]	10.032	0.005	0.344
241	[54.806	0.08571]	15.424		[54.778	0.08541]	9.4	0.002	0.572
242	[54.806	0.08571]	15.424		[54.722	0.08532]	9.697	0.003	0.17
