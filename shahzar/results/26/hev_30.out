
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((fit - tgt)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300, verbose = T) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   
+   if (verbose) {
+     cat('(', 
+         format(fit[1], digits = 4, nsmall = 4), ' ',
+         format(fit[2], digits = 4, nsmall = 4), ')\t', sep = '')
+   }
+       
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.05, 0.0005)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   cat('START:', '\t', sep = '')
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   cat('\n')
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat(i, '\t[', 
+         format(curr[1], digits = 5, nsmall = 3), ' ', 
+         format(curr[2], digits = 3, nsmall = 4), ']\t', 
+         format(curr_lik, digits = 3, nsmall = 3), '\t', sep = '')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     
+     cat('[', 
+         format(prop[1], digits = 5, nsmall = 3), ' ', 
+         format(prop[2], digits = 3, nsmall = 4), '] ', sep = '')
+     
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat(format(prop_lik, digits = 3, nsmall = 3), '\t', sep = '')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(r, digits = 3, nsmall = 3), '\t', 
+         format(p, digits = 3, nsmall = 3), '\n', sep = '')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '30/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '30/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '30/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.30, 0.25)
> start <- c(52.6740892462374, 0.121665484115338)
> results <- metropolis(start, target, num_sim = 2000, num_iter = 200)
START:	(0.2851 0.2408)	
1	[52.674 0.1217]	8.092	[52.650 0.1212] (0.2924 0.2482)	9.695	4.970	0.098
2	[52.650 0.1212]	9.695	[52.582 0.1214] (0.2914 0.2463)	9.334	0.697	0.237
3	[52.582 0.1214]	9.334	[52.516 0.1220] (0.2906 0.2476)	9.267	0.935	0.894
4	[52.516 0.1220]	9.267	[52.515 0.1221] (0.2942 0.2461)	9.920	1.922	0.256
5	[52.515 0.1221]	9.920	[52.523 0.1214] (0.3008 0.2478)	12.123	9.057	0.438
6	[52.523 0.1214]	12.123	[52.461 0.1210] (0.2912 0.2448)	9.162	0.0517	0.551
7	[52.523 0.1214]	12.123	[52.444 0.1203] (0.2806 0.2493)	7.883	0.0144	0.847
8	[52.523 0.1214]	12.123	[52.488 0.1215] (0.2874 0.2444)	8.564	0.0285	0.851
9	[52.523 0.1214]	12.123	[52.519 0.1216] (0.2921 0.2460)	9.455	0.0694	0.413
10	[52.523 0.1214]	12.123	[52.511 0.1216] (0.2916 0.2470)	9.449	0.0689	0.305
11	[52.523 0.1214]	12.123	[52.532 0.1211] (0.2914 0.2465)	9.361	0.0631	0.0461
12	[52.532 0.1211]	9.361	[52.557 0.1216] (0.2875 0.2441)	8.564	0.450	0.672
13	[52.532 0.1211]	9.361	[52.536 0.1207] (0.2809 0.2449)	7.844	0.219	0.674
14	[52.532 0.1211]	9.361	[52.527 0.1218] (0.2916 0.2469)	9.423	1.064	0.950
15	[52.527 0.1218]	9.423	[52.556 0.1223] (0.2970 0.2464)	10.716	3.645	0.929
16	[52.556 0.1223]	10.716	[52.492 0.1226] (0.2980 0.2452)	10.522	0.824	0.738
17	[52.492 0.1226]	10.522	[52.492 0.1230] (0.3061 0.2477)	10.071	0.637	0.361
18	[52.492 0.1230]	10.071	[52.477 0.1233] (0.3074 0.2450)	9.442	0.533	0.497
19	[52.477 0.1233]	9.442	[52.492 0.1236] (0.2976 0.2445)	10.223	2.184	0.702
20	[52.492 0.1236]	10.223	[52.441 0.1243] (0.3136 0.2459)	8.513	0.181	0.703
21	[52.492 0.1236]	10.223	[52.444 0.1238] (0.3063 0.2451)	9.661	0.570	0.0651
22	[52.444 0.1238]	9.661	[52.491 0.1241] (0.3063 0.2436)	9.429	0.793	0.834
23	[52.444 0.1238]	9.661	[52.459 0.1240] (0.3101 0.2495)	9.195	0.627	0.0549
24	[52.459 0.1240]	9.195	[52.388 0.1235] (0.3086 0.2476)	9.444	1.283	0.270
25	[52.388 0.1235]	9.444	[52.395 0.1229] (0.3043 0.2454)	10.146	2.017	0.833
26	[52.395 0.1229]	10.146	[52.393 0.1231] (0.3087 0.2480)	9.443	0.495	0.107
27	[52.393 0.1231]	9.443	[52.363 0.1241] (0.3030 0.2408)	9.283	0.852	0.633
28	[52.363 0.1241]	9.283	[52.308 0.1253] (0.3197 0.2504)	7.849	0.238	0.890
29	[52.363 0.1241]	9.283	[52.333 0.1237] (0.3111 0.2475)	8.959	0.724	0.281
30	[52.333 0.1237]	8.959	[52.381 0.1231] (0.3032 0.2448)	10.201	3.460	0.506
31	[52.381 0.1231]	10.201	[52.397 0.1234] (0.3100 0.2450)	8.994	0.299	0.209
32	[52.397 0.1234]	8.994	[52.437 0.1237] (0.3079 0.2441)	9.239	1.277	0.412
33	[52.437 0.1237]	9.239	[52.429 0.1239] (0.3076 0.2477)	9.659	1.522	0.566
34	[52.429 0.1239]	9.659	[52.461 0.1235] (0.3031 0.2429)	9.707	1.049	0.109
35	[52.461 0.1235]	9.707	[52.436 0.1240] (0.3142 0.2456)	8.411	0.274	0.855
36	[52.461 0.1235]	9.707	[52.445 0.1239] (0.3168 0.2492)	8.167	0.214	0.390
37	[52.461 0.1235]	9.707	[52.470 0.1232] (0.3111 0.2449)	8.805	0.406	0.266
38	[52.470 0.1232]	8.805	[52.483 0.1238] (0.3144 0.2481)	8.469	0.715	0.382
39	[52.483 0.1238]	8.469	[52.477 0.1233] (0.2999 0.2434)	10.046	4.844	0.686
40	[52.477 0.1233]	10.046	[52.528 0.1226] (0.2973 0.2460)	10.657	1.841	0.036
41	[52.528 0.1226]	10.657	[52.582 0.1229] (0.3014 0.2464)	11.127	1.600	0.683
42	[52.582 0.1229]	11.127	[52.471 0.1229] (0.3006 0.2420)	9.644	0.227	0.0139
43	[52.471 0.1229]	9.644	[52.493 0.1234] (0.3048 0.2465)	10.261	1.853	0.169
44	[52.493 0.1234]	10.261	[52.476 0.1228] (0.3087 0.2461)	9.315	0.388	0.902
45	[52.493 0.1234]	10.261	[52.420 0.1231] (0.3038 0.2450)	10.154	0.899	0.281
46	[52.420 0.1231]	10.154	[52.430 0.1224] (0.2960 0.2457)	10.273	1.126	0.839
47	[52.430 0.1224]	10.273	[52.471 0.1220] (0.2885 0.2438)	8.683	0.204	0.564
48	[52.430 0.1224]	10.273	[52.409 0.1221] (0.2996 0.2457)	10.868	1.813	0.183
49	[52.409 0.1221]	10.868	[52.466 0.1219] (0.2941 0.2457)	9.841	0.358	0.480
50	[52.409 0.1221]	10.868	[52.347 0.1221] (0.2925 0.2433)	9.190	0.187	0.883
51	[52.409 0.1221]	10.868	[52.371 0.1213] (0.2842 0.2430)	8.112	0.0636	0.176
52	[52.409 0.1221]	10.868	[52.460 0.1219] (0.2971 0.2455)	10.480	0.678	0.194
53	[52.460 0.1219]	10.480	[52.491 0.1216] (0.2988 0.2433)	9.992	0.614	0.934
54	[52.460 0.1219]	10.480	[52.506 0.1210] (0.2912 0.2495)	9.467	0.363	0.359
55	[52.506 0.1210]	9.467	[52.654 0.1216] (0.2993 0.2528)	11.700	9.327	0.419
56	[52.654 0.1216]	11.700	[52.638 0.1217] (0.2915 0.2427)	8.994	0.0668	0.637
57	[52.654 0.1216]	11.700	[52.619 0.1211] (0.2898 0.2457)	9.005	0.0676	0.0303
58	[52.619 0.1211]	9.005	[52.624 0.1220] (0.2932 0.2440)	9.420	1.515	0.0183
59	[52.624 0.1220]	9.420	[52.605 0.1219] (0.2973 0.2474)	11.190	5.867	0.493
60	[52.605 0.1219]	11.190	[52.642 0.1217] (0.2955 0.2473)	10.488	0.496	0.675
61	[52.605 0.1219]	11.190	[52.582 0.1223] (0.2939 0.2431)	9.388	0.165	0.284
62	[52.605 0.1219]	11.190	[52.586 0.1211] (0.2938 0.2469)	9.939	0.286	0.0731
63	[52.586 0.1211]	9.939	[52.579 0.1214] (0.2928 0.2456)	9.560	0.685	0.950
64	[52.586 0.1211]	9.939	[52.590 0.1201] (0.2805 0.2458)	7.831	0.121	0.673
65	[52.586 0.1211]	9.939	[52.661 0.1208] (0.2925 0.2466)	9.600	0.713	0.608
66	[52.661 0.1208]	9.600	[52.699 0.1202] (0.2856 0.2503)	8.487	0.329	0.345
67	[52.661 0.1208]	9.600	[52.628 0.1217] (0.2931 0.2454)	9.594	0.994	0.162
68	[52.628 0.1217]	9.594	[52.673 0.1211] (0.2953 0.2469)	10.355	2.139	0.322
69	[52.673 0.1211]	10.355	[52.649 0.1212] (0.2892 0.2430)	8.709	0.193	0.0357
70	[52.649 0.1212]	8.709	[52.611 0.1217] (0.3057 0.2502)	10.317	4.994	0.337
71	[52.611 0.1217]	10.317	[52.584 0.1218] (0.2943 0.2480)	10.231	0.918	0.795
72	[52.584 0.1218]	10.231	[52.621 0.1224] (0.3031 0.2501)	11.576	3.837	0.610
73	[52.621 0.1224]	11.576	[52.561 0.1229] (0.3026 0.2451)	10.380	0.303	0.615
74	[52.621 0.1224]	11.576	[52.703 0.1215] (0.3017 0.2478)	11.759	1.201	0.813
75	[52.703 0.1215]	11.759	[52.627 0.1214] (0.2943 0.2491)	10.303	0.233	0.387
76	[52.703 0.1215]	11.759	[52.670 0.1219] (0.2955 0.2455)	10.121	0.194	0.520
77	[52.703 0.1215]	11.759	[52.809 0.1213] (0.2939 0.2474)	10.022	0.176	0.730
78	[52.703 0.1215]	11.759	[52.706 0.1213] (0.2957 0.2461)	10.302	0.233	0.303
79	[52.703 0.1215]	11.759	[52.686 0.1213] (0.2972 0.2456)	10.505	0.285	0.850
80	[52.703 0.1215]	11.759	[52.775 0.1211] (0.3008 0.2481)	12.397	1.893	0.445
81	[52.775 0.1211]	12.397	[52.808 0.1214] (0.3043 0.2517)	10.763	0.195	0.00738
82	[52.808 0.1214]	10.763	[52.873 0.1219] (0.3068 0.2517)	9.908	0.425	0.0806
83	[52.873 0.1219]	9.908	[52.780 0.1217] (0.2991 0.2480)	12.273	10.643	0.847
84	[52.780 0.1217]	12.273	[52.779 0.1214] (0.2935 0.2471)	9.899	0.0932	0.626
85	[52.780 0.1217]	12.273	[52.849 0.1214] (0.2867 0.2444)	8.481	0.0226	0.593
86	[52.780 0.1217]	12.273	[52.753 0.1221] (0.3007 0.2481)	12.373	1.106	0.152
87	[52.753 0.1221]	12.373	[52.752 0.1226] 