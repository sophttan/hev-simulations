
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.05, 0.0005)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 5), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 5), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '30/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '30/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '30/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.30, 0.25)
> start <- c(52.7367735229351, 0.121308277642932)
> results <- metropolis(start, target, num_sim = 1000, num_iter = 500)
1	[52.737	0.12131]	8.763		[52.761	0.1216]	9.737	2.648	0.639
2	[52.761	0.1216]	9.737		[52.783	0.12239]	9.216	0.594	0.928
3	[52.761	0.1216]	9.737		[52.802	0.12062]	11.226	4.435	0.749
4	[52.802	0.12062]	11.226		[52.781	0.12082]	9.099	0.119	0.339
5	[52.802	0.12062]	11.226		[52.909	0.12143]	11.462	1.266	0.845
6	[52.909	0.12143]	11.462		[52.904	0.1219]	9.051	0.09	0.785
7	[52.909	0.12143]	11.462		[53.008	0.12222]	11.272	0.827	0.638
8	[53.008	0.12222]	11.272		[52.952	0.12166]	9.769	0.222	0.779
9	[53.008	0.12222]	11.272		[53.056	0.12258]	7.533	0.024	0.242
10	[53.008	0.12222]	11.272		[53.056	0.12203]	10.474	0.45	0.61
11	[53.008	0.12222]	11.272		[53.073	0.12226]	9.739	0.216	0.445
12	[53.008	0.12222]	11.272		[53.101	0.1225]	8.63	0.071	0.874
13	[53.008	0.12222]	11.272		[52.961	0.12206]	8.863	0.09	0.248
14	[53.008	0.12222]	11.272		[53.079	0.12321]	8.003	0.038	0.723
15	[53.008	0.12222]	11.272		[53.039	0.12245]	9.535	0.176	0.195
16	[53.008	0.12222]	11.272		[52.983	0.12252]	10.842	0.651	0.364
17	[52.983	0.12252]	10.842		[52.956	0.12228]	11.151	1.362	0.838
18	[52.956	0.12228]	11.151		[52.976	0.12189]	10.395	0.469	0.506
19	[52.956	0.12228]	11.151		[53.019	0.12168]	9.172	0.138	0.669
20	[52.956	0.12228]	11.151		[52.99	0.12255]	9.118	0.131	0.989
21	[52.956	0.12228]	11.151		[53.044	0.12188]	9.727	0.241	0.708
22	[52.956	0.12228]	11.151		[52.932	0.12218]	10.57	0.559	0.584
23	[52.956	0.12228]	11.151		[52.938	0.12186]	10.357	0.452	0.889
24	[52.956	0.12228]	11.151		[52.919	0.12165]	8.638	0.081	0.54
25	[52.956	0.12228]	11.151		[52.947	0.12213]	10.711	0.644	0.845
26	[52.956	0.12228]	11.151		[53.004	0.12201]	10.109	0.353	0.405
27	[52.956	0.12228]	11.151		[53.013	0.12262]	7.937	0.04	0.14
28	[52.956	0.12228]	11.151		[53.003	0.12237]	9.302	0.157	0.541
29	[52.956	0.12228]	11.151		[53.058	0.12256]	9.585	0.209	0.511
30	[52.956	0.12228]	11.151		[52.981	0.12271]	9.461	0.185	0.941
31	[52.956	0.12228]	11.151		[52.915	0.12261]	9.727	0.241	0.779
32	[52.956	0.12228]	11.151		[52.991	0.12115]	8.436	0.066	0.841
33	[52.956	0.12228]	11.151		[52.888	0.1223]	12.833	5.374	0.049
34	[52.888	0.1223]	12.833		[52.872	0.12144]	10.837	0.136	0.075
35	[52.872	0.12144]	10.837		[52.78	0.1216]	10.446	0.677	0.213
36	[52.78	0.1216]	10.446		[52.723	0.12102]	9.302	0.319	0.58
37	[52.78	0.1216]	10.446		[52.764	0.12181]	10.729	1.326	0.394
38	[52.764	0.12181]	10.729		[52.829	0.1218]	7.931	0.061	0.86
39	[52.764	0.12181]	10.729		[52.745	0.1221]	9.165	0.209	0.07
40	[52.745	0.1221]	9.165		[52.736	0.12235]	9.119	0.954	0.635
41	[52.736	0.12235]	9.119		[52.736	0.12238]	9.548	1.537	0.651
42	[52.736	0.12238]	9.548		[52.667	0.12242]	8.859	0.502	0.696
43	[52.736	0.12238]	9.548		[52.77	0.12267]	9.721	1.188	0.999
44	[52.77	0.12267]	9.721		[52.739	0.1218]	7.749	0.139	0.126
45	[52.739	0.1218]	7.749		[52.674	0.12167]	15.137	1615.92	0.603
46	[52.674	0.12167]	15.137		[52.671	0.12158]	8.838	0.002	0.418
47	[52.674	0.12167]	15.137		[52.703	0.12125]	8.17	0.001	0.12
48	[52.674	0.12167]	15.137		[52.752	0.1222]	9.991	0.006	0.746
49	[52.674	0.12167]	15.137		[52.66	0.12226]	12.112	0.049	0.381
50	[52.674	0.12167]	15.137		[52.679	0.12189]	8.434	0.001	0.446
51	[52.674	0.12167]	15.137		[52.612	0.12141]	12.32	0.06	0.803
52	[52.674	0.12167]	15.137		[52.665	0.1218]	9.603	0.004	0.606
53	[52.674	0.12167]	15.137		[52.622	0.12082]	9.549	0.004	0.217
54	[52.674	0.12167]	15.137		[52.701	0.12206]	8.856	0.002	0.155
55	[52.674	0.12167]	15.137		[52.66	0.12125]	10.179	0.007	0.451
56	[52.674	0.12167]	15.137		[52.665	0.12159]	11.077	0.017	0.987
57	[52.674	0.12167]	15.137		[52.701	0.12143]	8.663	0.002	0.05
58	[52.674	0.12167]	15.137		[52.639	0.12159]	9.844	0.005	0.476
59	[52.674	0.12167]	15.137		[52.779	0.12179]	11.92	0.04	0.564
60	[52.674	0.12167]	15.137		[52.624	0.12129]	9.217	0.003	0.852
61	[52.674	0.12167]	15.137		[52.746	0.12081]	8.109	0.001	0.554
62	[52.674	0.12167]	15.137		[52.698	0.12252]	9.303	0.003	0.386
63	[52.674	0.12167]	15.137		[52.652	0.12173]	7.858	0.001	0.797
64	[52.674	0.12167]	15.137		[52.664	0.1212]	8.066	0.001	0.809
65	[52.674	0.12167]	15.137		[52.814	0.12247]	8.224	0.001	0.281
66	[52.674	0.12167]	15.137		[52.657	0.12187]	8.643	0.002	0.996
67	[52.674	0.12167]	15.137		[52.673	0.12098]	9.159	0.003	0.942
68	[52.674	0.12167]	15.137		[52.698	0.12221]	9.973	0.006	0.864
69	[52.674	0.12167]	15.137		[52.681	0.12086]	10.301	0.008	0.384
70	[52.674	0.12167]	15.137		[52.629	0.12132]	9.037	0.002	0.806
71	[52.674	0.12167]	15.137		[52.666	0.1219]	8.947	0.002	0.93
72	[52.674	0.12167]	15.137		[52.677	0.12257]	9.441	0.003	0.816
73	[52.674	0.12167]	15.137		[52.596	0.12115]	8.832	0.002	0.708
74	[52.674	0.12167]	15.137		[52.703	0.12089]	9.494	0.004	0.466
75	[52.674	0.12167]	15.137		[52.673	0.12187]	9.172	0.003	0.36
76	[52.674	0.12167]	15.137		[52.602	0.12203]	9.339	0.003	0.06
77	[52.674	0.12167]	15.137		[52.726	0.1221]	11.2	0.02	0.766
78	[52.674	0.12167]	15.137		[52.658	0.12198]	9.376	0.003	0.667
79	[52.674	0.12167]	15.137		[52.702	0.12148]	10.365	0.008	0.731
80	[52.674	0.12167]	15.137		[52.691	0.1222]	9.715	0.004	0.263
81	[52.674	0.12167]	15.137		[52.661	0.12168]	9.643	0.004	0.487
82	[52.674	0.12167]	15.137		[52.66	0.12161]	10.2	0.007	0.292
83	[52.674	0.12167]	15.137		[52.668	0.12147]	10.393	0.009	0.288
84	[52.674	0.12167]	15.137		[52.595	0.12198]	9.564	0.004	0.728
85	[52.674	0.12167]	15.137		[52.669	0.12183]	8.993	0.002	0.727
86	[52.674	0.12167]	15.137		[52.617	0.12137]	8.975	0.002	0.917
87	[52.674	0.12167]	15.137		[52.582	0.12194]	11.582	0.029	0.036
88	[52.674	0.12167]	15.137		[52.623	0.12119]	8.394	0.001	0.604
89	[52.674	0.12167]	15.137		[52.61	0.12159]	7.595	0.001	0.45
90	[52.674	0.12167]	15.137		[52.736	0.12075]	8.069	0.001	0.311
91	[52.674	0.12167]	15.137		[52.633	0.1205]	10.14	0.007	0.904
92	[52.674	0.12167]	15.137		[52.694	0.12192]	12.063	0.046	0.769
93	[52.674	0.12167]	15.137		[52.743	0.12149]	9.197	0.003	0.407
94	[52.674	0.12167]	15.137		[52.714	0.12152]	9.865	0.005	0.198
95	[52.674	0.12167]	15.137		[52.712	0.12067]	8.098	0.001	0.849
96	[52.674	0.12167]	15.137		[52.699	0.1217]	10.094	0.006	0.759
97	[52.674	0.12167]	15.137		[52.673	0.12206]	10.728	0.012	0.998
98	[52.674	0.12167]	15.137		[52.64	0.12121]	9.114	0.002	0.914
99	[52.674	0.12167]	15.137		[52.719	0.12104]	8.244	0.001	0.28
100	[52.674	0.12167]	15.137		[52.63	0.12196]	10.723	0.012	0.845
101	[52.674	0.12167]	15.137		[52.616	0.12076]	7.968	0.001	0.989
102	[52.674	0.12167]	15.137		[52.678	0.12245]	11.181	0.019	0.777
103	[52.674	0.12167]	15.137		[52.674	0.12227]	9.88	0.005	0.086
104	[52.674	0.12167]	15.137		[52.692	0.12211]	9.211	0.003	0.68
105	[52.674	0.12167]	15.137		[52.644	0.12141]	8.297	0.001	0.832
106	[52.674	0.12167]	15.137		[52.718	0.1219]	11.504	0.026	0.097
107	[52.674	0.12167]	15.137		[52.818	0.12116]	10.932	0.015	0.1
108	[52.674	0.12167]	15.137		[52.689	0.12168]	9.077	0.002	0.964
109	[52.674	0.12167]	15.137		[52.723	0.12105]	10.946	0.015	0.565
110	[52.674	0.12167]	15.137		[52.661	0.12155]	9.781	0.005	0.979
111	[52.674	0.12167]	15.137		[52.652	0.1222]	9.547	0.004	0.805
112	[52.674	0.12167]	15.137		[52.679	0.12267]	9.497	0.004	0.897
113	[52.674	0.12167]	15.137		[52.67	0.12146]	9.867	0.005	0.073
114	[52.674	0.12167]	15.137		[52.701	0.12132]	11.505	0.026	0.696
115	[52.674	0.12167]	15.137		[52.698	0.12191]	7.869	0.001	0.764
116	[52.674	0.12167]	15.137		[52.61	0.12092]	6.855	0	0.046
117	[52.674	0.12167]	15.137		[52.637	0.12161]	8.533	0.001	0.542
118	[52.674	0.12167]	15.137		[52.715	0.12149]	8.581	0.001	0.775
119	[52.674	0.12167]	15.137		[52.618	0.12059]	8.193	0.001	0.454
120	[52.674	0.12167]	15.137		[52.648	0.12189]	10.586	0.011	0.749
121	[52.674	0.12167]	15.137		[52.62	0.12085]	8.777	0.002	0.028
122	[52.674	0.12167]	15.137		[52.676	0.12147]	9.931	0.005	0.13
123	[52.674	0.12167]	15.137		[52.657	0.12117]	8.749	0.002	0.385
124	[52.674	0.12167]	15.137		[52.674	0.12169]	8.926	0.002	0.686
125	[52.674	0.12167]	15.137		[52.684	0.12219]	9.188	0.003	0.042
126	[52.674	0.12167]	15.137		[52.744	0.12094]	9.287	0.003	0.802
127	[52.674	0.12167]	15.137		[52.672	0.12284]	10.068	0.006	0.117
128	[52.674	0.12167]	15.137		[52.721	0.12158]	9.695	0.004	0.232
129	[52.674	0.12167]	15.137		[52.824	0.12182]	10.009	0.006	0.716
130	[52.674	0.12167]	15.137		[52.619	0.12182]	7.827	0.001	0.945
131	[52.674	0.12167]	15.137		[52.662	0.12262]	10.415	0.009	0.439
132	[52.674	0.12167]	15.137		[52.733	0.12249]	7.597	0.001	0.161
133	[52.674	0.12167]	15.137		[52.611	0.12128]	11.654	0.031	0.855
134	[52.674	0.12167]	15.137		[52.677	0.12199]	8.004	0.001	0.427
135	[52.674	0.12167]	15.137		[52.716	0.12082]	8.66	0.002	0.816
136	[52.674	0.12167]	15.137		[52.603	0.12184]	10.954	0.015	0.806
137	[52.674	0.12167]	15.137		[52.756	0.12227]	10.286	0.008	0.66
138	[52.674	0.12167]	15.137		[52.626	0.12218]	10.286	0.008	0.268
139	[52.674	0.12167]	15.137		[52.682	0.1215]	11.004	0.016	0.928
140	[52.674	0.12167]	15.137		[52.611	0.12127]	9.803	0.005	0.51
141	[52.674	0.12167]	15.137		[52.653	0.12174]	10.573	0.01	0.638
142	[52.674	0.12167]	15.137		[52.737	0.12154]	9.078	0.002	0.536
143	[52.674	0.12167]	15.137		[52.766	0.12163]	8.307	0.001	0.82
144	[52.674	0.12167]	15.137		[52.668	0.12226]	9.323	0.003	0.238
145	[52.674	0.12167]	15.137		[52.46	0.12226]	8.921	0.002	0.467
146	[52.674	0.12167]	15.137		[52.652	0.1212]	9.056	0.002	0.346
147	[52.674	0.12167]	15.137		[52.64	0.12206]	11.243	0.02	0.572
148	[52.674	0.12167]	15.137		[52.695	0.1211]	9.937	0.006	0.35
149	[52.674	0.12167]	15.137		[52.753	0.12127]	9.523	0.004	0.214
150	[52.674	0.12167]	15.137		[52.752	0.12174]	10.017	0.006	0.441
151	[52.674	0.12167]	15.137		[52.63	0.12215]	10.801	0.013	0.397
152	[52.674	0.12167]	15.137		[52.651	0.12132]	10.696	0.012	0.889
153	[52.674	0.12167]	15.137		[52.665	0.12159]	8.795	0.002	0.379
154	[52.674	0.12167]	15.137		[52.629	0.1218]	9.628	0.004	0.929
155	[52.674	0.12167]	15.137		[52.736	0.12124]	11.377	0.023	0.88
156	[52.674	0.12167]	15.137		[52.687	0.1212]	7.666	0.001	0.507
157	[52.674	0.12167]	15.137		[52.723	0.12132]	9.086	0.002	0.928
158	[52.674	0.12167]	15.137		[52.695	0.12195]	8.441	0.001	0.093
159	[52.674	0.12167]	15.137		[52.668	0.12106]	9.136	0.002	0.282
160	[52.674	0.12167]	15.137		[52.638	0.12101]	9.436	0.003	0.433
161	[52.674	0.12167]	15.137		[52.766	0.12216]	9.403	0.003	0.396
162	[52.674	0.12167]	15.137		[52.681	0.12226]	9.897	0.005	0.239
163	[52.674	0.12167]	15.137		[52.62	0.1211]	10.673	0.012	0.165
164	[52.674	0.12167]	15.137		[52.699	0.12138]	9.469	0.003	0.337
165	[52.674	0.12167]	15.137		[52.707	0.12147]	9.319	0.003	0.284
166	[52.674	0.12167]	15.137		[52.587	0.12209]	7.933	0.001	0.331
167	[52.674	0.12167]	15.137		[52.535	0.12168]	10.077	0.006	0.41
168	[52.674	0.12167]	15.137		[52.669	0.12108]	8.899	0.002	0.978
169	[52.674	0.12167]	15.137		[52.601	0.12294]	9.5	0.004	0.168
170	[52.674	0.12167]	15.137		[52.632	0.12286]	10.061	0.006	0.798
171	[52.674	0.12167]	15.137		[52.642	0.12244]	8.173	0.001	0.484
172	[52.674	0.12167]	15.137		[52.666	0.12079]	8.077	0.001	0.166
173	[52.674	0.12167]	15.137		[52.65	0.1208]	11.353	0.023	0.329
174	[52.674	0.12167]	15.137		[52.617	0.12084]	10.024	0.006	0.806
175	[52.674	0.12167]	15.137		[52.575	0.12298]	10.783	0.013	0.754
176	[52.674	0.12167]	15.137		[52.697	0.12229]	11.481	0.026	0.101
177	[52.674	0.12167]	15.137		[52.675	0.12211]	11.343	0.023	0.434
178	[52.674	0.12167]	15.137		[52.673	0.12153]	8.66	0.002	0.456
179	[52.674	0.12167]	15.137		[52.686	0.12172]	12.45	0.068	1
