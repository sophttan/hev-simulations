
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(1, 0.001)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 5), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 5), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '30/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '30/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '30/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.30, 0.25)
> start <- c(59, 0.12)
> results <- metropolis(start, target, num_sim = 1000, num_iter = 500)
1	[59	0.12]	5.982		[58.187	0.11961]	6.528	1.727	0.819
2	[58.187	0.11961]	6.528		[59.234	0.11968]	6.223	0.737	0.923
3	[58.187	0.11961]	6.528		[57.993	0.11992]	6.177	0.704	0.424
4	[57.993	0.11992]	6.177		[57.367	0.12019]	6.498	1.378	0.31
5	[57.367	0.12019]	6.498		[56.067	0.1216]	6.895	1.488	0.078
6	[56.067	0.1216]	6.895		[56.383	0.12267]	6.467	0.651	0.611
7	[56.383	0.12267]	6.467		[56.715	0.12404]	5.916	0.576	0.097
8	[56.715	0.12404]	5.916		[58.001	0.12712]	4.959	0.384	0.021
9	[58.001	0.12712]	4.959		[59.282	0.12708]	4.878	0.923	0.583
10	[59.282	0.12708]	4.878		[58.458	0.12736]	4.501	0.686	0.317
11	[58.458	0.12736]	4.501		[59.196	0.12771]	4.405	0.909	0.628
12	[59.196	0.12771]	4.405		[60.198	0.12701]	4.372	0.967	0.448
13	[60.198	0.12701]	4.372		[60.231	0.12732]	4.354	0.982	0.208
14	[60.231	0.12732]	4.354		[59.791	0.12748]	4.415	1.063	0.896
15	[59.791	0.12748]	4.415		[60.561	0.12707]	4.121	0.746	0.994
16	[59.791	0.12748]	4.415		[58.972	0.12755]	4.546	1.14	0.58
17	[58.972	0.12755]	4.546		[57.919	0.12806]	4.718	1.187	0.501
18	[57.919	0.12806]	4.718		[58.044	0.12639]	4.624	0.91	0.474
19	[58.044	0.12639]	4.624		[56.758	0.12513]	5.726	3.009	0.294
20	[56.758	0.12513]	5.726		[56.45	0.12295]	6.91	3.27	0.195
21	[56.45	0.12295]	6.91		[58.078	0.12403]	5.526	0.251	0.337
22	[56.45	0.12295]	6.91		[56.326	0.12486]	5.748	0.313	0.484
23	[56.45	0.12295]	6.91		[55.737	0.12266]	7.874	2.621	0.182
24	[55.737	0.12266]	7.874		[54.886	0.12221]	7.18	0.5	0.185
25	[54.886	0.12221]	7.18		[55.859	0.12179]	7.232	1.053	0.978
26	[55.859	0.12179]	7.232		[55.023	0.12256]	6.85	0.683	0.554
27	[55.023	0.12256]	6.85		[56.885	0.12339]	6.716	0.875	0.736
28	[56.885	0.12339]	6.716		[57.194	0.1226]	6.248	0.626	0.172
29	[57.194	0.1226]	6.248		[57.642	0.12219]	6.143	0.9	0.918
30	[57.194	0.1226]	6.248		[56.811	0.12377]	6.22	0.972	0.111
31	[56.811	0.12377]	6.22		[57.279	0.12452]	5.602	0.539	0.744
32	[56.811	0.12377]	6.22		[56.946	0.12347]	5.993	0.797	0.971
33	[56.811	0.12377]	6.22		[54.479	0.12417]	7.046	2.285	0.653
34	[54.479	0.12417]	7.046		[53.08	0.12229]	10.321	26.419	0.091
35	[53.08	0.12229]	10.321		[53.729	0.12235]	8.875	0.236	0.956
36	[53.08	0.12229]	10.321		[55.143	0.12322]	6.472	0.021	0.982
37	[53.08	0.12229]	10.321		[51.963	0.12147]	9.093	0.293	0.73
38	[53.08	0.12229]	10.321		[54.631	0.12232]	9.146	0.309	0.936
39	[53.08	0.12229]	10.321		[53.878	0.12273]	8.529	0.167	0.116
40	[53.878	0.12273]	8.529		[54.403	0.1232]	6.943	0.205	0.197
41	[54.403	0.1232]	6.943		[54.428	0.12121]	9.447	12.237	0.023
42	[54.428	0.12121]	9.447		[55.07	0.12234]	8.189	0.284	0.984
43	[54.428	0.12121]	9.447		[54.171	0.121]	8.953	0.61	0.537
44	[54.171	0.121]	8.953		[53.921	0.12164]	9.193	1.272	0.727
45	[53.921	0.12164]	9.193		[52.141	0.12152]	8.362	0.435	0.559
46	[53.921	0.12164]	9.193		[51.243	0.12287]	7.848	0.261	0.682
47	[53.921	0.12164]	9.193		[54.037	0.12183]	7.401	0.167	0.507
48	[53.921	0.12164]	9.193		[55.903	0.12247]	6.394	0.061	0.808
49	[53.921	0.12164]	9.193		[55.15	0.1225]	7.643	0.212	0.65
50	[53.921	0.12164]	9.193		[54.053	0.12277]	7.306	0.151	0.424
51	[53.921	0.12164]	9.193		[55.702	0.12308]	6.949	0.106	0.254
52	[53.921	0.12164]	9.193		[52.897	0.12301]	9.716	1.686	0.72
53	[52.897	0.12301]	9.716		[52.33	0.12363]	8.585	0.323	0.735
54	[52.897	0.12301]	9.716		[52.303	0.12296]	9.705	0.99	0.036
55	[52.303	0.12296]	9.705		[52.213	0.12227]	7.839	0.155	0.316
56	[52.303	0.12296]	9.705		[52.727	0.12404]	7.803	0.149	0.802
57	[52.303	0.12296]	9.705		[54.347	0.12378]	6.836	0.057	0.103
58	[52.303	0.12296]	9.705		[50.978	0.1226]	7.496	0.11	0.016
59	[50.978	0.1226]	7.496		[50.311	0.12359]	7.789	1.341	0.076
60	[50.311	0.12359]	7.789		[49.45	0.12395]	6.425	0.256	0.435
61	[50.311	0.12359]	7.789		[48.977	0.12266]	6.087	0.182	0.216
62	[50.311	0.12359]	7.789		[50.937	0.12324]	7.933	1.155	0.716
63	[50.937	0.12324]	7.933		[50.331	0.12444]	8.327	1.482	0.384
64	[50.331	0.12444]	8.327		[51.756	0.12694]	6.891	0.238	0.977
65	[50.331	0.12444]	8.327		[51.353	0.12462]	8.496	1.184	0.329
66	[51.353	0.12462]	8.496		[51.319	0.12588]	7.906	0.555	0.668
67	[51.353	0.12462]	8.496		[51.997	0.12385]	9.135	1.896	0.784
68	[51.997	0.12385]	9.135		[49.939	0.12498]	9.487	1.421	0.103
69	[49.939	0.12498]	9.487		[50.875	0.12647]	7.934	0.212	0.655
70	[49.939	0.12498]	9.487		[50.452	0.12602]	7.521	0.14	0.814
71	[49.939	0.12498]	9.487		[48.116	0.12644]	6.86	0.072	0.931
72	[49.939	0.12498]	9.487		[50.747	0.12559]	8.238	0.287	0.965
73	[49.939	0.12498]	9.487		[48.974	0.12497]	7.306	0.113	0.315
74	[49.939	0.12498]	9.487		[49.793	0.12524]	9.1	0.679	0.219
75	[49.793	0.12524]	9.1		[52.287	0.12537]	8.951	0.861	0.353
76	[52.287	0.12537]	8.951		[51.322	0.12608]	8.51	0.643	0.818
77	[52.287	0.12537]	8.951		[52.891	0.12569]	6.772	0.113	0.077
78	[52.891	0.12569]	6.772		[52.526	0.12548]	7.696	2.521	0.628
79	[52.526	0.12548]	7.696		[53.305	0.12464]	7.586	0.896	0.495
80	[53.305	0.12464]	7.586		[52.685	0.12434]	8.959	3.946	0.64
81	[52.685	0.12434]	8.959		[54.29	0.12615]	5.744	0.04	0.89
82	[52.685	0.12434]	8.959		[53.899	0.1252]	7.015	0.143	0.031
83	[53.899	0.1252]	7.015		[55.28	0.12742]	5.421	0.203	0.172
84	[55.28	0.12742]	5.421		[54.412	0.12553]	7.571	8.581	0.027
85	[54.412	0.12553]	7.571		[55.399	0.1259]	6.121	0.235	0.856
86	[54.412	0.12553]	7.571		[54.131	0.12595]	6.182	0.25	0.134
87	[54.131	0.12595]	6.182		[53.057	0.12297]	8.569	10.879	0.848
88	[53.057	0.12297]	8.569		[52.137	0.12234]	10.292	5.598	0.571
89	[52.137	0.12234]	10.292		[53.021	0.12177]	9.198	0.335	0.383
90	[52.137	0.12234]	10.292		[49.39	0.12226]	7.613	0.069	0.02
91	[49.39	0.12226]	7.613		[49.069	0.12356]	7.208	0.667	0.683
92	[49.39	0.12226]	7.613		[48.009	0.12268]	5.803	0.164	0.027
93	[48.009	0.12268]	5.803		[47.484	0.12453]	6.418	1.851	0.266
94	[47.484	0.12453]	6.418		[47.674	0.12581]	6.499	1.083	0.646
95	[47.674	0.12581]	6.499		[48.715	0.12642]	8.273	5.896	0.393
96	[48.715	0.12642]	8.273		[49.68	0.12571]	7.676	0.551	0.297
97	[49.68	0.12571]	7.676		[50.381	0.12604]	8.306	1.877	0.831
98	[50.381	0.12604]	8.306		[49.445	0.12868]	7.768	0.584	0.124
99	[49.445	0.12868]	7.768		[48.311	0.12819]	7.205	0.57	0.836
100	[49.445	0.12868]	7.768		[48.357	0.13046]	7.093	0.509	0.164
101	[48.357	0.13046]	7.093		[49.085	0.12866]	7.17	1.079	0.341
102	[49.085	0.12866]	7.17		[47.517	0.12923]	6.664	0.603	0.975
103	[49.085	0.12866]	7.17		[51.503	0.12998]	6.145	0.359	0.623
104	[49.085	0.12866]	7.17		[49.205	0.12766]	8.096	2.526	0.63
105	[49.205	0.12766]	8.096		[50.251	0.12813]	7.414	0.505	0.01
106	[50.251	0.12813]	7.414		[50.616	0.12668]	8.62	3.343	0.424
107	[50.616	0.12668]	8.62		[49.405	0.12552]	7.621	0.368	0.315
108	[49.405	0.12552]	7.621		[47.65	0.12498]	7.245	0.687	0.255
109	[47.65	0.12498]	7.245		[48.578	0.12673]	7.536	1.337	0.829
110	[48.578	0.12673]	7.536		[47.014	0.12567]	6.09	0.235	0.372
111	[48.578	0.12673]	7.536		[47.87	0.12787]	7.242	0.746	0.023
112	[47.87	0.12787]	7.242		[48.292	0.12774]	7.014	0.796	0.01
113	[48.292	0.12774]	7.014		[47.47	0.12742]	6.944	0.932	0.873
114	[47.47	0.12742]	6.944		[48.75	0.12696]	7.499	1.742	0.516
115	[48.75	0.12696]	7.499		[49.082	0.126]	8.381	2.415	0.648
116	[49.082	0.126]	8.381		[51.371	0.12454]	8.727	1.414	0.823
117	[51.371	0.12454]	8.727		[49.973	0.12452]	8.695	0.968	0.026
118	[49.973	0.12452]	8.695		[49.592	0.12354]	6.558	0.118	0.931
119	[49.973	0.12452]	8.695		[49.975	0.12282]	7.286	0.245	0.622
120	[49.973	0.12452]	8.695		[49.345	0.12406]	7.32	0.253	0.9
121	[49.973	0.12452]	8.695		[49.445	0.12493]	7.258	0.238	0.576
122	[49.973	0.12452]	8.695		[49.395	0.12414]	8.065	0.533	0.603
123	[49.973	0.12452]	8.695		[50.652	0.12577]	8.611	0.92	0.384
124	[50.652	0.12577]	8.611		[50.238	0.12654]	8.579	0.969	0.61
125	[50.238	0.12654]	8.579		[50.18	0.12455]	7.153	0.24	0.899
126	[50.238	0.12654]	8.579		[49.81	0.12645]	8.023	0.573	0.632
127	[50.238	0.12654]	8.579		[49.416	0.12742]	7.51	0.343	0.867
128	[50.238	0.12654]	8.579		[50.032	0.12694]	8.077	0.605	0.448
129	[50.032	0.12694]	8.077		[51.03	0.12719]	8.032	0.956	0.612
130	[51.03	0.12719]	8.032		[50.182	0.12686]	7.897	0.874	0.675
131	[50.182	0.12686]	7.897		[49.679	0.12715]	8.423	1.692	0.738
132	[49.679	0.12715]	8.423		[49.665	0.12788]	8.263	0.852	0.537
133	[49.665	0.12788]	8.263		[48.518	0.1289]	7.522	0.476	0.332
134	[48.518	0.1289]	7.522		[46.93	0.12751]	6.391	0.323	0.354
135	[48.518	0.1289]	7.522		[47.562	0.13065]	7.325	0.821	0.671
136	[47.562	0.13065]	7.325		[46.877	0.13332]	6.909	0.66	0.532
137	[46.877	0.13332]	6.909		[47.8	0.13087]	7.21	1.35	0.803
138	[47.8	0.13087]	7.21		[48.054	0.13135]	7.087	0.884	0.231
139	[48.054	0.13135]	7.087		[50.092	0.13075]	6.19	0.408	0.917
140	[48.054	0.13135]	7.087		[47.651	0.13144]	7.194	1.113	0.658
141	[47.651	0.13144]	7.194		[47.614	0.13113]	6.899	0.745	0.624
142	[47.614	0.13113]	6.899		[47.108	0.1306]	6.823	0.927	0.76
143	[47.108	0.1306]	6.823		[45.061	0.13233]	6.783	0.961	0.656
144	[45.061	0.13233]	6.783		[45.034	0.13192]	6.464	0.727	0.877
145	[45.061	0.13233]	6.783		[46.476	0.13187]	7	1.243	0.421
146	[46.476	0.13187]	7		[46.722	0.12948]	6.58	0.657	0.271
147	[46.722	0.12948]	6.58		[46.916	0.12814]	6.617	1.038	0.448
148	[46.916	0.12814]	6.617		[48.104	0.12703]	7.64	2.781	0.604
149	[48.104	0.12703]	7.64		[47.211	0.12581]	6.995	0.525	0.317
150	[47.211	0.12581]	6.995		[47.134	0.12611]	6.521	0.623	0.71
151	[47.211	0.12581]	6.995		[47.385	0.12707]	7.229	1.264	0.873
152	[47.385	0.12707]	7.229		[46.631	0.12625]	5.726	0.222	0.109
153	[46.631	0.12625]	5.726		[46.509	0.12777]	6.396	1.955	0.225
154	[46.509	0.12777]	6.396		[47.058	0.12724]	6.457	1.062	0.716
155	[47.058	0.12724]	6.457		[47.119	0.12768]	6.752	1.344	0.644
156	[47.119	0.12768]	6.752		[45.586	0.12604]	5.939	0.443	0.8
157	[47.119	0.12768]	6.752		[47.523	0.12556]	6.649	0.902	0.488
158	[47.523	0.12556]	6.649		[48.863	0.12484]	8.396	5.734	0.618
159	[48.863	0.12484]	8.396		[50.83	0.12275]	7.123	0.28	0.533
160	[48.863	0.12484]	8.396		[48.823	0.12592]	8.88	1.623	0.302
161	[48.823	0.12592]	8.88		[48.938	0.12376]	6.207	0.069	0.652
162	[48.823	0.12592]	8.88		[48.284	0.12726]	7.158	0.179	0.161
163	[48.284	0.12726]	7.158		[49.082	0.12599]	8.358	3.32	0.152
164	[49.082	0.12599]	8.358		[49.634	0.12755]	7.454	0.405	0.812
165	[49.082	0.12599]	8.358		[47.254	0.12669]	6.347	0.134	0.246
166	[49.082	0.12599]	8.358		[48.045	0.12841]	7.147	0.298	0.32
167	[49.082	0.12599]	8.358		[49.855	0.12678]	7.532	0.437	0.768
168	[49.082	0.12599]	8.358		[48.617	0.12552]	6.872	0.226	0.922
169	[49.082	0.12599]	8.358		[49.942	0.12684]	8.073	0.752	0.203
170	[49.942	0.12684]	8.073		[50.154	0.12554]	8.701	1.873	0.978
171	[50.154	0.12554]	8.701		[49.86	0.125]	7.625	0.341	0.515
172	[50.154	0.12554]	8.701		[49.292	0.12584]	8.045	0.519	0.77
173	[50.154	0.12554]	8.701		[49.566	0.12453]	7.22	0.228	0.197
174	[49.566	0.12453]	7.22		[50.588	0.1251]	7.595	1.454	0.294
