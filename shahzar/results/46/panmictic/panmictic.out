
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
24
> num_cores <- detectCores()
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+     
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       results$TIME[new_inf] <- t
+     }
+     
+     # risk is proportional to number infected, leading to exponential growth.
+     beta_E <- params[1] 
+     risk_E <- pmin(beta_E * data$S  * sum(data$I) / N, 1)
+     
+     new_exposed <- rbinom(N, 1, risk_E)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if(num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed == 1] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed == 1] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed == 1] <- 0
+         
+       # Label infection types.
+       results$TYPE[new_exposed == 1] <- 'E'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(c(idc))
+ }
> 
> beta_Es <- c(seq(0.195, 0.203, 0.0001), seq(0.215, 0.224, 0.0001), seq(0.270, 0.273, 0.0001))
> 
> d_E <- length(beta_Es)
> 
> reps <- 50000
> idcs <- array(rep(NA, d_E * reps), dim = c(d_E, reps))
> t_tot <- 0
> for (i in 1:d_E) {
+   beta_E <- beta_Es[i]
+   params <- c(beta_E)
+   cat(paste0(format(beta_E, nsmall = 4, scientific = F), '/0.300\t'))
+         
+   t_0 <- Sys.time()
+   vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+     results <- SEIR(params) 
+     metrics(results)
+   }
+   t_1 <- Sys.time()
+   t_tot <- t_tot + (t_1 - t_0)
+         
+   cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+              format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+       
+   vals <- matrix(vals, reps, byrow = T)
+   idcs[i, ] <- vals[, 1]
+         
+   cat(paste0(format(round(mean(idcs[, i]), 3), nsmall = 3), '\n'))
+     
+   saveRDS(idcs, file = 'idcs.rds')
+   write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+ }
0.1950/0.300	3.932 mins	(3.932 mins)	NA
0.1951/0.300	7.967 mins	(4.035 mins)	NA
0.1952/0.300	12.01 mins	(4.047 mins)	NA
0.1953/0.300	16.08 mins	(4.065 mins)	NA
0.1954/0.300	20.15 mins	(4.07 mins)	NA
0.1955/0.300	24.21 mins	(4.064 mins)	NA
0.1956/0.300	28.28 mins	(4.07 mins)	NA
0.1957/0.300	32.35 mins	(4.069 mins)	NA
0.1958/0.300	36.42 mins	(4.064 mins)	NA
0.1959/0.300	40.49 mins	(4.077 mins)	NA
0.1960/0.300	44.57 mins	(4.074 mins)	NA
0.1961/0.300	48.65 mins	(4.078 mins)	NA
0.1962/0.300	52.72 mins	(4.076 mins)	NA
0.1963/0.300	56.80 mins	(4.08 mins)	NA
0.1964/0.300	60.88 mins	(4.081 mins)	NA
0.1965/0.300	64.98 mins	(4.096 mins)	NA
0.1966/0.300	69.29 mins	(4.311 mins)	NA
0.1967/0.300	73.62 mins	(4.329 mins)	NA
0.1968/0.300	77.84 mins	(4.223 mins)	NA
0.1969/0.300	81.93 mins	(4.091 mins)	NA
0.1970/0.300	86.03 mins	(4.096 mins)	NA
0.1971/0.300	90.13 mins	(4.098 mins)	NA
0.1972/0.300	94.23 mins	(4.10 mins)	NA
0.1973/0.300	98.31 mins	(4.081 mins)	NA
0.1974/0.300	102.43 mins	(4.125 mins)	NA
0.1975/0.300	106.53 mins	(4.101 mins)	NA
0.1976/0.300	110.63 mins	(4.097 mins)	NA
0.1977/0.300	114.74 mins	(4.108 mins)	NA
0.1978/0.300	118.84 mins	(4.105 mins)	NA
0.1979/0.300	122.94 mins	(4.10 mins)	NA
0.1980/0.300	127.04 mins	(4.10 mins)	NA
0.1981/0.300	131.15 mins	(4.106 mins)	NA
0.1982/0.300	135.25 mins	(4.105 mins)	NA
0.1983/0.300	139.37 mins	(4.119 mins)	NA
0.1984/0.300	143.49 mins	(4.118 mins)	NA
0.1985/0.300	147.60 mins	(4.105 mins)	NA
0.1986/0.300	151.72 mins	(4.121 mins)	NA
0.1987/0.300	155.84 mins	(4.126 mins)	NA
0.1988/0.300	159.95 mins	(4.109 mins)	NA
0.1989/0.300	164.07 mins	(4.122 mins)	NA
0.1990/0.300	168.20 mins	(4.126 mins)	NA
0.1991/0.300	172.32 mins	(4.122 mins)	NA
0.1992/0.300	176.46 mins	(4.14 mins)	NA
0.1993/0.300	180.60 mins	(4.133 mins)	NA
0.1994/0.300	184.72 mins	(4.126 mins)	NA
0.1995/0.300	188.85 mins	(4.128 mins)	NA
0.1996/0.300	192.98 mins	(4.126 mins)	NA
0.1997/0.300	197.11 mins	(4.139 mins)	NA
0.1998/0.300	201.25 mins	(4.137 mins)	NA
0.1999/0.300	205.38 mins	(4.132 mins)	NA
0.2000/0.300	209.51 mins	(4.13 mins)	NA
0.2001/0.300	213.64 mins	(4.131 mins)	NA
0.2002/0.300	217.80 mins	(4.15 mins)	NA
0.2003/0.300	221.93 mins	(4.138 mins)	NA
0.2004/0.300	226.09 mins	(4.159 mins)	NA
0.2005/0.300	230.24 mins	(4.144 mins)	NA
0.2006/0.300	234.38 mins	(4.142 mins)	NA
0.2007/0.300	238.53 mins	(4.151 mins)	NA
0.2008/0.300	242.67 mins	(4.142 mins)	NA
0.2009/0.300	246.83 mins	(4.16 mins)	NA
0.2010/0.300	250.99 mins	(4.164 mins)	NA
0.2011/0.300	255.13 mins	(4.14 mins)	NA
0.2012/0.300	259.43 mins	(4.294 mins)	NA
0.2013/0.300	263.84 mins	(4.409 mins)	NA
0.2014/0.300	268.21 mins	(4.373 mins)	NA
0.2015/0.300	272.37 mins	(4.163 mins)	NA
0.2016/0.300	276.53 mins	(4.157 mins)	NA
0.2017/0.300	280.69 mins	(4.156 mins)	NA
0.2018/0.300	284.86 mins	(4.174 mins)	NA
0.2019/0.300	289.04 mins	(4.181 mins)	NA
0.2020/0.300	293.20 mins	(4.163 mins)	NA
0.2021/0.300	297.37 mins	(4.17 mins)	NA
0.2022/0.300	301.55 mins	(4.173 mins)	NA
0.2023/0.300	305.72 mins	(4.174 mins)	NA
0.2024/0.300	309.90 mins	(4.181 mins)	NA
0.2025/0.300	314.07 mins	(4.17 mins)	NA
0.2026/0.300	318.24 mins	(4.164 mins)	NA
0.2027/0.300	322.43 mins	(4.194 mins)	NA
0.2028/0.300	326.61 mins	(4.183 mins)	NA
0.2029/0.300	330.80 mins	(4.19 mins)	NA
0.2030/0.300	334.98 mins	(4.177 mins)	NA
0.2150/0.300	339.38 mins	(4.399 mins)	NA
0.2151/0.300	343.76 mins	(4.382 mins)	NA
0.2152/0.300	348.16 mins	(4.393 mins)	NA
0.2153/0.300	352.56 mins	(4.405 mins)	NA
0.2154/0.300	356.96 mins	(4.398 mins)	NA
0.2155/0.300	361.37 mins	(4.408 mins)	NA
0.2156/0.300	365.78 mins	(4.409 mins)	NA
0.2157/0.300	370.17 mins	(4.39 mins)	NA
0.2158/0.300	374.56 mins	(4.393 mins)	NA
0.2159/0.300	378.97 mins	(4.408 mins)	NA
0.2160/0.300	383.37 mins	(4.40 mins)	NA
0.2161/0.300	387.78 mins	(4.41 mins)	NA
0.2162/0.300	392.20 mins	(4.42 mins)	NA
0.2163/0.300	396.60 mins	(4.403 mins)	NA
0.2164/0.300	401.02 mins	(4.421 mins)	NA
0.2165/0.300	405.44 mins	(4.416 mins)	NA
0.2166/0.300	409.85 mins	(4.409 mins)	NA
0.2167/0.300	414.27 mins	(4.426 mins)	NA
0.2168/0.300	418.68 mins	(4.411 mins)	NA
0.2169/0.300	423.09 mins	(4.408 mins)	NA
0.2170/0.300	427.51 mins	(4.421 mins)	NA
0.2171/0.300	431.95 mins	(4.435 mins)	NA
0.2172/0.300	436.37 mins	(4.427 mins)	NA
0.2173/0.300	440.83 mins	(4.455 mins)	NA
0.2174/0.300	445.26 mins	(4.431 mins)	NA
0.2175/0.300	449.69 mins	(4.43 mins)	NA
0.2176/0.300	454.13 mins	(4.443 mins)	NA
0.2177/0.300	458.58 mins	(4.447 mins)	NA
0.2178/0.300	463.00 mins	(4.423 mins)	NA
0.2179/0.300	467.45 mins	(4.444 mins)	NA
0.2180/0.300	471.89 mins	(4.441 mins)	NA
0.2181/0.300	476.32 mins	(4.433 mins)	NA
0.2182/0.300	480.77 mins	(4.453 mins)	NA
0.2183/0.300	485.23 mins	(4.453 mins)	NA
0.2184/0.300	489.66 mins	(4.432 mins)	NA
0.2185/0.300	494.13 mins	(4.472 mins)	NA
0.2186/0.300	498.62 mins	(4.489 mins)	NA
0.2187/0.300	503.06 mins	(4.446 mins)	NA
0.2188/0.300	507.53 mins	(4.465 mins)	NA
0.2189/0.300	512.00 mins	(4.468 mins)	NA
0.2190/0.300	516.47 mins	(4.477 mins)	NA
0.2191/0.300	520.96 mins	(4.484 mins)	NA
0.2192/0.300	525.44 mins	(4.487 mins)	NA
0.2193/0.300	529.89 mins	(4.452 mins)	NA
0.2194/0.300	534.35 mins	(4.46 mins)	NA
0.2195/0.300	538.81 mins	(4.46 mins)	NA
0.2196/0.300	543.29 mins	(4.472 mins)	NA
0.2197/0.300	547.78 mins	(4.49 mins)	NA
0.2198/0.300	552.26 mins	(4.484 mins)	NA
0.2199/0.300	556.73 mins	(4.465 mins)	NA
0.2200/0.300	561.20 mins	(4.477 mins)	NA
0.2201/0.300	565.69 mins	(4.491 mins)	NA
0.2202/0.300	570.18 mins	(4.485 mins)	NA
0.2203/0.300	574.65 mins	(4.467 mins)	NA
0.2204/0.300	579.14 mins	(4.498 mins)	NA
0.2205/0.300	583.63 mins	(4.489 mins)	NA
0.2206/0.300	588.12 mins	(4.485 mins)	NA
0.2207/0.300	592.61 mins	(4.496 mins)	NA
0.2208/0.300	597.09 mins	(4.478 mins)	NA
0.2209/0.300	601.59 mins	(4.494 mins)	NA
0.2210/0.300	606.09 mins	(4.50 mins)	NA
0.2211/0.300	610.59 mins	(4.509 mins)	NA
0.2212/0.300	615.11 mins	(4.511 mins)	NA
0.2213/0.300	619.62 mins	(4.512 mins)	NA
0.2214/0.300	624.09 mins	(4.474 mins)	NA
0.2215/0.300	628.58 mins	(4.491 mins)	NA
0.2216/0.300	633.09 mins	(4.508 mins)	NA
0.2217/0.300	637.60 mins	(4.504 mins)	NA
0.2218/0.300	642.12 mins	(4.528 mins)	NA
0.2219/0.300	646.63 mins	(4.501 mins)	NA
0.2220/0.300	651.15 mins	(4.524 mins)	NA
0.2221/0.300	655.67 mins	(4.524 mins)	NA
0.2222/0.300	660.19 mins	(4.515 mins)	NA
0.2223/0.300	664.71 mins	(4.523 mins)	NA
0.2224/0.300	669.23 mins	(4.52 mins)	NA
0.2225/0.300	673.77 mins	(4.537 mins)	NA
0.2226/0.300	678.29 mins	(4.518 mins)	NA
0.2227/0.300	682.82 mins	(4.528 mins)	NA
0.2228/0.300	687.35 mins	(4.54 mins)	NA
0.2229/0.300	691.89 mins	(4.53 mins)	NA
0.2230/0.300	696.43 mins	(4.54 mins)	NA
0.2231/0.300	700.97 mins	(4.542 mins)	NA
0.2232/0.300	705.49 mins	(4.525 mins)	NA
0.2233/0.300	710.03 mins	(4.535 mins)	NA
0.2234/0.300	714.57 mins	(4.54 mins)	NA
0.2235/0.300	719.11 mins	(4.545 mins)	NA
0.2236/0.300	723.65 mins	(4.537 mins)	NA
0.2237/0.300	728.19 mins	(4.541 mins)	NA
0.2238/0.300	732.74 mins	(4.547 mins)	NA
0.2239/0.300	737.29 mins	(4.547 mins)	NA
0.2240/0.300	741.83 mins	(4.547 mins)	NA
0.2700/0.300	747.21 mins	(5.374 mins)	NA
0.2701/0.300	752.57 mins	(5.366 mins)	NA
0.2702/0.300	757.95 mins	(5.379 mins)	NA
0.2703/0.300	763.32 mins	(5.369 mins)	NA
0.2704/0.300	768.71 mins	(5.385 mins)	NA
0.2705/0.300	774.09 mins	(5.388 mins)	NA
0.2706/0.300	779.49 mins	(5.396 mins)	NA
0.2707/0.300	784.88 mins	(5.388 mins)	NA
0.2708/0.300	790.28 mins	(5.40 mins)	NA
0.2709/0.300	795.67 mins	(5.389 mins)	NA
0.2710/0.300	801.08 mins	(5.414 mins)	NA
0.2711/0.300	806.49 mins	(5.414 mins)	NA
0.2712/0.300	811.89 mins	(5.40 mins)	NA
0.2713/0.300	817.30 mins	(5.407 mins)	NA
0.2714/0.300	822.72 mins	(5.415 mins)	NA
0.2715/0.300	828.13 mins	(5.417 mins)	NA
0.2716/0.300	833.56 mins	(5.424 mins)	NA
0.2717/0.300	838.97 mins	(5.408 mins)	NA
0.2718/0.300	844.36 mins	(5.395 mins)	NA
0.2719/0.300	849.76 mins	(5.402 mins)	NA
0.2720/0.300	855.19 mins	(5.424 mins)	NA
0.2721/0.300	860.58 mins	(5.397 mins)	NA
0.2722/0.300	866.00 mins	(5.413 mins)	NA
0.2723/0.300	871.40 mins	(5.408 mins)	NA
0.2724/0.300	876.80 mins	(5.398 mins)	NA
0.2725/0.300	882.24 mins	(5.434 mins)	NA
0.2726/0.300	887.65 mins	(5.417 mins)	NA
0.2727/0.300	893.07 mins	(5.412 mins)	NA
0.2728/0.300	898.48 mins	(5.41 mins)	NA
0.2729/0.300	903.89 mins	(5.414 mins)	NA
0.2730/0.300	909.30 mins	(5.412 mins)	0.109
> 
> proc.time()
      user     system    elapsed 
1260464.60    2232.62   56310.51 
