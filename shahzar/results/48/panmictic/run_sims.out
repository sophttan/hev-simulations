
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+     
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       results$TIME[new_inf] <- t
+     }
+     
+     # risk is proportional to number infected, leading to exponential growth.
+     beta_E <- params[1] 
+     risk_E <- pmin(beta_E * data$S  * sum(data$I) / N, 1)
+     
+     new_exposed <- rbinom(N, 1, risk_E)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if(num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed == 1] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed == 1] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed == 1] <- 0
+         
+       # Label infection types.
+       results$TYPE[new_exposed == 1] <- 'E'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(c(idc))
+ }
> 
> prp_true <- function(results) {
+   cases <- results[!is.na(results$TIME), ]
+   cases_HH = (cases$TYPE == 'H') | (cases$TYPE == 'HC') | (cases$TYPE == 'HCE')
+   prp <- mean(cases_HH)
+   return(prp)
+ }
> 
> method_HH <- function(results) {
+   f <- results %>% filter(!is.na(TIME))
+   f <- f %>% group_by(HH) %>% 
+     mutate(day_limits = list(TIME)) %>%
+     ungroup() %>%
+     rowwise() %>%
+     mutate(IS_H = any((TIME - unlist(day_limits)) < 45 & (TIME - unlist(day_limits)) > 7))
+   
+   return(mean(f$IS_H))
+ }
> 
> probability <- function(cases, index, rel_p_hh=1) {
+   inc_prim <- cases$TIME
+   inc_sec <- cases$TIME[index]
+   hh_prim <- cases$HH
+   hh_sec <- cases$HH[index]
+   # calculate relative likelihood that primary case caused secondary case based on their incidences
+   # serial interval is approximate
+   results <- (rel_p_hh*(hh_prim==hh_sec)+(hh_prim!=hh_sec))*dnorm(inc_sec-inc_prim, mean=31.5, sd=4)
+   # if primary case happens after secondary case, set probability to 0
+   results[inc_prim >= inc_sec] <- 0
+   if(sum(results) == 0){
+     return(results)
+   }
+   
+   return(results/sum(results))
+ }
> 
> method_R <- function(results) {
+   cases <- results %>% 
+     filter(!is.na(TIME)) %>%
+     mutate(ID = 1:n())
+   
+   R <- rep(0, nrow(cases))
+   R_HH <- rep(0, nrow(cases))
+   
+   for (k in 1:nrow(cases)) {
+     probs <- probability(cases, k, 1)
+     HH_probs <- probs
+     HH_probs[cases$HH != cases$HH[k]] <- 0
+     R <- R + probs
+     R_HH <- R_HH + HH_probs
+   }
+   return(mean(R_HH) / mean(R))
+ }
> 
> values <- function(results) {
+   return(c(prp_true(results), method_HH(results), method_R(results)))
+ }
> 
> # 5% Cumulative Incidence
> beta_E <- 0.1964
> params <- c(beta_E)
> 
> n_sims <- 1000
> i <- 0
> while (i < n_sims) {
+     results <- SEIR(params, inf)
+     if (metrics(results) > 5/1000) {
+         write.csv(results, file = paste0('5/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
> #n_sims <- 100
> #vals <- foreach (i = 1:n_sims, .combine = 'c') %dopar% {
> #  results <- SEIR(params, inf)
> #  if (metrics(results) > 1/1000) {
> #      write.csv(results, file = paste0('5/', i, '.csv'))
> #  }
> #  values(results)
> #}
> #vals <- matrix(vals, n_sims, byrow = T)
> #saveRDS(vals, file = '5/vals.rds')
> #write.table(vals, file = '5/vals.txt', row.names = F, col.names = F)
> 
> 
> # 10% Cumulative Incidence
> beta_E <- 0.2203
> params <- c(beta_E)
> 
> n_sims <- 1000
> i <- 0
> while (i < n_sims) {
+     results <- SEIR(params, inf)
+     if (metrics(results) > 10/1000) {
+         write.csv(results, file = paste0('10/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
> #vals <- foreach (i = 1:n_sims, .combine = 'c') %dopar% {
> #  results <- SEIR(params, inf)
> #  if (metrics(results) > 1/1000) {
> #      write.csv(results, file = paste0('5/', i, '.csv'))
> #  }
> #  values(results)
> #}
> #vals <- matrix(vals, n_sims, byrow = T)
> #saveRDS(vals, file = '10/vals.rds')
> #write.table(vals, file = '10/vals.txt', row.names = F, col.names = F)
> 
> 
> # 30% Cumulative Incidence
> beta_E <- 0.2704
> params <- c(beta_E)
> 
> n_sims <- 1000
> i <- 0
> while (i < n_sims) {
+     results <- SEIR(params, inf)
+     if (metrics(results) > 10/1000) {
+         write.csv(results, file = paste0('30/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
> #vals <- foreach (i = 1:n_sims, .combine = 'c') %dopar% {
> #  results <- SEIR(params, inf)
> #  if (metrics(results) > 1/1000) {
> #      write.csv(results, file = paste0('30/', i, '.csv'))
> #  }
> #  values(results)
> #}
> #vals <- matrix(vals, n_sims, byrow = T)
> #saveRDS(vals, file = '30/vals.rds')
> #write.table(vals, file = '30/vals.txt', row.names = F, col.names = F)
> 
> proc.time()
   user  system elapsed 
334.785   2.681 343.194 
