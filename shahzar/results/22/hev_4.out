
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820274 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> # Use detectCores() to find out how many cores are available.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> pop <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < pop)]
+   
+   leftover <- pop - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(beta_H, beta_C, inc, inf, verbose = 0) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:pop,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, pop - 1)), 
+                     E = c(1, rep(0, pop - 1)),
+                     E_count = c(1, rep(0, pop - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, pop - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         message(t)
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious
+     # period is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation
+     # period is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     risk_H <- beta_H * data$S * I_data$I_H / pop
+     risk_C <- beta_C * data$S * I_data$I_C / pop
+     
+     # Each individual is infected from their household or 
+     # community independently with probabilities risk_H
+     # and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label infections.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the proportion of household infections is undefined.
+   prp <- NA
+   if (idc != 0) {
+     # The proportion of household infections is the proportion of infections that
+     # were from the household.
+     prp <- mean(results[!is.na(results$TIME), ]$TYPE == 'H')
+   }
+   return(c(idc, prp))
+ }
> 
> beta_Hs <- seq(231, 300, 1)
> beta_Cs <- seq(0, 0.2, 0.01)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 100
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> prps <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+     
+     cat(paste0(beta_H, '/300\t', 
+                format(beta_C, nsmall = 2), '/0.20\t'))
+       
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(beta_H, beta_C, inc, inf, verbose = F) 
+       metrics(results)
+     }
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     cat(paste0(format(t_tot, nsmall = 2), 
+                '\t(', format(t_1 - t_0, nsmall = 2), ')\t'))
+     
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     prps[i, j, ] <- vals[, 2]
+     cat(paste0(format(mean(vals[, 1]), nsmall = 3), '\t', 
+                format(mean(vals[, 2]), nsmall = 3)))
+     write.table(idcs, file = 'idcs_4.txt', row.names = F, col.names = F)
+     write.table(prps, file = 'prps_4.txt', row.names = F, col.names = F)
+     cat('\n')
+   }
+   message('\n')
+ }
231/300	0.00/0.20	34.40474 secs	(34.40474 secs)	0.00443	0.7526667
231/300	0.01/0.20	68.59803 secs	(34.19329 secs)	0.00664	0.766658
231/300	0.02/0.20	103.4883 secs	(34.89031 secs)	0.01336	0.7591617
231/300	0.03/0.20	137.8145 secs	(34.32618 secs)	0.02277	0.7391573
231/300	0.04/0.20	171.9242 secs	(34.10963 secs)	0.0504	0.7431555
231/300	0.05/0.20	206.3913 secs	(34.46713 secs)	0.1187	0.7359134
231/300	0.06/0.20	241.1257 secs	(34.73439 secs)	0.21777	0.7303272
231/300	0.07/0.20	276.5659 secs	(35.44018 secs)	0.29471	0.7059295
231/300	0.08/0.20	311.1183 secs	(34.55244 secs)	0.41814	0.6940036
231/300	0.09/0.20	345.927 secs	(34.80866 secs)	0.61893	0.6830075
231/300	0.10/0.20	380.5386 secs	(34.61164 secs)	0.72915	0.694796
231/300	0.11/0.20	415.89 secs	(35.35138 secs)	0.75661	0.6853842
231/300	0.12/0.20	451.343 secs	(35.45303 secs)	0.89517	0.6770123
231/300	0.13/0.20	486.7546 secs	(35.41156 secs)	0.91516	0.6703844
231/300	0.14/0.20	521.4322 secs	(34.67766 secs)	0.91485	0.6419445
231/300	0.15/0.20	555.9644 secs	(34.53222 secs)	0.95687	0.6515982
231/300	0.16/0.20	591.878 secs	(35.91351 secs)	0.98035	0.638658
231/300	0.17/0.20	626.6082 secs	(34.73021 secs)	0.98728	0.630684
231/300	0.18/0.20	661.0076 secs	(34.39941 secs)	0.96095	0.6231433
231/300	0.19/0.20	695.8503 secs	(34.8427 secs)	0.98302	0.6121915
231/300	0.20/0.20	730.6981 secs	(34.84784 secs)	0.96479	0.5877441


232/300	0.00/0.20	765.2531 secs	(34.55496 secs)	0.00458	0.7685
232/300	0.01/0.20	799.668 secs	(34.41497 secs)	0.00703	0.7712877
232/300	0.02/0.20	833.2294 secs	(33.56139 secs)	0.01233	0.7597927
232/300	0.03/0.20	867.3608 secs	(34.13132 secs)	0.02572	0.7643711
232/300	0.04/0.20	901.667 secs	(34.30621 secs)	0.0464	0.744334
232/300	0.05/0.20	935.4953 secs	(33.8283 secs)	0.10227	0.7474755
232/300	0.06/0.20	970.0163 secs	(34.52101 secs)	0.20861	0.7273195
232/300	0.07/0.20	1004.709 secs	(34.69289 secs)	0.28553	0.7118914
232/300	0.08/0.20	1039.28 secs	(34.57114 secs)	0.47637	0.7128947
232/300	0.09/0.20	1074.494 secs	(35.21402 secs)	0.56493	0.6987653
232/300	0.10/0.20	1109.059 secs	(34.56426 secs)	0.69504	0.6906545
232/300	0.11/0.20	1143.991 secs	(34.9323 secs)	0.7739	0.6840516
232/300	0.12/0.20	1178.588 secs	(34.59758 secs)	0.88391	0.6780778
232/300	0.13/0.20	1213.162 secs	(34.57332 secs)	0.90795	0.6737787
232/300	0.14/0.20	1248.204 secs	(35.04233 secs)	0.9289	0.6601564
232/300	0.15/0.20	1283.653 secs	(35.44867 secs)	0.91196	0.649966
232/300	0.16/0.20	1318.132 secs	(34.47961 secs)	0.95017	0.6422514
232/300	0.17/0.20	1352.164 secs	(34.03115 secs)	0.97767	0.6285672
232/300	0.18/0.20	1386.974 secs	(34.81006 secs)	0.98074	0.6202965
232/300	0.19/0.20	1422.147 secs	(35.1733 secs)	0.97243	0.6046024
232/300	0.20/0.20	1456.451 secs	(34.30392 secs)	0.9679	0.5909176


233/300	0.00/0.20	1490.387 secs	(33.93593 secs)	0.00439	0.748
233/300	0.01/0.20	1524.542 secs	(34.15528 secs)	0.00816	0.7550321
233/300	0.02/0.20	1559.335 secs	(34.79344 secs)	0.0108	0.7502749
233/300	0.03/0.20	1593.648 secs	(34.31282 secs)	0.0272	0.7598676
233/300	0.04/0.20	1627.937 secs	(34.28913 secs)	0.05355	0.7425919
233/300	0.05/0.20	1662.095 secs	(34.15733 secs)	0.11845	0.7446104
233/300	0.06/0.20	1696.894 secs	(34.79929 secs)	0.2014	0.72885
233/300	0.07/0.20	1731.972 secs	(35.07778 secs)	0.33925	0.7144967
233/300	0.08/0.20	1766.733 secs	(34.76086 secs)	0.46013	0.7077127
233/300	0.09/0.20	1801.187 secs	(34.45395 secs)	0.66643	0.6987157
233/300	0.10/0.20	1836.066 secs	(34.87928 secs)	0.67341	0.6946746
233/300	0.11/0.20	1870.77 secs	(34.70441 secs)	0.77895	0.6865262
233/300	0.12/0.20	1904.846 secs	(34.0754 secs)	0.84693	0.6808564
233/300	0.13/0.20	1939.322 secs	(34.47671 secs)	0.88557	0.6693795
233/300	0.14/0.20	1974.445 secs	(35.12259 secs)	0.95679	0.660905
233/300	0.15/0.20	2009.606 secs	(35.161 secs)	0.9608	0.649858
233/300	0.16/0.20	2044.34 secs	(34.73438 secs)	0.96407	0.6424537
233/300	0.17/0.20	2079.662 secs	(35.32126 secs)	0.97596	0.629898
233/300	0.18/0.20	2115.154 secs	(35.49202 secs)	0.97037	0.6138135
233/300	0.19/0.20	2150.026 secs	(34.87187 secs)	0.97218	0.5988916
233/300	0.20/0.20	2184.882 secs	(34.85614 secs)	0.99368	0.5998352


234/300	0.00/0.20	2219.226 secs	(34.34416 secs)	0.00427	0.7345
234/300	0.01/0.20	2254.018 secs	(34.79243 secs)	0.00726	0.7521496
234/300	0.02/0.20	2288.304 secs	(34.28611 secs)	0.01148	0.7727236
234/300	0.03/0.20	2322.777 secs	(34.47302 secs)	0.02638	0.7640325
234/300	0.04/0.20	2357.275 secs	(34.49771 secs)	0.05259	0.7486755
234/300	0.05/0.20	2391.322 secs	(34.04692 secs)	0.13066	0.7347334
234/300	0.06/0.20	2425.821 secs	(34.49868 secs)	0.19267	0.7318376
234/300	0.07/0.20	2460.97 secs	(35.14973 secs)	0.30471	0.7120637
234/300	0.08/0.20	2495.765 secs	(34.7944 secs)	0.42698	0.6898963
234/300	0.09/0.20	2530.354 secs	(34.58896 secs)	0.58914	0.6869367
234/300	0.10/0.20	2566.365 secs	(36.01109 secs)	0.70123	0.6913603
234/300	0.11/0.20	2601.184 secs	(34.81898 secs)	0.77911	0.685204
234/300	0.12/0.20	2635.803 secs	(34.61895 secs)	0.85325	0.6775655
234/300	0.13/0.20	2670.438 secs	(34.63558 secs)	0.93633	0.6718561
234/300	0.14/0.20	2705.392 secs	(34.95347 secs)	0.93214	0.663928
234/300	0.15/0.20	2740.013 secs	(34.62142 secs)	0.95346	0.6527793
234/300	0.16/0.20	2775.649 secs	(35.63541 secs)	0.95463	0.6410628
234/300	0.17/0.20	2811.385 secs	(35.73609 secs)	0.96707	0.6245199
234/300	0.18/0.20	2846.854 secs	(35.46898 secs)	0.98054	0.6205187
234/300	0.19/0.20	2880.974 secs	(34.12015 secs)	0.99303	0.6089423
234/300	0.20/0.20	2915.17 secs	(34.19586 secs)	0.99417	0.6015815


235/300	0.00/0.20	2949.733 secs	(34.56284 secs)	0.00435	0.751
235/300	0.01/0.20	2983.935 secs	(34.20209 secs)	0.00682	0.7651048
235/300	0.02/0.20	3018.455 secs	(34.52053 secs)	0.01229	0.7420972
235/300	0.03/0.20	3052.907 secs	(34.45169 secs)	0.02266	0.7566157
235/300	0.04/0.20	3087.311 secs	(34.4039 secs)	0.04205	0.7310647
235/300	0.05/0.20	3121.721 secs	(34.41019 secs)	0.09715	0.7312288
235/300	0.06/0.20	3155.767 secs	(34.0455 secs)	0.21922	0.7256427
235/300	0.07/0.20	3190.379 secs	(34.61212 secs)	0.2795	0.7227515
235/300	0.08/0.20	3225.329 secs	(34.95025 secs)	0.43391	0.7106328
235/300	0.09/0.20	3259.868 secs	(34.5388 secs)	0.57045	0.6906567
235/300	0.10/0.20	3295.141 secs	(35.27299 secs)	0.71903	0.6887561
235/300	0.11/0.20	3330.513 secs	(35.37216 secs)	0.82273	0.6873374
235/300	0.12/0.20	3366.422 secs	(35.90877 secs)	0.8581	0.6789626
235/300	0.13/0.20	3401.347 secs	(34.92498 secs)	0.86581	0.6693186
235/300	0.14/0.20	3436.183 secs	(34.83607 secs)	0.86761	0.650248
235/300	0.15/0.20	3471.268 secs	(35.08512 secs)	0.93535	0.6519145
235/300	0.16/0.20	3505.779 secs	(34.5115 secs)	0.9788	0.6399065
235/300	0.17/0.20	3541.736 secs	(35.95655 secs)	0.97651	0.6254685
235/300	0.18/0.20	3576.771 secs	(35.03481 secs)	0.99046	0.6187169
235/300	0.19/0.20	3612.096 secs	(35.32491 secs)	0.99266	0.6125258
235/300	0.20/0.20	3646.52 secs	(34.42437 secs)	0.95498	0.5954052


236/300	0.00/0.20	3681.015 secs	(34.49487 secs)	0.0045	0.7581667
236/300	0.01/0.20	3716.42 secs	(35.40522 secs)	0.00759	0.7679726
236/300	0.02/0.20	3750.985 secs	(34.5653 secs)	0.01162	0.7631888
236/300	0.03/0.20	