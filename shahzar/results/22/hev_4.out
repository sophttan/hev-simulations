
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275504 14.8     663411 35.5   469120 25.1
Vcells 463347  3.6    8388608 64.0  1822672 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> # Use detectCores() to find out how many cores are available.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> pop <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < pop)]
+   
+   leftover <- pop - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(beta_H, beta_C, inc, inf, verbose = 0) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:pop,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, pop - 1)), 
+                     E = c(1, rep(0, pop - 1)),
+                     E_count = c(1, rep(0, pop - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, pop - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         message(t)
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious
+     # period is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation
+     # period is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     risk_H <- beta_H * data$S * I_data$I_H / pop
+     risk_C <- beta_C * data$S * I_data$I_C / pop
+     
+     # Each individual is infected from their household or 
+     # community independently with probabilities risk_H
+     # and risk_C.
+     new_inf_H <- pmin(rbinom(pop, 1, risk_H), 1)
+     new_inf_C <- pmin(rbinom(pop, 1, risk_C), 1)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label infections.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the proportion of household infections is undefined.
+   prp <- NA
+   if (idc != 0) {
+     # The proportion of household infections is the proportion of infections that
+     # were from the household.
+     prp <- mean(results[!is.na(results$TIME), ]$TYPE == 'H')
+   }
+   return(c(idc, prp))
+ }
> 
> beta_Hs <- seq(231, 300, 1)
> beta_Cs <- seq(0, 0.2, 0.01)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 100
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> prps <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+     
+     cat(paste0(beta_H, '/300\t', 
+                format(beta_C, nsmall = 2), '/0.20\t'))
+       
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(beta_H, beta_C, inc, inf, verbose = F) 
+       metrics(results)
+     }
+       
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     cat(paste0(format(t_tot, nsmall = 2), 
+                '\t(', format(t_1 - t_0, nsmall = 2), ')\t'))
+     
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     prps[i, j, ] <- vals[, 2]
+       
+     cat(paste0(format(mean(vals[, 1]), nsmall = 3), '\t', 
+                format(mean(vals[, 2]), nsmall = 3)))
+       
+     write.table(idcs, file = 'idcs_4.txt', row.names = F, col.names = F)
+     write.table(prps, file = 'prps_4.txt', row.names = F, col.names = F)
+     cat('\n')
+   }
+   message('\n')
+ }
231/300	0.00/0.20	34.57934 secs	(34.57934 secs)	0.0045	0.7531667
231/300	0.01/0.20	68.77224 secs	(34.1929 secs)	0.00662	0.7508482
231/300	0.02/0.20	103.0503 secs	(34.2781 secs)	0.0105	0.7529904
231/300	0.03/0.20	137.3527 secs	(34.30234 secs)	0.02144	0.7395334
231/300	0.04/0.20	172.0437 secs	(34.691 secs)	0.03594	0.7408652
231/300	0.05/0.20	206.163 secs	(34.1193 secs)	0.10153	0.7281389
231/300	0.06/0.20	240.3392 secs	(34.17621 secs)	0.18325	0.7281716
231/300	0.07/0.20	274.595 secs	(34.2558 secs)	0.34176	0.7057287
231/300	0.08/0.20	309.4843 secs	(34.88934 secs)	0.46091	0.7101255
231/300	0.09/0.20	344.123 secs	(34.63863 secs)	0.61584	0.6928621
231/300	0.10/0.20	379.3352 secs	(35.21228 secs)	0.7293	0.6928352
231/300	0.11/0.20	413.6014 secs	(34.26614 secs)	0.72594	0.6857058
231/300	0.12/0.20	448.7773 secs	(35.17594 secs)	0.84364	0.6650892
231/300	0.13/0.20	483.6654 secs	(34.8881 secs)	0.91805	0.6699959
231/300	0.14/0.20	518.2829 secs	(34.61751 secs)	0.92651	0.660279
231/300	0.15/0.20	553.9136 secs	(35.63072 secs)	0.95555	0.6422135
231/300	0.16/0.20	588.642 secs	(34.72836 secs)	0.96754	0.6350173
231/300	0.17/0.20	623.0978 secs	(34.45576 secs)	0.98783	0.6302316
231/300	0.18/0.20	657.2905 secs	(34.19278 secs)	0.98129	0.621691
231/300	0.19/0.20	692.5414 secs	(35.25084 secs)	0.9824	0.6069226
231/300	0.20/0.20	728.0735 secs	(35.5321 secs)	0.9847	0.5931518


232/300	0.00/0.20	762.4972 secs	(34.42376 secs)	0.00435	0.7416667
232/300	0.01/0.20	796.6861 secs	(34.18886 secs)	0.00706	0.7710394
232/300	0.02/0.20	830.8629 secs	(34.17683 secs)	0.01092	0.7679317
232/300	0.03/0.20	865.1159 secs	(34.25293 secs)	0.03214	0.7510256
232/300	0.04/0.20	899.6746 secs	(34.5587 secs)	0.05633	0.7473683
232/300	0.05/0.20	933.8551 secs	(34.18053 secs)	0.09508	0.7426728
232/300	0.06/0.20	968.1558 secs	(34.30074 secs)	0.16028	0.7138853
232/300	0.07/0.20	1003.031 secs	(34.87505 secs)	0.29859	0.7046817
232/300	0.08/0.20	1038.165 secs	(35.13387 secs)	0.45303	0.7070049
232/300	0.09/0.20	1073.451 secs	(35.28584 secs)	0.58198	0.6964037
232/300	0.10/0.20	1108.034 secs	(34.58365 secs)	0.70633	0.6870237
232/300	0.11/0.20	1143.617 secs	(35.5829 secs)	0.79295	0.6879485
232/300	0.12/0.20	1178.183 secs	(34.56568 secs)	0.83488	0.6788595
232/300	0.13/0.20	1213.622 secs	(35.43877 secs)	0.89692	0.6652962
232/300	0.14/0.20	1248.607 secs	(34.98545 secs)	0.8897	0.6512256
232/300	0.15/0.20	1283.048 secs	(34.44088 secs)	0.95312	0.6528702
232/300	0.16/0.20	1317.906 secs	(34.85828 secs)	0.96611	0.6402572
232/300	0.17/0.20	1352.939 secs	(35.03283 secs)	0.94828	0.6240133
232/300	0.18/0.20	1387.356 secs	(34.41715 secs)	0.97942	0.622197
232/300	0.19/0.20	1422.425 secs	(35.06852 secs)	0.97189	0.6069136
232/300	0.20/0.20	1457.132 secs	(34.70736 secs)	0.99419	0.5997262


233/300	0.00/0.20	1492.274 secs	(35.14162 secs)	0.00447	0.7463333
233/300	0.01/0.20	1526.94 secs	(34.66644 secs)	0.00745	0.7558662
233/300	0.02/0.20	1561.085 secs	(34.14507 secs)	0.01113	0.7657262
233/300	0.03/0.20	1595.559 secs	(34.47339 secs)	0.02746	0.7675709
233/300	0.04/0.20	1630.692 secs	(35.13294 secs)	0.06342	0.7521202
233/300	0.05/0.20	1664.758 secs	(34.06613 secs)	0.1025	0.7403309
233/300	0.06/0.20	1699.627 secs	(34.86934 secs)	0.20829	0.726432
233/300	0.07/0.20	1734.304 secs	(34.67719 secs)	0.33074	0.7095925
233/300	0.08/0.20	1768.878 secs	(34.5733 secs)	0.45437	0.6962344
233/300	0.09/0.20	1804.707 secs	(35.82957 secs)	0.58015	0.6917466
233/300	0.10/0.20	1840.562 secs	(35.85527 secs)	0.68255	0.695441
233/300	0.11/0.20	1875.62 secs	(35.05785 secs)	0.77588	0.6865403
233/300	0.12/0.20	1910.596 secs	(34.97563 secs)	0.86299	0.6759699
233/300	0.13/0.20	1945.089 secs	(34.49327 secs)	0.88968	0.6501374
233/300	0.14/0.20	1980.359 secs	(35.2702 secs)	0.88906	0.6492614
233/300	0.15/0.20	2014.864 secs	(34.50469 secs)	0.94161	0.6442993
233/300	0.16/0.20	2050.338 secs	(35.47374 secs)	0.98129	0.6406646
233/300	0.17/0.20	2084.833 secs	(34.4955 secs)	0.96768	0.6250776
233/300	0.18/0.20	2119.33 secs	(34.49706 secs)	0.98083	0.6203298
233/300	0.19/0.20	2154.453 secs	(35.12253 secs)	0.99335	0.6110746
233/300	0.20/0.20	2189.178 secs	(34.7252 secs)	0.99448	0.5991724


234/300	0.00/0.20	2223.144 secs	(33.96639 secs)	0.00435	0.7516667
234/300	0.01/0.20	2257.672 secs	(34.52755 secs)	0.00619	0.7677201
234/300	0.02/0.20	2291.704 secs	(34.03229 secs)	0.01158	0.7570679
234/300	0.03/0.20	2327.114 secs	(35.40996 secs)	0.02593	0.7410707
234/300	0.04/0.20	2361.601 secs	(34.48717 secs)	0.04869	0.7611267
234/300	0.05/0.20	2395.912 secs	(34.31089 secs)	0.08469	0.7384766
234/300	0.06/0.20	2430.611 secs	(34.6988 secs)	0.19467	0.7284118
234/300	0.07/0.20	2465.663 secs	(35.05152 secs)	0.30394	0.7113968
234/300	0.08/0.20	2500.678 secs	(35.0158 secs)	0.4733	0.6997864
234/300	0.09/0.20	2535.505 secs	(34.82655 secs)	0.60035	0.7022182
234/300	0.10/0.20	2569.735 secs	(34.22981 secs)	0.68706	0.6955329
234/300	0.11/0.20	2604.876 secs	(35.14117 secs)	0.80056	0.6873666
234/300	0.12/0.20	2639.851 secs	(34.97532 secs)	0.82393	0.6783315
234/300	0.13/0.20	2675.27 secs	(35.41856 secs)	0.9058	0.6636759
234/300	0.14/0.20	2709.61 secs	(34.34054 secs)	0.93197	0.6618104
234/300	0.15/0.20	2744.787 secs	(35.17637 secs)	0.94266	0.6490662
234/300	0.16/0.20	2779.29 secs	(34.50324 secs)	0.96157	0.6339138
234/300	0.17/0.20	2814.085 secs	(34.79528 secs)	0.96877	0.6297748
234/300	0.18/0.20	2849.826 secs	(35.74052 secs)	0.97112	0.6158026
234/300	0.19/0.20	2884.51 secs	(34.68388 secs)	0.99144	0.6090436
234/300	0.20/0.20	2919.16 secs	(34.65033 secs)	0.99379	0.6040296


235/300	0.00/0.20	2953.513 secs	(34.353 secs)	0.00448	0.7568333
235/300	0.01/0.20	2988.69 secs	(35.17705 secs)	0.00677	0.7625352
235/300	0.02/0.20	3023.52 secs	(34.83033 secs)	0.01222	0.7655784
235/300	0.03/0.20	3057.723 secs	(34.20292 secs)	0.02221	0.7650146
235/300	0.04/0.20	3092.275 secs	(34.55183 secs)	0.04542	0.7589335
235/300	0.05/0.20	3127.06 secs	(34.78446 secs)	0.1012	0.7467859
235/300	0.06/0.20	3162.128 secs	(35.06833 secs)	0.19342	0.7244378
235/300	0.07/0.20	3196.504 secs	(34.37644 secs)	0.27763	0.7117261
235/300	0.08/0.20	3232.134 secs	(35.6292 secs)	0.42713	0.695389
235/300	0.09/0.20	3267.06 secs	(34.92677 secs)	0.59516	0.6932766
235/300	0.10/0.20	3302.363 secs	(35.30249 secs)	0.72218	0.6979767
235/300	0.11/0.20	3336.863 secs	(34.50008 secs)	0.75476	0.6859732
235/300	0.12/0.20	3371.67 secs	(34.80684 secs)	0.87531	0.6778033
235/300	0.13/0.20	3406.678 secs	(35.00846 secs)	0.90338	0.6621468
235/300	0.14/0.20	3441.739 secs	(35.06049 secs)	0.90466	0.6613488
235/300	0.15/0.20	3477.193 secs	(35.45399 secs)	0.96315	0.6506084
235/300	0.16/0.20	3513.505 secs	(36.31206 secs)	0.96067	0.6414247
235/300	0.17/0.20	3548.004 secs	(34.4989 secs)	0.96478	0.6327744
235/300	0.18/0.20	3582.475 secs	(34.47121 secs)	0.98049	0.6150048
235/300	0.19/0.20	3617.02 secs	(34.54559 secs)	0.96218	0.6033343
235/300	0.20/0.20	3652.186 secs	(35.16569 secs)	0.99522	0.5987229


236/300	0.00/0.20	3686.578 secs	(34.39181 secs)	0.00449	0.7523333
236/300	0.01/0.20	3721.069 secs	(34.49127 secs)	0.00762	0.7430576
236/300	0.02/0.20	3755.289 secs	(34.21971 secs)	0.01077	0.753065
236/300	0.03/0.20	3789.375 secs	(34.08651 secs)	0.0233	0.7422537
236/300	0.04/0.20	3824.455 secs	(35.08 secs)	0.0512	0.7336375
236/300	0.05/0.20	3859.038 secs	(34.58297 secs)	0.10822	0.7480724
236/300	0.06/0.20	3894.805 secs	(35.7669 secs)	0.18632	0.7303543
236/300	0.07/0.20	3928.955 secs	(34.15016 secs)	0.3072	0.7108163
236/300	0.08/0.20	3964.04 secs	(35.08467 secs)	0.44708	0.7078103
236/300	0.09/0.20	3998.82 secs	(34.77971 secs)	0.60406	0.7033822
236/300	0.10/0.20	4033.686 secs	(34.8658 secs)	0.72558	0.6940922
236/300	0.11/0.20	4069.311 secs	(35.62575 secs)	0.78972	0.6811759
236/300	0.12/0.20	4104.146 secs	(34.83475 secs)	0.88541	0.6798796
236/300	0.13/0.20	4139.176 secs	(35.02978 secs)	0.90884	0.670649
236/300	0.14/0.20	4173.874 secs	(34.69803 secs)	0.90659	0.6566476
236/300	0.15/0.20	4208.471 secs	(34.59749 secs)	0.96915	0.6521739
236/300	0.16/0.20	4243.403 secs	(34.93194 secs)	0.95068	0.6348084
236/300	0.17/0.20	4278.101 secs	(34.69783 secs)	0.96424	0.6258391
236/300	0.18/0.20	4312.91 secs	(34.80902 secs)	0.98167	0.6136802
236/300	0.19/0.20	4347.604 secs	(34.69347 secs)	0.98304	0.6038408
236/300	0.20/0.20	4382.153 secs	(34.54974 secs)	0.99394	0.5984704


237/300	0.00/0.20	4417.01 secs	(34.85695 secs)	0.00456	0.7646667
237/300	0.01/0.20	4451.501 secs	(34.49095 secs)	0.00634	0.7571298
237/300	0.02/0.20	4486.20 secs	(34.69911 secs)	0.01471	0.7546744
237/300	0.03/0.20	4520.42 secs	(34.21984 secs)	0.01683	0.7638376
237/300	0.04/0.20	4555.101 secs	(34.68053 secs)	0.04748	0.7485574
237/300	0.05/0.20	4590.432 secs	(35.33076 secs)	0.11574	0.7439067
237/300	0.06/0.20	4625.365 secs	(34.93314 secs)	0.19882	0.7294637
237/300	0.07/0.20	4659.565 secs	(34.20044 secs)	0.29512	0.7167887
237/300	0.08/0.20	4694.087 secs	(34.5215 secs)	0.43109	0.7146267
237/300	0.09/0.20	4728.706 secs	(34.61897 secs)	0.563	0.702322
237/300	0.10/0.20	4763.487 secs	(34.78097 secs)	0.69893	0.6953883
237/300	0.11/0.20	4797.714 secs	(34.22774 secs)	0.78191	0.6888348
237/300	0.12/0.20	4832.538 secs	(34.82403 secs)	0.88113	0.6797178
237/300	0.13/0.20	4867.98 secs	(35.44137 secs)	0.9239	0.6638336
237/300	0.14/0.20	4902.659 secs	(34.6793 secs)	0.93951	0.6609948
237/300	0.15/0.20	4938.038 secs	(35.37852 secs)	0.94558	0.6437068
237/300	0.16/0.20	4972.452 secs	(34.41465 secs)	0.97099	0.6392024
237/300	0.17/0.20	5007.151 secs	(34.69843 secs)	0.97854	0.6332858
237/300	0.18/0.20	5042.286 secs	(35.13575 secs)	0.98997	0.619659
237/300	0.19/0.20	5076.819 secs	(34.53256 secs)	0.99315	0.6093795
237/300	0.20/0.20	5112.251 secs	(35.43198 secs)	0.99465	0.6002757


238/300	0.00/0.20	5146.191 secs	(33.94058 secs)	0.00434	0.7288333
238/300	0.01/0.20	5180.742 secs	(34.55003 secs)	0.00732	0.7662313
238/300	0.02/0.20	5215.684 secs	(34.94265 secs)	0.01286	0.7645586
238/300	0.03/0.20	5250.107 secs	(34.42328 secs)	0.02401	0.7453118
238/300	0.04/0.20	5285.303 secs	(35.19594 secs)	0.05715	0.7520406
238/300	0.05/0.20	5319.746 secs	(34.44215 secs)	0.10518	0.7292387
238/300	0.06/0.20	5353.919 secs	(34.17358 secs)	0.19674	0.7223851
238/300	0.07/0.20	5388.311 secs	(34.3915 secs)	0.30087	0.7177118
238/300	0.08/0.20	5423.275 secs	(34.96447 secs)	0.43962	0.7046346
238/300	0.09/0.20	5458.066 secs	(34.7914 secs)	0.60719	0.7002896
238/300	0.10/0.20	5493.902 secs	(35.83579 secs)	0.70914	0.6881921
238/300	0.11/0.20	5530.689 secs	(36.78651 secs)	0.7716	0.6846814
238/300	0.12/0.20	5565.474 secs	(34.7855 secs)	0.86784	0.6826807
238/300	0.13/0.20	5600.10 secs	(34.62618 secs)	0.90909	0.6743289
238/300	0.14/0.20	5635.092 secs	(34.9913 secs)	0.93826	0.6533206
238/300	0.15/0.20	5669.641 secs	(34.54948 secs)	0.96317	0.6522629
238/300	0.16/0.20	5704.616 secs	(34.97476 secs)	0.97276	0.6411904
238/300	0.17/0.20	5740.459 secs	(35.84303 secs)	0.95891	0.6269872
238/300	0.18/0.20	5775.201 secs	(34.7422 secs)	0.99133	0.6197411
238/300	0.19/0.20	5809.797 secs	(34.59575 secs)	0.99305	0.6097849
238/300	0.20/0.20	5844.981 secs	(35.18434 secs)	0.97511	0.6014317


239/300	0.00/0.20	5879.953 secs	(34.97155 secs)	0.00436	0.7468333
239/300	0.01/0.20	5913.90 secs	(33.9475 secs)	0.00824	0.7514174
239/300	0.02/0.20	5949.357 secs	(35.4569 secs)	0.01367	0.7597065
239/300	0.03/0.20	5983.159 secs	(33.80183 secs)	0.02398	0.7606736
239/300	0.04/0.20	6018.501 secs	(35.34214 secs)	0.04616	0.7527817
239/300	0.05/0.20	6053.047 secs	(34.54594 secs)	0.10846	0.7408981
239/300	0.06/0.20	6087.563 secs	(34.51624 secs)	0.21083	0.7298197
239/300	0.07/0.20	6122.275 secs	(34.71167 secs)	0.334	0.7169978
239/300	0.08/0.20	6156.849 secs	(34.57382 secs)	0.46541	0.7067982
239/300	0.09/0.20	6191.625 secs	(34.77649 secs)	0.54928	0.6976001
239/300	0.10/0.20	6227.12 secs	(35.49496 secs)	0.72004	0.69342
239/300	0.11/0.20	6262.161 secs	(35.0406 secs)	0.76826	0.6793761
239/300	0.12/0.20	6297.012 secs	(34.85113 secs)	0.84508	0.679567
239/300	0.13/0.20	6331.526 secs	(34.51379 secs)	0.92061	0.6696664
239/300	0.14/0.20	6366.86 secs	(35.33446 secs)	0.91902	0.6675036
239/300	0.15/0.20	6401.484 secs	(34.62374 secs)	0.96546	0.6497887
239/300	0.16/0.20	6436.967 secs	(35.48246 secs)	0.94065	0.6432101
239/300	0.17/0.20	6471.453 secs	(34.48694 secs)	0.96867	0.6250044
239/300	0.18/0.20	6505.856 secs	(34.40207 secs)	0.97838	0.6220017
239/300	0.19/0.20	6541.841 secs	(35.98559 secs)	0.97363	0.6127668
239/300	0.20/0.20	6576.296 secs	(34.45495 secs)	0.99439	0.6032888


240/300	0.00/0.20	6610.761 secs	(34.4649 secs)	0.00455	0.7643333
240/300	0.01/0.20	6645.016 secs	(34.25518 secs)	0.0062	0.7605358
240/300	0.02/0.20	6678.974 secs	(33.95809 secs)	0.01428	0.7596188
240/300	0.03/0.20	6713.088 secs	(34.11353 secs)	0.0226	0.7634171
240/300	0.04/0.20	6747.464 secs	(34.3764 secs)	0.05689	0.7539384
240/300	0.05/0.20	6782.237 secs	(34.77239 secs)	0.11645	0.7485108
240/300	0.06/0.20	6817.114 secs	(34.87693 secs)	0.2091	0.7294352
240/300	0.07/0.20	6852.461 secs	(35.34763 secs)	0.3375	0.7071928
240/300	0.08/0.20	6887.216 secs	(34.75484 secs)	0.46504	0.709303
240/300	0.09/0.20	6922.498 secs	(35.28238 secs)	0.59716	0.6920442
240/300	0.10/0.20	6957.777 secs	(35.27843 secs)	0.70452	0.7015121
240/300	0.11/0.20	6993.577 secs	(35.80008 secs)	0.82333	0.6874619
240/300	0.12/0.20	7028.399 secs	(34.82188 secs)	0.87101	0.6821533
240/300	0.13/0.20	7062.988 secs	(34.58897 secs)	0.91735	0.672525
240/300	0.14/0.20	7097.698 secs	(34.71032 secs)	0.94033	0.654129
240/300	0.15/0.20	7132.768 secs	(35.07011 secs)	0.90027	0.6546158
240/300	0.16/0.20	7167.763 secs	(34.99456 secs)	0.9822	0.6409054
240/300	0.17/0.20	7203.059 secs	(35.29613 secs)	0.97627	0.6284755
240/300	0.18/0.20	7237.386 secs	(34.327 secs)	0.95966	0.6179968
240/300	0.19/0.20	7272.404 secs	(35.01808 secs)	0.99306	0.6107971
240/300	0.20/0.20	7306.811 secs	(34.40704 secs)	0.98355	0.6016227


241/300	0.00/0.20	7340.773 secs	(33.96198 secs)	0.00475	0.7736667
241/300	0.01/0.20	7374.992 secs	(34.21922 secs)	0.0072	0.7553277
241/300	0.02/0.20	7409.084 secs	(34.09146 secs)	0.01088	0.7654853
241/300	0.03/0.20	7444.305 secs	(35.22119 secs)	0.02521	0.7599321
241/300	0.04/0.20	7478.251 secs	(33.9463 secs)	0.06015	0.751249
241/300	0.05/0.20	7513.997 secs	(35.74571 secs)	0.10115	0.7347272
241/300	0.06/0.20	7549.429 secs	(35.43224 secs)	0.20604	0.7317352
241/300	0.07/0.20	7584.114 secs	(34.68457 secs)	0.29951	0.7176874
241/300	0.08/0.20	7619.453 secs	(35.33928 secs)	0.47718	0.708999
241/300	0.09/0.20	7653.676 secs	(34.22297 secs)	0.60312	0.7014875
241/300	0.10/0.20	7688.654 secs	(34.97783 secs)	0.71777	0.6928009
241/300	0.11/0.20	7723.656 secs	(35.00233 secs)	0.82558	0.6849598
241/300	0.12/0.20	7759.165 secs	(35.50869 secs)	0.87461	0.6715649
241/300	0.13/0.20	7794.594 secs	(35.42963 secs)	0.86616	0.6698641
241/300	0.14/0.20	7829.95 secs	(35.35574 secs)	0.93198	0.65423
241/300	0.15/0.20	7864.317 secs	(34.36693 secs)	0.97589	0.6517481
241/300	0.16/0.20	7898.937 secs	(34.62006 secs)	0.97476	0.6346042
241/300	0.17/0.20	7934.801 secs	(35.8639 secs)	0.97657	0.6259162
241/300	0.18/0.20	7969.698 secs	(34.89718 secs)	0.99229	0.6220578
241/300	0.19/0.20	8005.499 secs	(35.80091 secs)	0.99152	0.6121425
241/300	0.20/0.20	8040.115 secs	(34.61625 secs)	0.98426	0.6016076


242/300	0.00/0.20	8074.575 secs	(34.45971 secs)	0.0044	0.7571667
242/300	0.01/0.20	8109.62 secs	(35.04469 secs)	0.00678	0.7498257
242/300	0.02/0.20	8143.755 secs	(34.13503 secs)	0.0161	0.7636702
242/300	0.03/0.20	8178.426 secs	(34.67144 secs)	0.02793	0.7520159
242/300	0.04/0.20	8212.62 secs	(34.19364 secs)	0.05666	0.7640028
242/300	0.05/0.20	8247.245 secs	(34.62473 secs)	0.10198	0.7418594
242/300	0.06/0.20	8281.804 secs	(34.55908 secs)	0.19305	0.7228978
242/300	0.07/0.20	8317.366 secs	(35.56194 secs)	0.3538	0.7168865
242/300	0.08/0.20	8351.656 secs	(34.29083 secs)	0.43591	0.7089925
242/300	0.09/0.20	8386.097 secs	(34.44096 secs)	0.56681	0.7032098
242/300	0.10/0.20	8420.628 secs	(34.53061 secs)	0.6776	0.6818967
242/300	0.11/0.20	8455.155 secs	(34.52698 secs)	0.78763	0.6861511
242/300	0.12/0.20	8490.031 secs	(34.87636 secs)	0.84416	0.6779923
242/300	0.13/0.20	8525.154 secs	(35.12298 secs)	0.91594	0.6698705
242/300	0.14/0.20	8560.386 secs	(35.2315 secs)	0.9245	0.6404985
242/300	0.15/0.20	8594.849 secs	(34.46348 secs)	0.95317	0.6443212
242/300	0.16/0.20	8629.515 secs	(34.66566 secs)	0.95433	0.6435788
242/300	0.17/0.20	8664.823 secs	(35.30812 secs)	0.96556	0.6305506
242/300	0.18/0.20	8700.073 secs	(35.25001 secs)	0.98143	0.6152816
242/300	0.19/0.20	8735.66 secs	(35.58724 secs)	0.98326	0.6051621
242/300	0.20/0.20	8770.665 secs	(35.00441 secs)	0.9943	0.6016305


243/300	0.00/0.20	8805.802 secs	(35.13757 secs)	0.0046	0.7638333
243/300	0.01/0.20	8839.619 secs	(33.81707 secs)	0.00671	0.7590785
243/300	0.02/0.20	8874.241 secs	(34.62151 secs)	0.01225	0.7614878
243/300	0.03/0.20	8909.049 secs	(34.80786 secs)	0.02176	0.7691088
243/300	0.04/0.20	8943.36 secs	(34.31089 secs)	0.04661	0.7510917
243/300	0.05/0.20	8977.974 secs	(34.61461 secs)	0.09164	0.7397078
243/300	0.06/0.20	9012.419 secs	(34.44458 secs)	0.20243	0.7304431
243/300	0.07/0.20	9047.774 secs	(35.3547 secs)	0.29857	0.7061835
243/300	0.08/0.20	9082.475 secs	(34.70121 secs)	0.43059	0.7095656
243/300	0.09/0.20	9117.51 secs	(35.03538 secs)	0.53525	0.6972149
243/300	0.10/0.20	9152.186 secs	(34.6763 secs)	0.69814	0.6877371
243/300	0.11/0.20	9186.47 secs	(34.28396 secs)	0.77894	0.6734085
243/300	0.12/0.20	9221.256 secs	(34.7861 secs)	0.87747	0.6792419
243/300	0.13/0.20	9255.609 secs	(34.35238 secs)	0.89433	0.6721113
243/300	0.14/0.20	9290.808 secs	(35.1994 secs)	0.95173	0.6625283
243/300	0.15/0.20	9326.448 secs	(35.64023 secs)	0.94649	0.6534212
243/300	0.16/0.20	9362.255 secs	(35.80629 secs)	0.98289	0.6417313
243/300	0.17/0.20	9396.949 secs	(34.69459 secs)	0.97861	0.631625
243/300	0.18/0.20	9432.119 secs	(35.16948 secs)	0.9617	0.6096037
243/300	0.19/0.20	9466.996 secs	(34.87738 secs)	0.98311	0.6148244
243/300	0.20/0.20	9501.908 secs	(34.91186 secs)	0.97522	0.5949336


244/300	0.00/0.20	9537.018 secs	(35.10945 secs)	0.00444	0.756
244/300	0.01/0.20	9571.154 secs	(34.13614 secs)	0.0059	0.7541186
244/300	0.02/0.20	9605.585 secs	(34.43143 secs)	0.01227	0.7591817
244/300	0.03/0.20	9640.173 secs	(34.5876 secs)	0.02808	0.7563428
244/300	0.04/0.20	9675.633 secs	(35.45982 secs)	0.05076	0.7540771
244/300	0.05/0.20	9709.825 secs	(34.19198 secs)	0.0885	0.7483744
244/300	0.06/0.20	9744.659 secs	(34.83401 secs)	0.22315	0.7285167
244/300	0.07/0.20	9779.529 secs	(34.87071 secs)	0.34133	0.7211211
244/300	0.08/0.20	9814.00 secs	(34.47031 secs)	0.42976	0.7131752
244/300	0.09/0.20	9848.565 secs	(34.56516 secs)	0.58548	0.6951725
244/300	0.10/0.20	9883.309 secs	(34.74389 secs)	0.70314	0.6982386
244/300	0.11/0.20	9917.987 secs	(34.6786 secs)	0.8031	0.6811811
244/300	0.12/0.20	9953.124 secs	(35.13668 secs)	0.8543	0.6836125
244/300	0.13/0.20	9988.791 secs	(35.66724 secs)	0.88902	0.6693782
244/300	0.14/0.20	10023.09 secs	(34.29844 secs)	0.95877	0.661066
244/300	0.15/0.20	10057.81 secs	(34.72342 secs)	0.94285	0.6506349
244/300	0.16/0.20	10092.59 secs	(34.77568 secs)	0.96982	0.6432816
244/300	0.17/0.20	10126.99 secs	(34.40145 secs)	0.96924	0.6336294
244/300	0.18/0.20	10162.80 secs	(35.81154 secs)	0.98131	0.623302
244/300	0.19/0.20	10198.60 secs	(35.79353 secs)	0.99372	0.6110565
244/300	0.20/0.20	10233.20 secs	(34.60482 secs)	0.98482	0.6035814


245/300	0.00/0.20	10267.05 secs	(33.85276 secs)	0.00434	0.7533333
245/300	0.01/0.20	10302.54 secs	(35.48623 secs)	0.00649	0.7471465
245/300	0.02/0.20	10336.63 secs	(34.09233 secs)	0.00938	0.7635954
245/300	0.03/0.20	10370.79 secs	(34.16004 secs)	0.02207	0.766827
245/300	0.04/0.20	10404.65 secs	(33.85618 secs)	0.05476	0.7398502
245/300	0.05/0.20	10439.74 secs	(35.08953 secs)	0.09628	0.7214874
245/300	0.06/0.20	10474.83 secs	(35.08866 secs)	0.17674	0.7357834
245/300	0.07/0.20	10508.91 secs	(34.08441 secs)	0.29585	0.7104471
245/300	0.08/0.20	10543.32 secs	(34.40614 secs)	0.43184	0.7118517
245/300	0.09/0.20	10577.89 secs	(34.5694 secs)	0.61005	0.7005057
245/300	0.10/0.20	10612.47 secs	(34.58814 secs)	0.69379	0.6981557
245/300	0.11/0.20	10648.03 secs	(35.55383 secs)	0.79546	0.6861819
245/300	0.12/0.20	10682.58 secs	(34.55082 secs)	0.87696	0.6785178
245/300	0.13/0.20	10718.11 secs	(35.534 secs)	0.88015	0.6654321
245/300	0.14/0.20	10752.89 secs	(34.77853 secs)	0.89071	0.6565083
245/300	0.15/0.20	10787.79 secs	(34.89825 secs)	0.95547	0.6430483
245/300	0.16/0.20	10823.60 secs	(35.80721 secs)	0.9711	0.6404626
245/300	0.17/0.20	10859.28 secs	(35.68715 secs)	0.96532	0.6245269
245/300	0.18/0.20	10893.95 secs	(34.67009 secs)	0.97204	0.624851
245/300	0.19/0.20	10928.81 secs	(34.85447 secs)	0.99203	0.6106641
245/300	0.20/0.20	10963.83 secs	(35.01703 secs)	0.99468	0.6008143


246/300	0.00/0.20	10999.09 secs	(35.26376 secs)	0.00445	0.7603333
246/300	0.01/0.20	11033.71 secs	(34.62005 secs)	0.00623	0.7579321
246/300	0.02/0.20	11067.58 secs	(33.87533 secs)	0.01297	0.7534381
246/300	0.03/0.20	11103.05 secs	(35.46975 secs)	0.02954	0.7623039
246/300	0.04/0.20	11137.45 secs	(34.39106 secs)	0.05596	0.7533822
246/300	0.05/0.20	11172.49 secs	(35.0478 secs)	0.11116	0.7433249
246/300	0.06/0.20	11207.96 secs	(35.46326 secs)	0.19902	0.7272895
246/300	0.07/0.20	11243.09 secs	(35.13244 secs)	0.27593	0.7101214
246/300	0.08/0.20	11277.25 secs	(34.16507 secs)	0.44517	0.7209095
246/300	0.09/0.20	11312.09 secs	(34.83644 secs)	0.58587	0.7024777
246/300	0.10/0.20	11346.88 secs	(34.79332 secs)	0.69107	0.6968609
246/300	0.11/0.20	11381.95 secs	(35.07133 secs)	0.79301	0.6821134
246/300	0.12/0.20	11417.24 secs	(35.2878 secs)	0.85608	0.6793779
246/300	0.13/0.20	11452.63 secs	(35.38527 secs)	0.93004	0.6709609
246/300	0.14/0.20	11487.72 secs	(35.09081 secs)	0.92474	0.6635413
246/300	0.15/0.20	11523.51 secs	(35.79157 secs)	0.93053	0.6549543
246/300	0.16/0.20	11559.62 secs	(36.10746 secs)	0.96283	0.6407988
246/300	0.17/0.20	11594.81 secs	(35.1957 secs)	0.96594	0.6329632
246/300	0.18/0.20	11629.61 secs	(34.79309 secs)	0.98704	0.6221399
246/300	0.19/0.20	11664.34 secs	(34.73167 secs)	0.99014	0.6122994
246/300	0.20/0.20	11699.26 secs	(34.91964 secs)	0.98288	0.595008


247/300	0.00/0.20	11734.33 secs	(35.07615 secs)	0.00467	0.7718333
247/300	0.01/0.20	11768.17 secs	(33.83443 secs)	0.00712	0.7717808
247/300	0.02/0.20	11802.17 secs	(34.00328 secs)	0.01305	0.7590954
247/300	0.03/0.20	11836.03 secs	(33.86166 secs)	0.02339	0.757971
247/300	0.04/0.20	11870.47 secs	(34.43778 secs)	0.05045	0.7522432
247/300	0.05/0.20	11904.90 secs	(34.4289 secs)	0.11099	0.7409255
247/300	0.06/0.20	11939.45 secs	(34.55422 secs)	0.22137	0.7266192
247/300	0.07/0.20	11975.46 secs	(36.00122 secs)	0.3043	0.7116315
247/300	0.08/0.20	12010.92 secs	(35.46372 secs)	0.45172	0.7011465
247/300	0.09/0.20	12046.62 secs	(35.70411 secs)	0.60198	0.6923294
247/300	0.10/0.20	12081.18 secs	(34.55788 secs)	0.6824	0.6966563
247/300	0.11/0.20	12116.09 secs	(34.91204 secs)	0.81503	0.687171
247/300	0.12/0.20	12150.84 secs	(34.74621 secs)	0.8702	0.6798851
247/300	0.13/0.20	12185.23 secs	(34.39122 secs)	0.86714	0.6650303
247/300	0.14/0.20	12221.42 secs	(36.18867 secs)	0.90868	0.6499343
247/300	0.15/0.20	12255.63 secs	(34.2093 secs)	0.93491	0.6476731
247/300	0.16/0.20	12290.36 secs	(34.73354 secs)	0.97776	0.6431882
247/300	0.17/0.20	12325.19 secs	(34.82881 secs)	0.95811	0.6250013
247/300	0.18/0.20	12360.68 secs	(35.49231 secs)	0.9614	0.6142912
247/300	0.19/0.20	12395.04 secs	(34.35774 secs)	0.96311	0.6080305
247/300	0.20/0.20	12429.54 secs	(34.49873 secs)	0.98533	0.6053027


248/300	0.00/0.20	12463.28 secs	(33.73664 secs)	0.00452	0.7643333
248/300	0.01/0.20	12497.37 secs	(34.09304 secs)	0.00714	0.7595138
248/300	0.02/0.20	12532.11 secs	(34.74287 secs)	0.01314	0.7655051
248/300	0.03/0.20	12566.33 secs	(34.21664 secs)	0.02574	0.7499233
248/300	0.04/0.20	12601.70 secs	(35.36995 secs)	0.0515	0.7464787
248/300	0.05/0.20	12635.85 secs	(34.15528 secs)	0.10806	0.7423103
248/300	0.06/0.20	12670.58 secs	(34.72766 secs)	0.2118	0.7187669
248/300	0.07/0.20	12705.68 secs	(35.09475 secs)	0.31334	0.7151999
248/300	0.08/0.20	12740.67 secs	(34.99621 secs)	0.39478	0.7045458
248/300	0.09/0.20	12775.60 secs	(34.92722 secs)	0.58634	0.6956369
248/300	0.10/0.20	12809.93 secs	(34.33292 secs)	0.69391	0.6954275
248/300	0.11/0.20	12845.16 secs	(35.22356 secs)	0.78332	0.6892
248/300	0.12/0.20	12880.39 secs	(35.23217 secs)	0.82754	0.6842256
248/300	0.13/0.20	12915.89 secs	(35.50299 secs)	0.91822	0.6759245
248/300	0.14/0.20	12951.16 secs	(35.26398 secs)	0.90575	0.6651445
248/300	0.15/0.20	12985.80 secs	(34.64177 secs)	0.94218	0.654161
248/300	0.16/0.20	13020.09 secs	(34.29253 secs)	0.97011	0.6441925
248/300	0.17/0.20	13054.67 secs	(34.58072 secs)	0.97589	0.6332682
248/300	0.18/0.20	13089.32 secs	(34.64782 secs)	0.99144	0.6225798
248/300	0.19/0.20	13124.92 secs	(35.60187 secs)	0.98342	0.6124068
248/300	0.20/0.20	13159.53 secs	(34.61077 secs)	0.98464	0.6036606


249/300	0.00/0.20	13193.77 secs	(34.23944 secs)	0.00447	0.7546667
249/300	0.01/0.20	13228.13 secs	(34.35928 secs)	0.00675	0.7645376
249/300	0.02/0.20	13262.10 secs	(33.97291 secs)	0.01196	0.7490452
249/300	0.03/0.20	13296.88 secs	(34.77779 secs)	0.022	0.7623525
249/300	0.04/0.20	13332.04 secs	(35.15989 secs)	0.04941	0.7522445
249/300	0.05/0.20	13367.94 secs	(35.89971 secs)	0.11227	0.7393545
249/300	0.06/0.20	13402.58 secs	(34.64078 secs)	0.16737	0.7290651
249/300	0.07/0.20	13437.31 secs	(34.7308 secs)	0.33666	0.711668
249/300	0.08/0.20	13472.47 secs	(35.1603 secs)	0.44649	0.7093596
249/300	0.09/0.20	13507.00 secs	(34.52959 secs)	0.56624	0.6953022
249/300	0.10/0.20	13542.28 secs	(35.27468 secs)	0.70372	0.6945868
249/300	0.11/0.20	13576.95 secs	(34.6709 secs)	0.79644	0.6886629
249/300	0.12/0.20	13612.31 secs	(35.3626 secs)	0.86089	0.6745012
249/300	0.13/0.20	13647.05 secs	(34.73898 secs)	0.89574	0.6720685
249/300	0.14/0.20	13682.06 secs	(35.00818 secs)	0.947	0.6643523
249/300	0.15/0.20	13717.00 secs	(34.94168 secs)	0.96329	0.6529379
249/300	0.16/0.20	13751.31 secs	(34.31372 secs)	0.95462	0.6423412
249/300	0.17/0.20	13785.38 secs	(34.07229 secs)	0.97822	0.6340229
249/300	0.18/0.20	13820.54 secs	(35.15857 secs)	0.99164	0.623246
249/300	0.19/0.20	13856.03 secs	(35.4859 secs)	0.98242	0.6070998
249/300	0.20/0.20	13891.04 secs	(35.00649 secs)	0.99463	0.6031288


250/300	0.00/0.20	13925.69 secs	(34.65748 secs)	0.0044	0.7475
250/300	0.01/0.20	13960.05 secs	(34.36194 secs)	0.0072	0.7707839
250/300	0.02/0.20	13994.17 secs	(34.11033 secs)	0.01289	0.7473487
250/300	0.03/0.20	14029.33 secs	(35.16396 secs)	0.02304	0.7594728
250/300	0.04/0.20	14063.46 secs	(34.12882 secs)	0.04831	0.751213
250/300	0.05/0.20	14097.73 secs	(34.26798 secs)	0.11584	0.7453523
250/300	0.06/0.20	14132.26 secs	(34.53553 secs)	0.2069	0.7286535
250/300	0.07/0.20	14168.09 secs	(35.82546 secs)	0.28773	0.7156236
250/300	0.08/0.20	14203.58 secs	(35.49361 secs)	0.51091	0.7054371
250/300	0.09/0.20	14238.02 secs	(34.44027 secs)	0.66235	0.6984208
250/300	0.10/0.20	14272.83 secs	(34.80456 secs)	0.75217	0.6957628
250/300	0.11/0.20	14307.76 secs	(34.93349 secs)	0.79781	0.6796902
250/300	0.12/0.20	14343.60 secs	(35.84035 secs)	0.82282	0.6744504
250/300	0.13/0.20	14378.09 secs	(34.48771 secs)	0.91026	0.6729402
250/300	0.14/0.20	14413.06 secs	(34.97345 secs)	0.93434	0.663873
250/300	0.15/0.20	14447.79 secs	(34.73185 secs)	0.94703	0.6545033
250/300	0.16/0.20	14483.13 secs	(35.33672 secs)	0.9828	0.6422686
250/300	0.17/0.20	14517.53 secs	(34.3975 secs)	0.98768	0.633475
250/300	0.18/0.20	14552.60 secs	(35.07578 secs)	0.98192	0.6166342
250/300	0.19/0.20	14587.64 secs	(35.03523 secs)	0.97336	0.6010433
250/300	0.20/0.20	14622.98 secs	(35.3463 secs)	0.99486	0.6037022


251/300	0.00/0.20	14657.22 secs	(34.23229 secs)	0.00447	0.7593333
251/300	0.01/0.20	14692.91 secs	(35.69509 secs)	0.00645	0.7686424
251/300	0.02/0.20	14727.15 secs	(34.2366 secs)	0.01255	0.7600126
251/300	0.03/0.20	Error in { : 
  task 26 failed - "NAs are not allowed in subscripted assignments"
Calls: %dopar% -> <Anonymous>
Execution halted
