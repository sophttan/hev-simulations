
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_mix <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   cases <- results[!is.na(results$TIME), ]
+   prp <- mean((cases$TYPE != 'E') & (cases$TYPE != '0'))
+     
+   return(c(idc, prp))
+ }
> 
> #########
> ## 50% ##
> #########
> 
> # 5% Cumulative Incidence
> beta_H <- 28
> beta_C <- 0.006
> beta_E <- 0.00008
> params <- c(beta_H, beta_C, beta_E)
> 
> n_sims <- 1000
> i <- 1
> j <- 0
> while (i <= n_sims) {
+     results <- SEIR_mix(params)
+     j <- j + 1
+     cat(paste0(j, '\t', i, '\n'))
+     if (all(metrics(results) > c(0.04, 0.48)) & all(metrics(results) < c(0.06, 0.52))) {
+         write.csv(results, file = paste0('5/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
1	1
2	2
3	3
4	3
5	3
6	3
7	3
8	3
9	3
10	3
11	3
12	3
13	3
14	3
15	3
16	3
17	3
18	3
19	3
20	3
21	3
22	3
23	3
24	3
25	3
26	3
27	3
28	3
29	4
30	4
31	5
32	5
33	5
34	5
35	6
36	6
37	6
38	6
39	6
40	6
41	6
42	7
43	7
44	8
45	8
46	8
47	8
48	8
49	8
50	8
51	8
52	9
53	9
54	9
55	9
56	10
57	10
58	10
59	10
60	10
61	10
62	10
63	10
64	10
65	10
66	10
67	10
68	10
69	10
70	10
71	11
72	11
73	11
74	11
75	11
76	11
77	11
78	12
79	12
80	12
81	12
82	12
83	12
84	12
85	12
86	12
87	12
88	12
89	12
90	12
91	12
92	13
93	13
94	13
95	13
96	14
97	14
98	14
99	14
100	14
101	15
102	15
103	15
104	16
105	16
106	16
107	17
108	17
109	17
110	17
111	17
112	17
113	18
114	19
115	19
116	19
117	19
118	19
119	19
120	19
121	19
122	19
123	20
124	21
125	22
126	22
127	23
128	24
129	24
130	24
131	24
132	24
133	24
134	25
135	25
136	25
137	26
138	26
139	27
140	28
141	28
142	28
143	28
144	29
145	29
146	29
147	29
148	29
149	29
150	29
151	29
152	30
153	31
154	31
155	31
156	31
157	31
158	31
159	31
160	31
161	31
162	31
163	31
164	31
165	31
166	31
167	31
168	31
169	31
170	31
171	32
172	32
173	33
174	34
175	35
176	35
177	35
178	35
179	36
180	37
181	37
182	37
183	37
184	37
185	37
186	37
187	37
188	37
189	37
190	38
191	39
192	39
193	39
194	39
195	39
196	39
197	39
198	39
199	39
200	39
201	39
202	39
203	39
204	39
205	39
206	39
207	39
208	39
209	39
210	39
211	39
212	39
213	39
214	39
215	39
216	39
217	39
218	40
219	40
220	40
221	41
222	41
223	41
224	41
225	41
226	41
227	41
228	41
229	41
230	41
231	41
232	41
233	41
234	41
235	41
236	41
237	41
238	41
239	42
240	42
241	42
242	43
243	43
244	43
245	43
246	43
247	43
248	43
249	43
250	43
251	43
252	43
253	43
254	43
255	43
256	44
257	44
258	44
259	44
260	44
261	44
262	44
263	44
264	44
265	44
266	44
267	44
268	44
269	44
270	44
271	44
272	44
273	44
274	44
275	44
276	45
277	45
278	45
279	45
280	45
281	45
282	45
283	45
284	45
285	46
286	46
287	46
288	47
289	47
290	48
291	48
292	48
293	48
294	48
295	49
296	49
297	49
298	49
299	49
300	50
301	50
302	50
303	50
304	50
305	51
306	51
307	51
308	51
309	51
310	51
311	51
312	51
313	51
314	51
315	52
316	52
317	52
318	53
319	53
320	54
321	54
322	55
323	55
324	55
325	55
326	55
327	55
328	56
329	57
330	57
331	57
332	57
333	58
334	59
335	59
336	59
337	59
338	59
339	60
340	61
341	61
342	61
343	61
344	61
345	61
346	61
347	62
348	62
349	62
350	63
351	63
352	63
353	63
354	63
355	63
356	63
357	63
358	63
359	63
360	63
361	64
362	64
363	64
364	64
365	64
366	64
367	64
368	64
369	64
370	64
371	64
372	65
373	65
374	65
375	65
376	65
377	65
378	65
379	65
380	65
381	65
382	65
383	65
384	65
385	65
386	66
387	66
388	67
389	67
390	67
391	68
392	68
393	68
394	68
395	68
396	68
397	68
398	68
399	68
400	68
401	68
402	69
403	69
404	69
405	69
406	69
407	69
408	69
409	69
410	69
411	69
412	69
413	69
414	69
415	69
416	70
417	70
418	70
419	70
420	70
421	70
422	70
423	70
424	70
425	70
426	70
427	70
428	70
429	71
430	71
431	71
432	72
433	72
434	72
435	72
436	72
437	72
438	72
439	72
440	72
441	73
442	74
443	74
444	74
445	74
446	74
447	75
448	75
449	75
450	75
451	75
452	76
453	76
454	76
455	76
456	76
457	76
458	76
459	76
460	76
461	76
462	76
463	76
464	76
465	76
466	76
467	76
468	77
469	77
470	77
471	77
472	77
473	77
474	78
475	78
476	78
477	78
478	78
479	78
480	78
481	78
482	78
483	78
484	78
485	78
486	78
487	78
488	78
489	78
490	79
491	79
492	79
493	79
494	79
495	79
496	79
497	79
498	79
499	80
500	80
501	80
502	80
503	80
504	80
505	80
506	80
507	80
508	80
509	80
510	80
511	80
512	80
513	80
514	81
515	81
516	81
517	81
518	81
519	81
520	81
521	81
522	82
523	82
524	82
525	83
526	83
527	83
528	83
529	83
530	83
531	83
532	83
533	84
534	84
535	85
536	85
537	85
538	85
539	85
540	85
541	85
542	85
543	85
544	85
545	85
546	85
547	85
548	85
549	85
550	86
551	86
552	86
553	86
554	86
555	86
556	86
557	86
558	86
559	86
560	87
561	87
562	87
563	87
564	88
565	88
566	88
567	88
568	88
569	89
570	89
571	89
572	89
573	89
574	89
575	89
576	89
577	89
578	89
579	89
580	89
581	89
582	89
583	89
584	89
585	89
586	89
587	89
588	89
589	89
590	89
591	89
592	89
593	89
594	89
595	89
596	89
597	89
598	90
599	90
600	90
601	90
602	90
603	90
604	90
605	90
606	90
607	90
608	90
609	90
610	90
611	90
612	90
613	90
614	90
615	90
616	90
617	91
618	91
619	91
620	92
621	92
622	93
623	93
624	93
625	93
626	94
627	94
628	94
629	94
630	95
631	95
632	95
633	95
634	95
635	95
636	95
637	96
638	96
639	96
640	96
641	96
642	96
643	96
644	96
645	96
646	96
647	96
648	96
649	96
650	96
651	96
652	96
653	97
654	97
655	98
656	98
657	98
658	98
659	99
660	99
661	99
662	99
663	99
664	99
665	99
666	99
667	99
668	99
669	99
670	99
671	99
672	99
673	99
674	99
675	99
676	99
677	99
678	99
679	99
680	99
681	99
682	99
683	99
684	99
685	99
686	99
687	99
688	99
689	99
690	99
691	99
692	100
693	100
694	100
695	100
696	100
697	100
698	101
699	101
700	101
701	101
702	101
703	101
704	101
705	101
706	101
707	101
708	102
709	102
710	102
711	102
712	102
713	102
714	103
715	103
716	103
717	103
718	103
719	103
720	103
721	103
722	103
723	103
724	104
725	104
726	104
727	104
728	104
729	105
730	105
731	105
732	105
733	105
734	105
735	105
736	105
737	105
738	106
739	106
740	106
741	107
742	107
743	107
744	108
745	108
746	108
747	108
748	108
749	108
750	109
751	109
752	109
753	109
754	109
755	109
756	109
757	110
758	110
759	110
760	110
761	111
762	111
763	111
764	111
765	111
766	111
767	111
768	111
769	111
770	111
771	111
772	111
773	112
774	112
775	112
776	112
777	112
778	112
779	113
780	113
781	113
782	113
783	113
784	113
785	114
786	114
787	114
788	114
789	115
790	115
791	115
792	115
793	115
794	115
795	115
796	115
797	116
798	116
799	116
800	116
801	116
802	116
803	117
804	117
805	117
806	117
807	117
808	118
809	118
810	118
811	118
812	118
813	118
814	118
815	118
816	119
817	119
818	119
819	119
820	120
821	120
822	120
823	120
824	120
825	120
826	120
827	120
828	120
829	120
830	120
831	120
832	120
833	120
834	120
835	120
836	121
837	121
838	121
839	121
840	122
841	122
842	122
843	122
844	122
845	122
846	122
847	122
848	122
849	122
850	123
851	123
852	124
853	124
854	124
855	124
856	124
857	124
858	124
859	124
860	124
861	124
862	124
863	124
864	124
865	124
866	124
867	124
868	125
869	125
870	125
871	125
872	125
873	126
874	127
875	127
876	127
877	127
878	127
879	127
880	127
881	127
882	127
883	127
884	127
885	127
886	127
887	127
888	127
889	127
890	127
891	127
892	127
893	128
894	128
895	128
896	129
897	129
898	129
899	129
900	129
901	129
902	129
903	129
904	129
905	129
906	129
907	129
908	129
909	130
910	130
911	130
912	130
913	130
914	130
915	130
916	130
917	131
918	131
919	131
920	131
921	131
922	131
923	131
924	132
925	132
926	132
927	133
928	133
929	133
930	133
931	133
932	133
933	133
934	133
935	133
936	133
937	134
938	135
939	135
940	135
941	135
942	135
943	135
944	135
945	135
946	135
947	135
948	135
949	135
950	135
951	135
952	135
953	135
954	135
955	135
956	135
957	135
958	136
959	136
960	136
961	136
962	136
963	136
964	136
965	136
966	136
967	136
968	136
969	136
970	136
971	136
972	137
973	137
974	137
975	137
976	137
977	137
978	137
979	137
980	137
981	137
982	138
983	138
984	138
985	139
986	139
987	139
988	139
989	139
990	139
991	139
992	139
993	139
994	139
995	139
996	139
997	139
998	139
999	140
1000	140
1001	140
1002	140
1003	140
1004	141
1005	141
1006	142
1007	142
1008	142
1009	143
1010	143
1011	144
1012	144
1013	144
1014	145
1015	145
1016	145
1017	145
1018	145
1019	145
1020	145
1021	145
1022	145
1023	145
1024	145
1025	146
1026	146
1027	146
1028	146
1029	146
1030	146
1031	146
1032	146
1033	146
1034	146
1035	146
1036	146
1037	146
1038	146
1039	146
1040	146
1041	146
1042	146
1043	146
1044	146
1045	146
1046	147
1047	147
1048	147
1049	147
1050	147
1051	147
1052	147
1053	147
1054	147
1055	147
1056	147
1057	147
1058	148
1059	148
1060	148
1061	148
1062	148
1063	149
1064	149
1065	149
1066	149
1067	149
1068	149
1069	149
1070	150
1071	150
1072	150
1073	150
1074	150
1075	150
1076	150
1077	150
1078	150
1079	150
1080	150
1081	150
1082	150
1083	150
1084	150
1085	150
1086	150
1087	150
1088	150
1089	150
1090	150
1091	150
1092	150
1093	150
1094	150
1095	150
1096	150
1097	150
1098	150
1099	150
1100	151
1101	151
1102	152
1103	152
1104	152
1105	152
1106	152
1107	152
1108	152
1109	152
1110	152
1111	152
1112	152
1113	152
1114	153
1115	153
1116	153
1117	154
1118	154
1119	154
1120	154
1121	154
1122	155
1123	155
1124	155
1125	155
1126	155
1127	155
1128	155
1129	155
1130	155
1131	155
1132	155
1133	155
1134	155
1135	156
1136	156
1137	157
1138	157
1139	157
1140	158
1141	158
1142	158
1143	159
1144	159
1145	159
1146	159
1147	159
1148	160
1149	160
1150	160
1151	160
1152	160
1153	161
1154	162
1155	163
1156	163
1157	163
1158	163
1159	163
1160	163
1161	163
1162	163
1163	163
1164	163
1165	164
1166	165
1167	165
1168	166
1169	167
1170	167
1171	167
1172	167
1173	168
1174	168
1175	168
1176	168
1177	169
1178	169
1179	169
1180	169
1181	169
1182	169
1183	169
1184	169
1185	169
1186	169
1187	169
1188	169
1189	169
1190	169
1191	169
1192	169
1193	169
1194	169
1195	169
1196	169
1197	170
1198	170
1199	171
1200	171
1201	171
1202	171
1203	171
1204	171
1205	171
1206	171
1207	171
1208	171
1209	171
1210	171
1211	171
1212	171
1213	171
1214	171
1215	171
1216	171
1217	171
1218	171
1219	171
1220	171
1221	171
1222	171
1223	171
1224	172
1225	172
1226	172
1227	172
1228	172
1229	172
1230	172
1231	172
1232	172
1233	172
1234	172
1235	172
1236	172
1237	173
1238	173
1239	173
1240	173
1241	173
1242	173
1243	173
1244	173
1245	173
1246	174
1247	174
1248	174
1249	174
1250	174
1251	174
1252	175
1253	176
1254	176
1255	176
1256	176
1257	177
1258	177
1259	177
1260	177
1261	177
1262	177
1263	177
1264	178
1265	178
1266	178
1267	179
1268	179
1269	179
1270	179
1271	179
1272	179
1273	180
1274	180
1275	180
1276	180
1277	181
1278	181
1279	181
1280	181
1281	182
1282	182
1283	182
1284	182
1285	182
1286	182
1287	182
1288	182
1289	182
1290	182
1291	182
1292	183
1293	183
1294	183
1295	183
1296	183
1297	184
1298	184
1299	184
1300	185
1301	185
1302	185
1303	185
1304	185
1305	185
1306	185
1307	185
1308	185
1309	186
1310	186
1311	187
1312	187
1313	187
1314	187
1315	187
1316	187
1317	187
1318	187
1319	187
1320	187
1321	187
1322	187
1323	187
1324	187
1325	187
1326	187
1327	187
1328	188
1329	188
1330	188
1331	188
1332	188
1333	188
1334	188
1335	188
1336	188
1337	188
1338	188
1339	188
1340	189
1341	189
1342	190
1343	191
1344	191
1345	191
1346	191
1347	192
1348	192
1349	192
1350	192
1351	192
1352	192
1353	193
1354	193
1355	193
1356	194
1357	194
1358	195
1359	195
1360	195
1361	195
1362	195
1363	195
1364	195
1365	195
1366	195
1367	195
1368	195
1369	195
1370	195
1371	195
1372	195
1373	196
1374	196
1375	196
1376	196
1377	196
1378	196
1379	196
1380	196
1381	196
1382	196
1383	196
1384	196
1385	196
1386	196
1387	196
1388	196
1389	196
1390	196
1391	196
1392	196
1393	196
1394	197
1395	198
1396	198
1397	198
1398	198
1399	198
1400	198
1401	198
1402	198
1403	198
1404	198
1405	198
1406	198
1407	198
1408	198
1409	198
1410	198
1411	198
1412	198
1413	198
1414	198
1415	198
1416	198
1417	198
1418	198
1419	198
1420	198
1421	198
1422	198
1423	198
1424	198
1425	198
1426	198
1427	198
1428	199
1429	199
1430	199
1431	200
1432	200
1433	200
1434	200
1435	200
1436	200
1437	200
1438	200
1439	200
1440	201
1441	202
1442	202
1443	202
1444	202
1445	202
1446	202
1447	202
1448	202
1449	202
1450	203
1451	203
1452	203
1453	204
1454	204
1455	204
1456	204
1457	205
1458	205
1459	205
1460	205
1461	205
1462	206
1463	207
1464	207
1465	207
1466	208
1467	209
1468	209
1469	210
1470	210
1471	210
1472	210
1473	210
1474	210
1475	210
1476	210
1477	210
1478	210
1479	210
1480	210
1481	210
1482	210
1483	210
1484	211
1485	212
1486	212
1487	212
1488	212
1489	212
1490	212
1491	212
1492	212
1493	212
1494	212
1495	212
1496	212
1497	213
1498	213
1499	213
1500	213
1501	213
1502	213
1503	213
1504	213
1505	213
1506	214
1507	214
1508	214
1509	214
1510	214
1511	214
1512	214
1513	214
1514	214
1515	214
1516	215
1517	215
1518	215
1519	215
1520	216
1521	216
1522	216
1523	216
1524	216
1525	216
1526	216
1527	217
1528	217
1529	218
1530	218
1531	218
1532	218
1533	218
1534	219
1535	219
1536	219
1537	219
1538	220
1539	220
1540	220
1541	220
1542	220
1543	220
1544	220
1545	221
1546	221
1547	221
1548	221
1549	221
1550	221
1551	221
1552	221
1553	221
1554	221
1555	221
1556	222
1557	222
1558	222
1559	222
1560	222
1561	222
1562	222
1563	223
1564	223
1565	223
1566	223
1567	223
1568	223
1569	223
1570	224
1571	225
1572	225
1573	225
1574	225
1575	225
1576	225
1577	226
1578	226
1579	226
1580	226
1581	226
1582	226
1583	226
1584	226
1585	226
1586	226
1587	226
1588	226
1589	226
1590	226
1591	226
1592	226
1593	226
1594	227
1595	228
1596	228
1597	228
1598	228
1599	228
1600	228
1601	228
1602	228
1603	228
1604	228
1605	228
1606	229
1607	229
1608	229
1609	229
1610	229
1611	229
1612	229
1613	229
1614	230
1615	230
1616	230
1617	230
1618	230
1619	230
1620	230
1621	230
1622	230
1623	230
1624	230
1625	230
1626	230
1627	230
1628	230
1629	230
1630	230
1631	230
1632	230
1633	230
1634	230
1635	230
1636	230
1637	230
1638	230
1639	230
1640	230
1641	230
1642	230
1643	230
1644	230
1645	230
1646	230
1647	230
1648	230
1649	230
1650	230
1651	231
1652	231
1653	231
1654	232
1655	232
1656	232
1657	232
1658	232
1659	232
1660	232
1661	232
1662	232
1663	232
1664	232
1665	232
1666	232
1667	232
1668	232
1669	232
1670	232
1671	232
1672	233
1673	233
1674	233
1675	233
1676	234
1677	234
1678	234
1679	234
1680	234
1681	234
1682	234
1683	234
1684	234
1685	235
1686	235
1687	235
1688	235
1689	235
1690	236
1691	236
1692	236
1693	236
1694	236
1695	236
1696	236
1697	236
1698	236
1699	236
1700	236
1701	236
1702	236
1703	236
1704	236
1705	236
1706	236
1707	236
1708	236
1709	236
1710	236
1711	237
1712	237
1713	237
1714	237
1715	237
1716	237
1717	237
1718	237
1719	237
1720	237
1721	237
1722	237
1723	237
1724	237
1725	237
1726	237
1727	237
1728	237
1729	237
1730	238
1731	238
1732	238
1733	238
1734	238
1735	238
1736	238
1737	238
1738	238
1739	238
1740	239
1741	240
1742	240
1743	240
1744	241
1745	241
1746	241
1747	241
1748	241
1749	242
1750	242
1751	242
1752	242
1753	242
1754	242
1755	243
1756	244
1757	244
1758	244
1759	244
1760	244
1761	245
1762	245
1763	245
1764	245
1765	245
1766	245
1767	245
1768	245
1769	246
1770	246
1771	246
1772	246
1773	247
1774	247
1775	247
1776	247
1777	247
1778	247
1779	247
1780	247
1781	247
1782	247
1783	247
1784	247
1785	247
1786	247
1787	247
1788	248
1789	248
1790	248
1791	248
1792	248
1793	249
1794	249
1795	249
1796	249
1797	249
1798	249
1799	250
1800	250
1801	250
1802	250
1803	250
1804	250
1805	250
1806	250
1807	250
1808	250
1809	250
1810	250
1811	250
1812	250
1813	250
1814	251
1815	251
1816	252
1817	252
1818	253
1819	253
1820	253
1821	254
1822	255
1823	255
1824	255
1825	255
1826	255
1827	255
1828	255
1829	255
1830	255
1831	255
1832	255
1833	256
1834	256
1835	256
1836	256
1837	256
1838	256
1839	257
1840	257
1841	257
1842	257
1843	257
1844	257
1845	257
1846	257
1847	257
1848	257
1849	257
1850	258
1851	258
1852	258
1853	258
1854	258
1855	259
1856	260
1857	260
1858	260
1859	260
1860	260
1861	260
1862	260
1863	260
1864	260
1865	260
1866	260
1867	260
1868	260
1869	260
1870	260
1871	260
1872	260
1873	260
1874	260
1875	260
1876	261
1877	261
1878	262
1879	262
1880	262
1881	263
1882	263
1883	263
1884	263
1885	263
1886	263
1887	263
1888	263
1889	263
1890	263
1891	263
1892	263
1893	263
1894	263
1895	263
1896	264
1897	264
1898	264
1899	264
1900	264
1901	264
1902	264
1903	264
1904	264
1905	264
1906	265
1907	266
1908	266
1909	266
1910	266
1911	266
1912	267
1913	267
1914	267
1915	267
1916	267
1917	267
1918	267
1919	267
1920	267
1921	267
1922	267
1923	268
1924	268
1925	268
1926	268
1927	268
1928	268
1929	268
1930	268
1931	268
1932	268
1933	268
1934	268
1935	268
1936	268
1937	269
1938	269
1939	269
1940	270
1941	270
1942	270
1943	270
1944	270
1945	270
1946	270
1947	270
1948	270
1949	271
1950	271
1951	271
1952	271
1953	271
1954	271
1955	272
1956	272
1957	272
1958	272
1959	272
1960	273
1961	273
1962	273
1963	273
1964	273
1965	273
1966	273
1967	273
1968	273
1969	273
1970	273
1971	273
1972	273
1973	273
1974	273
1975	273
1976	273
1977	273
1978	273
1979	273
1980	273
1981	273
1982	273
1983	274
1984	275
1985	275
1986	275
1987	275
1988	275
1989	275
1990	275
1991	276
1992	276
1993	276
1994	276
1995	276
1996	276
1997	277
1998	277
1999	277
2000	277
2001	277
2002	277
2003	277
2004	277
2005	277
2006	277
2007	277
2008	277
2009	277
2010	277
2011	277
2012	277
2013	277
2014	277
2015	277
2016	277
2017	277
2018	277
2019	277
2020	278
2021	278
2022	279
2023	279
2024	279
2025	279
2026	280
2027	281
2028	281
2029	281
2030	281
2031	281
2032	282
2033	282
2034	282
2035	282
2036	283
2037	283
2038	283
2039	283
2040	283
2041	283
2042	283
2043	283
2044	283
2045	283
2046	283
2047	283
2048	284
2049	284
2050	284
2051	284
2052	284
2053	284
2054	284
2055	284
2056	284
2057	284
2058	284
2059	284
2060	284
2061	284
2062	284
2063	285
2064	285
2065	285
2066	285
2067	285
2068	285
2069	285
2070	286
2071	286
2072	286
2073	286
2074	286
2075	287
2076	287
2077	287
2078	287
2079	287
2080	287
2081	287
2082	287
2083	287
2084	287
2085	287
2086	287
2087	287
2088	288
2089	288
2090	288
2091	288
2092	288
2093	288
2094	288
2095	288
2096	288
2097	288
2098	288
2099	288
2100	288
2101	289
2102	289
2103	289
2104	289
2105	289
2106	289
2107	289
2108	290
2109	290
2110	290
2111	290
2112	290
2113	290
2114	290
2115	290
2116	290
2117	290
2118	290
2119	290
2120	290
2121	290
2122	290
2123	290
2124	290
2125	290
2126	290
2127	291
2128	291
2129	291
2130	291
2131	291
2132	291
2133	291
2134	291
2135	292
2136	293
2137	293
2138	293
2139	293
2140	293
2141	293
2142	293
2143	293
2144	293
2145	293
2146	293
2147	293
2148	293
2149	293
2150	293
2151	293
2152	293
2153	293
2154	293
2155	293
2156	293
2157	293
2158	293
2159	293
2160	293
2161	293
2162	293
2163	293
2164	293
2165	293
2166	293
2167	294
2168	294
2169	294
2170	294
2171	294
2172	294
2173	294
2174	294
2175	294
2176	294
2177	294
2178	294
2179	295
2180	295
2181	296
2182	296
2183	296
2184	297
2185	297
2186	297
2187	298
2188	299
2189	299
2190	299
2191	299
2192	299
2193	299
2194	300
2195	300
2196	300
2197	300
2198	300
2199	300
2200	301
2201	301
2202	301
2203	301
2204	301
2205	301
2206	301
2207	301
2208	301
2209	301
2210	301
2211	301
2212	301
2213	301
2214	301
2215	302
2216	302
2217	302
2218	302
2219	302
2220	302
2221	302
2222	302
2223	303
2224	303
2225	303
2226	303
2227	303
2228	303
2229	303
2230	304
2231	304
2232	304
2233	304
2234	304
2235	304
2236	304
2237	304
2238	305
2239	305
2240	305
2241	305
2242	305
2243	305
2244	305
2245	305
2246	305
2247	305
2248	305
2249	305
2250	305
2251	306
2252	306
2253	306
2254	307
2255	307
2256	307
2257	307
2258	307
2259	307
2260	308
2261	309
2262	309
2263	310
2264	310
2265	310
2266	310
2267	310
2268	310
2269	310
2270	310
2271	310
2272	310
2273	310
2274	310
2275	311
2276	312
2277	312
2278	312
2279	312
2280	312
