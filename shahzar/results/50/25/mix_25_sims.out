
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_mix <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   cases <- results[!is.na(results$TIME), ]
+   prp <- mean((cases$TYPE != 'E') & (cases$TYPE != '0'))
+     
+   return(c(idc, prp))
+ }
> 
> #########
> ## 25% ##
> #########
> 
> # 5% Cumulative Incidence
> beta_H <- 12
> beta_C <- 0.001
> beta_E <- 0.00011
> params <- c(beta_H, beta_C, beta_E)
> 
> n_sims <- 1000
> i <- 1
> j <- 0
> while (i <= n_sims) {
+     results <- SEIR_mix(params)
+     j <- j + 1
+     cat(paste0(j, '\t', i, '\n'))
+     if (all(metrics(results) > c(0.04, 0.23)) & all(metrics(results) < c(0.06, 0.27))) {
+         write.csv(results, file = paste0('5/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
1	1
2	1
3	2
4	2
5	2
6	2
7	2
8	2
9	3
10	4
11	4
12	5
13	5
14	5
15	5
16	5
17	5
18	6
19	6
20	7
21	8
22	9
23	9
24	9
25	9
26	9
27	10
28	10
29	11
30	11
31	11
32	11
33	12
34	13
35	13
36	13
37	13
38	14
39	14
40	14
41	15
42	16
43	16
44	16
45	16
46	16
47	16
48	16
49	16
50	16
51	17
52	17
53	17
54	17
55	18
56	19
57	19
58	19
59	20
60	20
61	20
62	20
63	20
64	20
65	20
66	20
67	21
68	21
69	21
70	21
71	21
72	21
73	21
74	21
75	21
76	21
77	22
78	23
79	23
80	23
81	24
82	24
83	24
84	24
85	24
86	24
87	24
88	24
89	24
90	24
91	24
92	24
93	24
94	24
95	24
96	25
97	25
98	26
99	26
100	27
101	27
102	28
103	28
104	28
105	28
106	28
107	29
108	29
109	29
110	29
111	29
112	29
113	29
114	29
115	29
116	29
117	29
118	29
119	29
120	29
121	29
122	30
123	31
124	31
125	31
126	31
127	31
128	31
129	31
130	31
131	31
132	31
133	31
134	31
135	31
136	31
137	31
138	31
139	31
140	31
141	31
142	31
143	31
144	32
145	32
146	32
147	32
148	32
149	32
150	32
151	32
152	33
153	34
154	34
155	34
156	34
157	34
158	34
159	34
160	34
161	34
162	34
163	34
164	34
165	34
166	34
167	34
168	34
169	34
170	34
171	34
172	34
173	35
174	35
175	35
176	35
177	35
178	36
179	36
180	37
181	37
182	37
183	37
184	38
185	38
186	39
187	39
188	39
189	39
190	39
191	39
192	39
193	39
194	39
195	39
196	39
197	39
198	39
199	39
200	39
201	39
202	40
203	40
204	41
205	42
206	42
207	42
208	42
209	42
210	42
211	42
212	42
213	42
214	42
215	42
216	43
217	43
218	43
219	43
220	44
221	44
222	45
223	46
224	46
225	47
226	47
227	47
228	47
229	47
230	47
231	47
232	47
233	47
234	47
235	47
236	47
237	47
238	47
239	47
240	47
241	48
242	48
243	49
244	49
245	49
246	49
247	49
248	49
249	49
250	49
251	49
252	49
253	49
254	50
255	50
256	50
257	50
258	50
259	50
260	50
261	50
262	50
263	50
264	50
265	50
266	51
267	51
268	51
269	51
270	51
271	51
272	51
273	52
274	52
275	52
276	52
277	52
278	52
279	52
280	52
281	52
282	52
283	52
284	53
285	53
286	54
287	54
288	54
289	54
290	55
291	55
292	56
293	56
294	56
295	56
296	56
297	56
298	56
299	56
300	56
301	56
302	56
303	57
304	57
305	58
306	58
307	58
308	58
309	58
310	58
311	58
312	58
313	58
314	58
315	58
316	59
317	59
318	60
319	60
320	60
321	60
322	60
323	60
324	60
325	60
326	60
327	60
328	61
329	61
330	61
331	61
332	61
333	61
334	61
335	61
336	61
337	61
338	61
339	61
340	62
341	63
342	63
343	63
344	63
345	63
346	63
347	63
348	63
349	63
350	63
351	63
352	63
353	63
354	63
355	64
356	64
357	64
358	64
359	64
360	64
361	64
362	64
363	64
364	64
365	64
366	64
367	64
368	64
369	64
370	64
371	64
372	64
373	64
374	64
375	64
376	64
377	64
378	64
379	64
380	64
381	64
382	64
383	65
384	66
385	66
386	66
387	66
388	66
389	66
390	66
391	66
392	66
393	66
394	66
395	66
396	66
397	66
398	66
399	66
400	66
401	66
402	66
403	66
404	66
405	66
406	66
407	67
408	67
409	67
410	67
411	67
412	68
413	68
414	68
415	69
416	69
417	69
418	69
419	69
420	69
421	69
422	69
423	69
424	69
425	69
426	70
427	70
428	70
429	70
430	71
431	71
432	71
433	71
434	71
435	71
436	72
437	72
438	72
439	72
440	73
441	74
442	74
443	74
444	74
445	74
446	74
447	74
448	74
449	74
450	75
451	76
452	77
453	78
454	78
455	78
456	78
457	78
458	79
459	79
460	79
461	79
462	79
463	80
464	80
465	80
466	81
467	81
468	81
469	81
470	81
471	81
472	81
473	81
474	82
475	82
476	82
477	82
478	83
479	83
480	83
481	83
482	83
483	83
484	84
485	85
486	86
487	87
488	87
489	87
490	87
491	87
492	87
493	87
494	87
495	87
496	88
497	88
498	88
499	89
500	89
501	89
502	89
503	89
504	89
505	90
506	90
507	90
508	91
509	91
510	91
511	91
512	91
513	91
514	92
515	92
516	92
517	92
518	93
519	94
520	94
521	94
522	94
523	94
524	94
525	94
526	94
527	94
528	95
529	95
530	95
531	95
532	95
533	95
534	95
535	96
536	97
537	98
538	99
539	99
540	99
541	99
542	99
543	100
544	101
545	101
546	101
547	102
548	102
549	102
550	102
551	102
552	103
553	103
554	104
555	104
556	104
557	104
558	104
559	105
560	106
561	106
562	106
563	106
564	106
565	106
566	106
567	106
568	106
569	106
570	106
571	106
572	107
573	107
574	108
575	108
576	108
577	108
578	108
579	108
580	108
581	108
582	108
583	108
584	108
585	109
586	109
587	109
588	109
589	109
590	109
591	109
592	109
593	109
594	109
595	109
596	110
597	110
598	110
599	110
600	110
601	110
602	110
603	110
604	110
605	110
606	110
607	110
608	110
609	111
610	111
611	111
612	111
613	111
614	111
615	111
616	111
617	112
618	112
619	112
620	112
621	112
622	112
623	112
624	112
625	112
626	112
627	112
628	112
629	113
630	114
631	114
632	114
633	114
634	114
635	114
636	114
637	114
638	114
639	114
640	115
641	115
642	115
643	115
644	115
645	115
646	115
647	115
648	115
649	115
650	115
651	115
652	115
653	115
654	115
655	115
656	116
657	116
658	116
659	116
660	116
661	116
662	116
663	116
664	116
665	116
666	116
667	117
668	117
669	118
670	118
671	118
672	119
673	120
674	120
675	120
676	120
677	120
678	120
679	120
680	120
681	120
682	120
683	120
684	120
685	120
686	120
687	120
688	120
689	120
690	120
691	120
692	120
693	120
694	120
695	120
696	120
697	120
698	120
699	120
700	121
701	121
702	121
703	121
704	121
705	121
706	121
707	121
708	121
709	121
710	121
711	121
712	121
713	121
714	122
715	122
716	122
717	122
718	122
719	122
720	122
721	122
722	122
723	122
724	122
725	122
726	122
727	122
728	122
729	123
730	123
731	123
732	123
733	123
734	123
735	123
736	123
737	123
738	123
739	123
740	123
741	124
742	124
743	125
744	125
745	125
746	125
747	125
748	126
749	126
750	127
751	128
752	128
753	128
754	129
755	130
756	130
757	130
758	130
759	130
760	130
761	131
762	131
763	131
764	131
765	131
766	131
767	131
768	131
769	132
770	132
771	132
772	132
773	132
774	132
775	132
776	133
777	133
778	133
779	134
780	135
781	135
782	136
783	137
784	137
785	138
786	138
787	138
788	138
789	139
790	139
791	139
792	139
793	139
794	139
795	140
796	140
797	140
798	140
799	140
800	140
801	140
802	141
803	141
804	141
805	141
806	141
807	141
808	141
809	142
810	142
811	142
812	142
813	142
814	142
815	142
816	142
817	142
818	143
819	143
820	144
821	144
822	144
823	144
824	144
825	144
826	144
827	144
828	144
829	144
830	144
831	144
832	145
833	146
834	146
835	146
836	146
837	146
838	146
839	146
840	146
841	146
842	146
843	146
844	146
845	146
846	146
847	147
848	147
849	147
850	148
851	148
852	148
853	148
854	148
855	149
856	149
857	150
858	150
859	150
860	151
861	151
862	151
863	152
864	152
865	153
866	153
867	153
868	153
869	153
870	153
871	153
872	153
873	153
874	153
875	153
876	153
877	153
878	153
879	153
880	153
881	153
882	153
883	153
884	154
885	154
886	155
887	156
888	156
889	157
890	157
891	158
892	158
893	158
894	158
895	159
896	159
897	159
898	159
899	159
900	159
901	160
902	161
903	162
904	163
905	163
906	163
907	163
908	163
909	163
910	163
911	163
912	163
913	163
914	163
915	163
916	163
917	163
918	164
919	164
920	164
921	164
922	164
923	164
924	164
925	164
926	164
927	164
928	164
929	164
930	164
931	164
932	164
933	164
934	164
935	164
936	164
937	165
938	166
939	166
940	166
941	166
942	166
943	166
944	166
945	166
946	166
947	166
948	166
949	166
950	167
951	167
952	167
953	167
954	167
955	167
956	167
957	167
958	167
959	167
960	167
961	167
962	167
963	167
964	167
965	167
966	167
967	167
968	167
969	167
970	167
971	167
972	167
973	167
974	167
975	167
976	167
977	167
978	168
979	168
980	168
981	168
982	168
983	168
984	168
985	168
986	168
987	169
988	169
989	170
990	171
991	171
992	171
993	171
994	171
995	171
996	171
997	171
998	171
999	171
1000	172
1001	172
1002	173
1003	173
1004	174
1005	174
1006	175
1007	175
1008	175
1009	175
1010	175
1011	175
1012	175
1013	175
1014	175
1015	176
1016	177
1017	177
1018	177
1019	177
1020	177
1021	177
1022	177
1023	177
1024	177
1025	177
1026	177
1027	177
1028	177
1029	178
1030	178
1031	179
1032	179
1033	179
1034	180
1035	181
1036	181
1037	181
1038	181
1039	181
1040	181
1041	181
1042	181
1043	182
1044	183
1045	183
1046	183
1047	183
1048	183
1049	183
1050	184
1051	184
1052	184
1053	184
1054	184
1055	184
1056	184
1057	184
1058	184
1059	184
1060	184
1061	185
1062	186
1063	186
1064	186
1065	186
1066	187
1067	187
1068	187
1069	187
1070	187
1071	187
1072	187
1073	188
1074	189
1075	189
1076	189
1077	189
1078	189
1079	189
1080	189
1081	189
1082	189
1083	189
1084	189
1085	189
1086	189
1087	189
1088	190
1089	190
1090	190
1091	190
1092	190
1093	190
1094	190
1095	191
1096	191
1097	191
1098	191
1099	191
1100	191
1101	191
1102	192
1103	193
1104	193
1105	193
1106	193
1107	193
1108	193
1109	194
1110	194
1111	194
1112	194
1113	194
1114	194
1115	194
1116	194
1117	195
1118	195
1119	196
1120	196
1121	196
1122	197
1123	198
1124	198
1125	198
1126	198
1127	198
1128	198
1129	198
1130	198
1131	198
1132	198
1133	198
1134	198
1135	198
1136	198
1137	198
1138	198
1139	198
1140	198
1141	199
1142	199
1143	200
1144	200
1145	200
1146	200
1147	200
1148	200
1149	200
1150	200
1151	200
1152	200
1153	200
1154	200
1155	200
1156	201
1157	201
1158	202
1159	202
1160	202
1161	202
1162	203
1163	203
1164	204
1165	204
1166	204
1167	204
1168	204
1169	205
1170	205
1171	205
1172	205
1173	205
1174	206
1175	206
1176	206
1177	206
1178	206
1179	206
1180	206
1181	207
1182	207
1183	207
1184	207
1185	207
1186	207
1187	208
1188	208
1189	208
1190	208
1191	208
1192	209
1193	210
1194	210
1195	210
1196	210
1197	210
1198	210
1199	210
1200	210
1201	210
1202	211
1203	211
1204	211
1205	211
1206	211
1207	211
1208	211
1209	212
1210	212
1211	212
1212	212
1213	212
1214	212
1215	213
1216	213
1217	213
1218	214
1219	214
1220	214
1221	214
1222	214
1223	214
1224	214
1225	214
1226	214
1227	215
1228	215
1229	215
1230	215
1231	215
1232	215
1233	216
1234	216
1235	216
1236	216
1237	216
1238	216
1239	216
1240	216
1241	216
1242	216
1243	216
1244	216
1245	216
1246	216
1247	217
1248	217
1249	218
1250	218
1251	218
1252	218
1253	218
1254	219
1255	220
1256	221
1257	221
1258	222
1259	222
1260	222
1261	222
1262	222
1263	222
1264	222
1265	222
1266	222
1267	222
1268	222
1269	222
1270	222
1271	222
1272	222
1273	222
1274	223
1275	223
1276	224
1277	224
1278	224
1279	224
1280	225
1281	225
1282	225
1283	225
1284	225
1285	225
1286	226
1287	227
1288	227
1289	227
1290	227
1291	227
1292	228
1293	228
1294	229
1295	229
1296	229
1297	229
1298	229
1299	229
1300	229
1301	229
1302	229
1303	230
1304	230
1305	230
1306	230
1307	230
1308	230
1309	230
1310	230
1311	230
1312	231
1313	231
1314	231
1315	231
1316	232
1317	233
1318	233
1319	233
1320	233
1321	233
1322	234
1323	234
1324	235
1325	235
1326	235
1327	235
1328	235
1329	235
1330	235
1331	235
1332	235
1333	235
1334	235
1335	235
1336	235
1337	235
1338	236
1339	237
1340	237
1341	237
1342	238
1343	239
1344	239
1345	239
1346	239
1347	239
1348	239
1349	239
1350	239
1351	239
1352	240
1353	240
1354	240
1355	241
1356	242
1357	242
1358	242
1359	242
1360	242
1361	242
1362	243
1363	243
1364	243
1365	243
1366	243
1367	244
1368	245
1369	245
1370	245
1371	245
1372	246
1373	246
1374	246
1375	246
1376	246
1377	246
1378	247
1379	247
1380	247
1381	248
1382	248
1383	248
1384	248
1385	249
1386	249
1387	249
1388	249
1389	250
1390	251
1391	251
1392	251
1393	251
1394	251
1395	251
1396	252
1397	253
1398	254
1399	254
1400	254
1401	254
1402	254
1403	254
1404	254
1405	254
1406	254
1407	254
1408	254
1409	254
1410	254
1411	254
1412	254
1413	254
1414	254
1415	254
1416	254
1417	254
1418	254
1419	254
1420	254
1421	254
1422	254
1423	254
1424	254
1425	254
1426	255
1427	255
1428	255
1429	256
1430	256
1431	256
1432	256
1433	256
1434	257
1435	257
1436	257
1437	257
1438	257
1439	257
1440	258
1441	258
1442	258
1443	258
1444	258
1445	258
1446	259
1447	259
1448	259
1449	259
1450	259
1451	259
1452	259
1453	259
1454	260
1455	261
1456	262
1457	262
1458	262
1459	262
1460	262
1461	262
1462	262
1463	262
1464	262
1465	263
1466	263
1467	263
1468	263
1469	263
1470	263
1471	263
1472	263
1473	263
1474	264
1475	265
1476	266
1477	266
1478	266
1479	266
1480	266
1481	266
1482	266
1483	266
1484	266
1485	266
1486	266
1487	266
1488	266
1489	266
1490	266
1491	266
1492	266
1493	266
1494	266
1495	266
1496	266
1497	266
1498	266
1499	266
1500	266
1501	266
1502	266
1503	266
1504	266
1505	267
1506	267
1507	267
1508	267
1509	268
1510	268
1511	269
1512	269
1513	270
1514	271
1515	271
1516	271
1517	271
1518	271
1519	271
1520	271
1521	271
1522	271
1523	271
1524	271
1525	271
1526	271
1527	272
1528	272
1529	272
1530	272
1531	272
1532	272
1533	272
1534	272
1535	272
1536	272
1537	272
1538	272
1539	272
1540	272
1541	272
1542	272
1543	272
1544	273
1545	273
1546	273
1547	273
1548	273
1549	273
1550	273
1551	273
1552	273
1553	273
1554	274
1555	274
1556	275
1557	275
1558	275
1559	275
1560	275
1561	275
1562	275
1563	275
1564	275
1565	275
1566	275
1567	275
1568	276
1569	276
1570	277
1571	277
1572	277
1573	277
1574	277
1575	278
1576	278
1577	278
1578	279
1579	279
1580	279
1581	279
1582	279
1583	279
1584	279
1585	279
1586	280
1587	280
1588	280
1589	280
1590	281
1591	281
1592	281
1593	281
1594	281
1595	281
1596	282
1597	282
1598	282
1599	282
1600	282
1601	282
1602	282
1603	282
1604	282
1605	282
1606	283
1607	284
1608	284
1609	284
1610	284
1611	284
1612	284
1613	284
1614	284
1615	284
1616	285
1617	286
1618	287
1619	288
1620	288
1621	288
1622	288
1623	288
1624	288
1625	288
1626	288
1627	289
1628	289
1629	289
1630	289
1631	289
1632	289
1633	289
1634	289
1635	289
1636	289
1637	290
1638	291
1639	291
1640	291
1641	291
1642	291
1643	291
1644	292
1645	292
1646	292
1647	292
1648	292
1649	292
1650	293
1651	293
1652	293
1653	293
1654	293
1655	293
1656	293
1657	293
1658	293
1659	293
1660	294
1661	295
1662	295
1663	295
1664	296
1665	296
1666	297
1667	297
1668	297
1669	297
1670	297
1671	297
1672	297
1673	297
1674	298
1675	299
1676	300
1677	301
1678	301
1679	301
1680	301
1681	301
1682	301
1683	301
1684	301
1685	301
1686	301
1687	301
1688	302
1689	302
1690	302
1691	303
1692	304
1693	304
1694	305
1695	306
1696	306
1697	307
1698	308
1699	308
1700	309
1701	309
1702	310
1703	310
1704	310
1705	310
1706	310
1707	310
1708	311
1709	311
1710	311
1711	311
1712	311
1713	311
1714	311
1715	311
1716	311
1717	311
1718	311
1719	311
1720	311
1721	311
1722	311
1723	311
1724	312
1725	312
1726	312
1727	312
1728	312
1729	312
1730	312
1731	312
1732	312
1733	312
1734	312
1735	312
1736	312
1737	312
1738	313
1739	313
1740	313
1741	313
1742	313
1743	314
1744	315
1745	316
1746	316
1747	316
1748	316
1749	316
1750	316
1751	316
1752	316
1753	316
1754	316
1755	316
