
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_p2p <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+       
+       # Label infection types.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(c(idc))
+ }
> 
> # 10% Cumulative Incidence
> beta_H <- 52.7
> beta_C <- 0.099
> params <- c(beta_H, beta_C)
> 
> n_sims <- 1000
> i <- 1
> j <- 0
> while (i <= n_sims) {
+     results <- SEIR_p2p(params)
+     j <- j + 1
+     cat(paste0(j, '\t', i, '\n'))
+     if (metrics(results) > 0.09 & metrics(results) < 0.11) {
+         write.csv(results, file = paste0('10/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
1	1
2	1
3	1
4	1
5	1
6	1
7	1
8	1
9	1
10	2
11	2
12	2
13	2
14	2
15	2
16	2
17	2
18	2
19	2
20	2
21	2
22	2
23	2
24	2
25	2
26	2
27	2
28	2
29	2
30	2
31	3
32	3
33	3
34	3
35	3
36	3
37	3
38	3
39	3
40	3
41	3
42	3
43	3
44	3
45	3
46	3
47	3
48	3
49	3
50	3
51	3
52	3
53	3
54	3
55	3
56	3
57	3
58	3
59	3
60	3
61	3
62	3
63	3
64	3
65	3
66	3
67	3
68	3
69	3
70	3
71	3
72	3
73	3
74	3
75	3
76	3
77	3
78	3
79	3
80	3
81	3
82	3
83	3
84	3
85	4
86	4
87	4
88	4
89	4
90	4
91	4
92	4
93	4
94	4
95	4
96	4
97	4
98	4
99	4
100	4
101	4
102	4
103	4
104	4
105	4
106	4
107	4
108	4
109	4
110	4
111	4
112	4
113	4
114	4
115	4
116	4
117	4
118	5
119	5
120	5
121	5
122	5
123	5
124	5
125	5
126	6
127	6
128	6
129	6
130	6
131	7
132	7
133	7
134	7
135	7
136	7
137	7
138	7
139	7
140	7
141	7
142	7
143	7
144	8
145	8
146	8
147	8
148	8
149	8
150	8
151	9
152	9
153	9
154	9
155	9
156	9
157	9
158	9
159	9
160	9
161	9
162	9
163	9
164	10
165	10
166	10
167	10
168	11
169	11
170	11
171	11
172	11
173	11
174	11
175	11
176	11
177	11
178	11
179	11
180	11
181	11
182	11
183	11
184	11
185	11
186	11
187	11
188	11
189	11
190	11
191	11
192	11
193	11
194	11
195	12
196	12
197	12
198	12
199	12
200	12
201	12
202	12
203	12
204	12
205	12
206	12
207	12
208	12
209	12
210	12
211	12
212	12
213	12
214	12
215	12
216	12
217	12
218	12
219	12
220	13
221	13
222	13
223	13
224	13
225	13
226	13
227	13
228	13
229	13
230	13
231	13
232	13
233	14
234	14
235	14
236	14
237	14
238	14
239	14
240	14
241	14
242	14
243	14
244	14
245	14
246	14
247	14
248	14
249	14
250	14
251	14
252	14
253	14
254	14
255	14
256	14
257	14
258	14
259	14
260	14
261	14
262	14
263	14
264	14
265	14
266	14
267	15
268	16
269	16
270	16
271	16
272	16
273	16
274	16
275	16
276	16
277	16
278	16
279	16
280	17
281	17
282	17
283	17
284	17
285	17
286	17
287	17
288	17
289	17
290	17
291	17
292	17
293	17
294	17
295	17
296	17
297	17
298	17
299	17
300	17
301	17
302	17
303	17
304	17
305	17
306	17
307	17
308	17
309	17
310	17
311	17
312	17
313	17
314	17
315	17
316	17
317	17
318	17
319	17
320	17
321	17
322	17
323	17
324	17
325	17
326	17
327	17
328	18
329	18
330	18
331	18
332	18
333	18
334	18
335	18
336	19
337	19
338	19
339	19
340	19
341	19
342	19
343	19
344	19
345	19
346	19
347	20
348	20
349	20
350	20
351	20
352	20
353	20
354	20
355	20
356	20
357	20
358	20
359	20
360	20
361	20
362	20
363	20
364	20
365	20
366	20
367	20
368	21
369	21
370	21
371	21
372	21
373	21
374	21
375	21
376	21
377	21
378	21
379	21
380	21
381	21
382	21
383	21
384	21
385	21
386	21
387	21
388	21
389	21
390	21
391	21
392	21
393	21
394	21
395	21
396	21
397	21
398	21
399	21
400	21
401	21
402	21
403	21
404	21
405	22
406	22
407	22
408	22
409	22
410	22
411	22
412	22
413	22
414	22
415	22
416	22
417	22
418	22
419	22
420	22
421	22
422	22
423	22
424	22
425	22
426	22
427	22
428	22
429	22
430	22
431	22
432	22
433	22
434	22
435	22
436	22
437	22
438	22
439	22
440	22
441	23
442	23
443	23
444	23
445	23
446	23
447	23
448	23
449	23
450	23
451	23
452	23
453	23
454	24
455	24
456	24
457	24
458	24
459	24
460	24
461	24
462	24
463	24
464	24
465	24
466	24
467	24
468	24
469	24
470	24
471	24
472	24
473	24
474	24
475	24
476	24
477	24
478	24
479	24
480	24
481	24
482	24
483	24
484	24
485	24
486	24
487	24
488	24
489	24
490	24
491	25
492	25
493	25
494	25
495	25
496	25
497	25
498	25
499	25
500	25
501	25
502	25
503	25
504	25
505	25
506	25
507	25
508	25
509	25
510	25
511	25
512	25
513	25
514	25
515	25
516	25
517	25
518	25
519	25
520	25
521	25
522	25
523	25
524	25
525	25
526	25
527	25
528	25
529	25
530	25
531	26
532	26
533	26
534	26
535	27
536	27
537	27
538	27
539	27
540	27
541	27
542	27
543	27
544	27
545	27
546	27
547	27
548	28
549	28
550	28
551	28
552	28
553	28
554	28
555	28
556	28
557	28
558	28
559	29
560	29
561	29
562	29
563	29
564	29
565	29
566	29
567	29
568	29
569	29
570	29
571	30
572	30
573	30
574	30
575	30
576	30
577	30
578	30
579	30
580	30
581	30
582	30
583	30
584	30
585	30
586	31
587	31
588	31
589	31
590	31
591	31
592	31
593	31
594	31
595	31
596	31
597	31
598	31
599	31
600	31
601	31
602	31
603	32
604	32
605	32
606	32
607	32
608	32
609	32
610	32
611	32
612	32
613	32
614	32
615	32
616	32
617	32
618	32
619	32
620	32
621	32
622	32
623	32
624	32
625	32
626	32
627	32
628	32
629	32
630	32
631	32
632	32
633	32
634	32
635	32
636	32
637	32
638	32
639	32
640	32
641	32
642	32
643	32
644	32
645	32
646	32
647	32
648	32
649	32
650	32
651	32
652	32
653	32
654	32
655	32
656	32
657	32
658	32
659	32
660	32
661	32
662	32
663	32
664	32
665	32
666	32
667	32
668	32
669	33
670	33
671	33
672	33
673	33
674	33
675	34
676	34
677	34
678	34
679	34
680	34
681	34
682	34
683	34
684	34
685	34
686	34
687	34
688	34
689	34
690	34
691	35
692	35
693	35
694	35
695	35
696	35
697	35
698	35
699	36
700	36
701	36
702	37
703	38
704	38
705	38
706	38
707	38
708	38
709	38
710	38
711	38
712	38
713	38
714	38
715	38
716	38
717	38
718	38
719	38
720	38
721	38
722	38
723	38
724	38
725	38
726	38
727	38
728	38
729	38
730	38
731	38
732	38
733	38
734	38
735	38
736	38
737	38
738	38
739	38
740	38
741	38
742	38
743	39
744	39
745	39
746	39
747	39
748	39
749	39
750	39
751	39
752	39
753	39
754	39
755	39
756	39
757	39
758	39
759	39
760	39
761	39
762	39
763	39
764	39
765	39
766	39
767	39
768	39
769	39
770	39
771	39
772	39
773	39
774	39
775	40
776	40
777	40
778	40
779	40
780	40
781	41
782	41
783	41
784	41
785	41
786	41
787	41
788	41
789	41
790	41
791	41
792	41
793	41
794	41
795	41
796	41
797	41
798	41
799	41
800	41
801	41
802	41
803	41
804	41
805	41
806	41
807	41
808	41
809	41
810	41
811	41
812	41
813	41
814	41
815	41
816	41
817	41
818	41
819	41
820	41
821	41
822	41
823	41
824	41
825	41
826	41
827	41
828	41
829	41
830	41
831	41
832	41
833	41
834	41
835	41
836	41
837	41
838	41
839	41
840	41
841	41
842	41
843	41
844	41
845	42
846	42
847	42
848	42
849	42
850	42
851	42
852	42
853	42
854	42
855	42
856	42
857	42
858	42
859	42
860	42
861	42
862	42
863	42
864	42
865	42
866	42
867	42
868	43
869	43
870	43
871	43
872	43
873	43
874	43
875	43
876	43
877	43
878	43
879	43
880	43
881	43
882	43
883	43
884	43
885	43
886	43
887	43
888	43
889	43
890	43
891	43
892	44
893	44
894	44
895	44
896	44
897	45
898	45
899	45
900	45
901	45
902	45
903	45
904	45
905	45
906	45
907	45
908	45
909	45
910	45
911	45
912	45
913	45
914	45
915	45
916	45
917	45
918	45
919	45
920	45
921	45
922	45
923	45
924	45
925	45
926	45
927	45
928	46
929	46
930	46
931	47
932	47
933	47
934	47
935	47
936	47
937	47
938	47
939	47
940	47
941	47
942	47
943	47
944	47
945	47
946	47
947	47
948	47
949	47
950	47
951	47
952	47
953	47
954	47
955	47
956	47
957	47
958	47
959	47
960	47
961	48
962	48
963	48
964	48
965	48
966	48
967	48
968	48
969	48
970	49
971	49
972	49
973	49
974	49
975	49
976	49
977	49
978	49
979	49
980	50
981	50
982	50
983	50
984	50
985	50
986	50
987	50
988	50
989	51
990	51
991	52
992	52
993	52
994	52
995	52
996	52
997	52
998	52
999	52
1000	52
1001	52
1002	52
1003	52
1004	52
1005	52
1006	52
1007	52
1008	52
1009	52
1010	52
1011	52
1012	52
1013	52
1014	52
1015	52
1016	52
1017	52
1018	52
1019	52
1020	52
1021	52
1022	52
1023	52
1024	52
1025	52
1026	52
1027	52
1028	52
1029	52
1030	52
1031	52
1032	52
1033	52
1034	52
1035	52
1036	52
1037	52
1038	52
1039	52
1040	52
1041	52
1042	52
1043	52
1044	52
1045	52
1046	52
1047	52
1048	52
1049	53
1050	53
1051	53
1052	53
1053	53
1054	53
1055	53
1056	53
1057	53
1058	53
1059	53
1060	53
1061	53
1062	53
1063	54
1064	54
1065	54
1066	54
1067	54
1068	55
1069	55
1070	55
1071	55
1072	55
1073	55
1074	55
1075	55
1076	55
1077	55
1078	56
1079	56
1080	56
1081	56
1082	56
1083	56
1084	56
1085	56
1086	56
1087	57
1088	57
1089	57
1090	57
1091	57
1092	57
1093	57
1094	57
1095	57
1096	57
1097	57
1098	57
1099	57
1100	57
1101	57
1102	57
1103	57
1104	57
1105	57
1106	57
1107	57
1108	57
1109	57
1110	57
1111	57
1112	57
1113	57
1114	57
1115	57
1116	57
1117	57
1118	57
1119	57
1120	57
1121	57
1122	57
1123	57
1124	57
1125	57
1126	57
1127	57
1128	57
1129	57
1130	57
1131	57
1132	57
1133	57
1134	57
1135	57
1136	57
1137	57
1138	57
1139	57
1140	57
1141	57
1142	57
1143	57
1144	57
1145	57
1146	57
1147	57
1148	57
1149	57
1150	57
1151	57
1152	57
1153	57
1154	57
1155	57
1156	57
1157	57
1158	57
1159	57
1160	57
1161	57
1162	57
1163	57
1164	57
1165	57
1166	57
1167	57
1168	58
1169	58
1170	58
1171	58
1172	58
1173	58
1174	58
1175	58
1176	58
1177	58
1178	58
1179	58
1180	58
1181	58
1182	58
1183	58
1184	58
1185	58
1186	58
1187	58
1188	58
1189	58
1190	58
1191	59
1192	59
1193	59
1194	59
1195	59
1196	59
1197	59
1198	59
1199	59
1200	59
1201	59
1202	59
1203	59
1204	59
1205	59
1206	59
1207	59
1208	59
1209	59
1210	59
1211	59
1212	59
1213	59
1214	59
1215	59
1216	59
1217	59
1218	59
1219	59
1220	59
1221	59
1222	59
1223	59
1224	59
1225	59
1226	59
1227	59
1228	59
1229	59
1230	59
1231	59
1232	59
1233	59
1234	59
1235	59
1236	59
1237	59
1238	59
1239	59
1240	59
1241	59
1242	59
1243	59
1244	59
1245	59
1246	59
1247	59
1248	59
1249	59
1250	59
1251	59
1252	59
1253	59
1254	59
1255	59
1256	59
1257	59
1258	59
1259	59
1260	59
1261	59
1262	59
1263	59
1264	59
1265	59
1266	59
1267	59
1268	59
1269	59
1270	59
1271	59
1272	59
1273	59
1274	59
1275	59
1276	60
1277	60
1278	61
1279	61
1280	61
1281	61
1282	61
1283	61
1284	61
1285	61
1286	61
1287	61
1288	61
1289	61
1290	61
1291	61
1292	61
1293	61
1294	61
1295	61
1296	62
1297	62
1298	62
1299	62
1300	62
1301	62
1302	62
1303	62
1304	62
1305	62
1306	62
1307	62
1308	62
1309	62
1310	62
1311	62
1312	62
1313	62
1314	62
1315	62
1316	62
1317	62
1318	62
1319	62
1320	62
1321	62
1322	62
1323	62
1324	62
1325	62
1326	62
1327	62
1328	62
1329	62
1330	62
1331	62
1332	62
1333	62
1334	62
1335	62
1336	62
1337	62
1338	62
1339	62
1340	62
1341	62
1342	62
1343	62
1344	62
1345	62
1346	62
1347	62
1348	62
1349	62
1350	62
1351	62
1352	63
1353	63
1354	63
1355	63
1356	63
1357	63
1358	63
1359	63
1360	63
1361	63
1362	63
1363	63
1364	63
1365	63
1366	63
1367	63
1368	63
1369	63
1370	63
1371	63
1372	63
1373	64
1374	64
1375	64
1376	64
1377	64
1378	64
1379	64
1380	65
1381	65
1382	65
1383	66
1384	66
1385	66
1386	66
1387	66
1388	66
1389	67
1390	68
1391	68
1392	68
1393	68
1394	69
1395	69
1396	69
1397	69
1398	69
1399	69
1400	69
1401	69
1402	69
1403	69
1404	69
1405	69
1406	69
1407	69
1408	69
1409	69
1410	69
1411	69
1412	69
1413	70
1414	70
1415	70
1416	70
1417	70
1418	70
1419	70
1420	70
1421	70
1422	70
1423	70
1424	70
1425	70
1426	70
1427	70
1428	70
1429	71
1430	71
1431	71
1432	71
1433	71
1434	71
1435	72
1436	72
1437	72
1438	72
1439	72
1440	72
1441	72
1442	72
1443	72
1444	72
1445	72
1446	72
1447	72
1448	72
1449	72
1450	72
1451	72
1452	72
1453	72
1454	72
1455	72
1456	72
1457	72
1458	72
1459	72
1460	72
1461	72
1462	72
1463	72
1464	72
1465	72
1466	72
1467	72
1468	72
1469	72
1470	72
1471	72
1472	72
1473	72
1474	72
1475	72
1476	72
1477	72
1478	72
1479	72
1480	72
1481	72
1482	72
1483	72
1484	72
1485	73
1486	73
1487	73
1488	73
1489	73
1490	73
1491	73
1492	73
1493	73
1494	73
1495	73
1496	73
1497	74
1498	74
1499	74
1500	74
1501	74
1502	74
1503	74
1504	74
1505	74
1506	74
1507	74
1508	74
1509	74
1510	74
1511	74
1512	74
1513	74
1514	74
1515	74
1516	74
1517	74
1518	74
1519	74
1520	74
1521	74
1522	74
1523	74
1524	74
1525	74
1526	74
1527	74
1528	74
1529	74
1530	74
1531	74
1532	74
1533	74
1534	74
1535	74
1536	74
1537	74
1538	74
1539	74
1540	74
1541	74
1542	74
1543	74
1544	74
1545	74
1546	74
1547	74
1548	74
1549	74
1550	74
1551	74
1552	74
1553	74
1554	74
1555	74
1556	74
1557	74
1558	74
1559	75
1560	75
1561	75
1562	75
1563	75
1564	75
1565	75
1566	76
1567	77
1568	77
1569	77
1570	77
1571	77
1572	77
1573	77
1574	77
1575	77
1576	77
1577	77
1578	77
1579	77
1580	77
1581	77
1582	77
1583	77
1584	77
1585	77
1586	77
1587	77
1588	77
1589	77
1590	77
1591	77
1592	77
1593	77
1594	77
1595	77
1596	77
1597	77
1598	77
1599	77
1600	77
1601	77
1602	77
1603	77
1604	77
1605	77
1606	78
1607	78
1608	78
1609	78
1610	78
1611	78
1612	79
1613	79
1614	79
1615	79
1616	79
1617	79
1618	79
1619	79
1620	79
1621	79
1622	79
1623	79
1624	79
1625	79
1626	79
1627	79
1628	80
1629	80
1630	80
1631	80
1632	80
1633	80
1634	80
1635	80
1636	80
1637	80
1638	80
1639	80
1640	80
1641	80
1642	80
1643	80
1644	80
1645	80
1646	80
1647	80
1648	80
1649	80
1650	80
1651	80
1652	80
1653	80
1654	80
1655	80
1656	80
1657	80
1658	80
1659	80
1660	80
1661	80
1662	80
1663	80
1664	80
1665	80
1666	81
1667	81
1668	81
1669	81
1670	81
1671	81
1672	81
1673	81
1674	81
1675	81
1676	81
1677	81
1678	81
1679	81
1680	81
1681	81
1682	82
1683	83
1684	84
1685	84
1686	84
1687	84
1688	84
1689	84
1690	84
1691	84
1692	84
1693	84
1694	84
1695	84
1696	84
1697	84
1698	84
1699	84
1700	84
1701	84
1702	84
1703	84
1704	84
1705	84
1706	84
1707	85
1708	85
1709	85
1710	85
1711	85
1712	85
1713	85
1714	85
1715	85
1716	85
1717	85
1718	85
1719	85
1720	85
1721	85
1722	85
1723	85
1724	85
1725	85
1726	85
1727	85
1728	85
1729	85
1730	85
1731	85
1732	85
1733	85
1734	85
1735	85
1736	85
1737	85
1738	85
1739	86
1740	86
1741	86
1742	86
1743	86
1744	87
1745	87
1746	87
1747	87
1748	87
1749	87
1750	87
1751	88
1752	88
1753	88
1754	88
1755	88
1756	88
1757	88
1758	88
1759	88
1760	88
1761	88
1762	89
1763	89
1764	89
1765	89
1766	89
1767	89
1768	89
1769	90
1770	90
1771	90
1772	90
1773	90
1774	90
1775	90
1776	90
1777	90
1778	90
1779	90
1780	90
1781	90
1782	90
1783	90
1784	90
1785	90
1786	90
1787	90
1788	90
1789	90
1790	90
1791	90
1792	90
1793	90
1794	90
1795	90
1796	90
1797	90
1798	90
1799	91
1800	91
1801	91
1802	91
1803	91
1804	91
1805	91
1806	91
1807	91
1808	91
1809	91
1810	91
1811	91
1812	91
1813	91
1814	91
1815	91
1816	91
1817	91
1818	91
1819	91
1820	91
1821	91
1822	91
1823	92
1824	92
1825	92
1826	93
1827	94
1828	94
1829	94
1830	94
1831	95
1832	95
1833	95
1834	95
1835	95
1836	95
1837	95
1838	95
1839	95
1840	95
1841	95
1842	95
1843	95
1844	95
1845	95
1846	95
1847	95
1848	95
1849	95
1850	95
1851	95
1852	95
1853	95
1854	95
1855	95
1856	95
1857	95
1858	95
1859	95
1860	96
1861	96
1862	96
1863	96
1864	96
1865	96
1866	96
1867	96
1868	96
1869	96
1870	96
1871	96
1872	96
1873	96
1874	96
1875	96
1876	96
1877	96
1878	96
1879	97
1880	97
1881	97
1882	97
1883	97
1884	97
1885	97
1886	97
1887	97
1888	97
1889	98
1890	98
1891	98
1892	98
1893	99
1894	99
1895	99
1896	99
1897	99
1898	99
1899	99
1900	99
1901	100
1902	100
1903	101
1904	102
1905	102
1906	102
1907	102
1908	102
1909	102
1910	102
1911	103
1912	103
1913	103
1914	103
1915	103
1916	103
1917	103
1918	103
1919	103
1920	103
1921	103
1922	103
1923	103
1924	103
1925	103
1926	103
1927	103
1928	103
1929	103
1930	103
1931	103
1932	103
1933	103
1934	103
1935	103
1936	103
1937	103
1938	103
1939	103
1940	103
1941	103
1942	103
1943	103
1944	103
1945	103
1946	103
1947	103
1948	103
1949	103
1950	103
1951	103
1952	103
1953	103
1954	103
1955	103
1956	103
1957	103
1958	103
1959	103
1960	103
1961	103
1962	103
1963	103
1964	103
1965	103
1966	103
1967	103
1968	103
1969	103
1970	103
1971	103
1972	103
1973	103
1974	103
1975	103
1976	103
1977	103
1978	103
1979	103
1980	103
1981	103
1982	103
1983	103
1984	103
1985	103
1986	103
1987	103
1988	103
1989	103
1990	103
1991	103
1992	103
1993	103
1994	103
1995	104
1996	104
1997	104
1998	104
1999	104
2000	104
2001	105
2002	105
2003	105
2004	105
2005	105
2006	105
2007	105
2008	105
2009	105
2010	105
2011	105
2012	105
2013	105
2014	105
2015	105
2016	106
2017	106
2018	106
2019	106
2020	106
2021	106
2022	106
2023	106
2024	106
2025	106
2026	106
2027	106
2028	106
2029	106
2030	106
2031	106
2032	106
2033	106
2034	106
2035	106
2036	106
2037	106
2038	106
2039	106
2040	106
2041	106
2042	106
2043	106
2044	106
2045	106
2046	106
2047	106
2048	107
2049	108
2050	108
2051	108
2052	108
2053	108
2054	108
2055	108
2056	108
2057	108
2058	108
2059	108
2060	108
2061	108
2062	108
2063	108
