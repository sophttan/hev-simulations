
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_p2p <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+       
+       # Label infection types.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(c(idc))
+ }
> 
> # 30% Cumulative Incidence
> beta_H <- 50.7
> beta_C <- 0.135
> params <- c(beta_H, beta_C)
> 
> n_sims <- 1000
> i <- 1
> j <- 0
> while (i <= n_sims) {
+     results <- SEIR_p2p(params)
+     j <- j + 1
+     cat(paste0(j, '\t', i, '\n'))
+     if (metrics(results) > 0.29 & metrics(results) < 0.31) {
+         write.csv(results, file = paste0('30/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
1	1
2	1
3	1
4	1
5	1
6	1
7	1
8	1
9	1
10	1
11	1
12	1
13	1
14	1
15	1
16	1
17	1
18	1
19	1
20	1
21	1
22	1
23	1
24	1
25	1
26	1
27	1
28	1
29	1
30	1
31	1
32	1
33	1
34	1
35	1
36	1
37	1
38	1
39	1
40	1
41	1
42	1
43	1
44	1
45	1
46	1
47	1
48	1
49	1
50	1
51	1
52	1
53	1
54	1
55	1
56	1
57	1
58	1
59	1
60	1
61	1
62	1
63	1
64	1
65	1
66	1
67	1
68	1
69	1
70	1
71	1
72	1
73	1
74	1
75	1
76	1
77	1
78	1
79	1
80	1
81	1
82	1
83	1
84	1
85	1
86	1
87	1
88	1
89	1
90	1
91	1
92	1
93	1
94	1
95	1
96	1
97	1
98	1
99	1
100	1
101	1
102	1
103	1
104	1
105	1
106	1
107	1
108	1
109	1
110	1
111	1
112	1
113	1
114	1
115	1
116	1
117	1
118	1
119	1
120	1
121	1
122	1
123	1
124	1
125	1
126	1
127	1
128	1
129	1
130	1
131	1
132	1
133	1
134	1
135	2
136	2
137	2
138	2
139	2
140	2
141	2
142	2
143	2
144	3
145	3
146	4
147	4
148	4
149	4
150	5
151	5
152	5
153	5
154	6
155	6
156	6
157	6
158	6
159	6
160	6
161	6
162	6
163	6
164	6
165	6
166	6
167	6
168	6
169	7
170	7
171	7
172	7
173	7
174	7
175	7
176	7
177	7
178	7
179	7
180	7
181	7
182	7
183	7
184	7
185	7
186	7
187	7
188	7
189	7
190	7
191	7
192	7
193	7
194	7
195	7
196	7
197	7
198	7
199	7
200	7
201	7
202	7
203	7
204	7
205	7
206	7
207	7
208	7
209	7
210	7
211	7
212	7
213	7
214	7
215	7
216	7
217	7
218	7
219	7
220	7
221	7
222	7
223	7
224	7
225	7
226	7
227	7
228	7
229	7
230	7
231	7
232	7
233	7
234	7
235	7
236	7
237	7
238	7
239	7
240	7
241	7
242	7
243	7
244	7
245	7
246	7
247	7
248	7
249	7
250	7
251	7
252	7
253	7
254	7
255	7
256	7
257	7
258	7
259	7
260	7
261	7
262	7
263	7
264	7
265	7
266	7
267	7
268	7
269	7
270	7
271	7
272	7
273	7
274	7
275	7
276	7
277	7
278	7
279	7
280	7
281	7
282	7
283	7
284	7
285	7
286	7
287	7
288	7
289	7
290	7
291	7
292	7
293	7
294	7
295	7
296	8
297	8
298	8
299	8
300	8
301	8
302	8
303	8
304	8
305	8
306	8
307	8
308	8
309	8
310	8
311	8
312	8
313	8
314	8
315	8
316	8
317	8
318	8
319	8
320	8
321	8
322	8
323	8
324	8
325	8
326	8
327	8
328	8
329	8
330	8
331	8
332	8
333	8
334	8
335	8
336	8
337	8
338	8
339	8
340	8
341	8
342	8
343	8
344	8
345	8
346	8
347	8
348	8
349	8
350	8
351	8
352	8
353	8
354	8
355	8
356	8
357	8
358	8
359	8
360	8
361	8
362	8
363	8
364	8
365	8
366	8
367	8
368	8
369	8
370	8
371	8
372	8
373	8
374	8
375	8
376	8
377	8
378	8
379	8
380	8
381	8
382	8
383	8
384	8
385	8
386	8
387	8
388	8
389	8
390	8
391	8
392	8
393	8
394	8
395	8
396	8
397	8
398	8
399	9
400	9
401	9
402	9
403	9
404	9
405	9
406	9
407	9
408	9
409	9
410	9
411	9
412	9
413	9
414	9
415	9
416	9
417	9
418	10
419	10
420	10
421	10
422	10
423	10
424	10
425	10
426	10
427	10
428	10
429	10
430	10
431	10
432	10
433	10
434	10
435	10
436	10
437	10
438	10
439	10
440	10
441	10
442	10
443	10
444	10
445	10
446	10
447	10
448	10
449	10
450	10
451	10
452	10
453	10
454	10
455	10
456	10
457	10
458	10
459	10
460	10
461	10
462	10
463	10
464	10
465	10
466	10
467	10
468	10
469	10
470	10
471	10
472	10
473	10
474	10
475	10
476	10
477	10
478	10
479	10
480	10
481	10
482	10
483	10
484	10
485	10
486	10
487	10
488	10
489	10
490	10
491	10
492	10
493	10
494	10
495	10
496	10
497	10
498	10
499	10
500	10
501	10
502	11
503	11
504	11
505	11
506	11
507	11
508	11
509	11
510	11
511	11
512	11
513	12
514	12
515	13
516	13
517	13
518	13
519	13
520	13
521	13
522	13
523	13
524	13
525	13
526	13
527	13
528	13
529	13
530	13
531	13
532	13
533	13
534	13
535	13
536	13
537	13
538	13
539	13
540	13
541	13
542	13
543	13
544	13
545	13
546	13
547	13
548	13
549	14
550	14
551	14
552	14
553	14
554	14
555	14
556	14
557	14
558	14
559	14
560	14
561	14
562	14
563	14
564	14
565	14
566	14
567	14
568	14
569	14
570	14
571	14
572	14
573	14
574	14
575	14
576	14
577	14
578	14
579	14
580	14
581	14
582	14
583	14
584	14
585	14
586	14
587	14
588	14
589	14
590	14
591	14
592	14
593	14
594	14
595	14
596	14
597	14
598	14
599	14
600	14
601	14
602	14
603	14
604	14
605	14
606	14
607	14
608	14
609	14
610	14
611	14
612	14
613	14
614	14
615	14
616	14
617	14
618	14
619	14
620	14
621	14
622	14
623	14
624	14
625	14
626	14
627	14
628	14
629	14
630	14
631	14
632	14
633	14
634	14
635	14
636	14
637	14
638	14
639	14
640	14
641	14
642	14
643	14
644	14
645	14
646	14
647	14
648	14
649	14
650	14
651	14
652	14
653	14
654	14
655	14
656	14
657	14
658	14
659	14
660	14
661	14
662	14
663	14
664	14
665	14
666	14
667	14
668	14
669	14
670	14
671	14
672	14
673	14
674	14
675	14
676	14
677	14
678	14
679	14
680	14
681	14
682	14
683	14
684	14
685	14
686	14
687	14
688	14
689	14
690	14
691	14
692	14
693	14
694	14
695	14
696	14
697	14
698	14
699	14
700	14
701	14
702	14
703	14
704	14
705	14
706	14
707	14
708	14
709	14
710	14
711	14
712	14
713	14
714	14
715	14
716	14
717	14
718	14
719	14
720	14
721	14
722	14
723	14
724	14
725	14
726	14
727	14
728	14
729	14
730	14
731	14
732	14
733	14
734	14
735	14
736	14
737	14
738	14
739	14
740	14
741	14
742	14
743	14
744	14
745	14
746	14
747	14
748	14
749	14
750	14
751	14
752	14
753	14
754	14
755	14
756	14
757	14
758	14
759	14
760	14
761	14
762	14
763	14
764	14
765	14
766	14
767	14
768	14
769	14
770	14
771	15
772	15
773	15
774	15
775	15
776	15
777	15
778	15
779	15
780	15
781	15
782	15
783	15
784	15
785	15
786	15
787	15
788	15
789	15
790	15
791	15
792	15
793	15
794	15
795	15
796	15
797	15
798	15
799	15
800	15
801	15
802	15
803	15
804	15
805	16
806	16
807	16
808	16
809	16
810	16
811	16
812	16
813	16
814	16
815	16
816	16
817	16
818	16
819	16
820	16
821	17
822	17
823	18
824	18
825	18
826	18
827	18
828	18
829	18
830	18
831	18
832	18
833	18
834	18
835	18
836	18
837	18
838	18
839	18
840	18
841	18
842	18
843	18
844	18
845	18
846	18
847	18
848	18
849	18
850	18
851	18
852	18
853	18
854	18
855	19
856	19
857	19
858	19
859	19
860	19
861	19
862	19
863	19
864	19
865	19
866	19
867	19
868	19
869	19
870	19
871	19
872	19
873	19
874	19
875	19
876	19
877	19
878	19
879	19
880	19
881	19
882	19
883	19
884	19
885	19
886	19
887	19
888	19
889	19
890	20
891	20
892	20
893	20
894	20
895	20
896	20
897	20
898	20
899	20
900	20
901	20
902	20
903	20
904	20
905	20
906	20
907	21
908	21
909	21
910	21
911	21
912	21
913	21
914	21
915	21
916	21
917	21
918	21
919	21
920	21
921	21
922	21
923	21
924	21
925	21
926	22
927	22
928	22
929	22
930	22
931	22
932	22
933	22
934	22
935	22
936	22
937	22
938	22
939	22
940	22
941	22
942	22
943	22
944	22
945	22
946	22
947	22
948	22
949	22
950	22
951	22
952	22
953	22
954	22
955	22
956	22
957	22
958	22
959	22
960	22
961	22
962	22
963	22
964	22
965	22
966	22
967	22
968	22
969	22
970	22
971	23
972	23
973	23
974	23
975	23
976	23
977	23
978	23
979	23
980	23
981	23
982	23
983	23
984	23
985	23
986	23
987	23
988	23
989	23
990	23
991	23
992	23
993	23
994	23
995	23
996	23
997	23
998	23
999	23
1000	23
1001	23
1002	23
1003	23
1004	23
1005	23
1006	23
1007	23
1008	23
1009	23
1010	23
1011	23
1012	23
1013	23
1014	23
1015	23
1016	23
1017	23
1018	23
1019	23
1020	23
1021	23
1022	23
1023	23
1024	23
1025	24
1026	24
1027	24
1028	24
1029	24
1030	24
1031	24
1032	24
1033	24
1034	24
1035	24
1036	24
1037	24
1038	24
1039	24
1040	24
1041	24
1042	25
1043	25
1044	25
1045	25
1046	25
1047	25
1048	25
1049	25
1050	25
1051	25
1052	25
1053	25
1054	25
1055	25
1056	25
1057	25
1058	25
1059	25
1060	25
1061	26
1062	26
1063	27
1064	27
1065	27
1066	27
1067	27
1068	27
1069	27
1070	27
1071	27
1072	27
1073	27
1074	27
1075	27
1076	27
1077	27
1078	27
1079	27
1080	27
1081	27
1082	27
1083	27
1084	27
1085	27
1086	27
1087	27
1088	27
1089	27
1090	27
1091	27
1092	27
1093	27
1094	27
1095	28
1096	28
1097	28
1098	28
1099	28
1100	28
1101	28
1102	28
1103	28
1104	29
1105	29
1106	29
1107	29
1108	29
1109	29
1110	29
1111	29
1112	29
1113	29
1114	29
1115	29
1116	29
1117	29
1118	29
1119	29
1120	29
1121	29
1122	29
1123	29
1124	29
1125	29
1126	29
1127	29
1128	29
1129	29
1130	29
1131	29
1132	29
1133	29
1134	29
1135	29
1136	29
1137	29
1138	29
1139	29
1140	29
1141	29
1142	29
1143	29
1144	29
1145	29
1146	29
1147	29
1148	29
1149	29
1150	29
1151	29
1152	29
1153	29
1154	29
1155	29
1156	29
1157	29
1158	29
1159	29
1160	29
1161	29
1162	29
1163	29
1164	29
1165	29
1166	29
1167	29
1168	29
1169	29
1170	29
1171	29
1172	29
1173	29
1174	29
1175	29
1176	29
1177	29
1178	29
1179	29
1180	29
1181	29
1182	29
1183	29
1184	29
1185	29
1186	29
1187	29
1188	29
1189	29
1190	29
1191	29
1192	29
1193	29
1194	29
1195	29
1196	29
1197	29
1198	29
1199	29
1200	29
1201	29
1202	29
1203	29
1204	29
1205	29
1206	29
1207	29
1208	29
1209	29
1210	29
1211	29
1212	29
1213	29
1214	29
1215	29
1216	29
1217	29
1218	29
1219	29
1220	29
1221	29
1222	29
1223	29
1224	29
1225	29
1226	29
1227	29
1228	29
1229	29
1230	29
1231	29
1232	29
1233	29
1234	29
1235	29
1236	29
1237	29
1238	29
1239	29
1240	29
1241	29
1242	29
1243	29
1244	29
1245	29
1246	30
1247	30
1248	30
1249	30
1250	30
1251	30
1252	30
1253	30
1254	30
1255	30
1256	30
1257	30
1258	30
1259	30
1260	30
1261	30
1262	30
1263	30
1264	30
1265	30
1266	30
1267	30
1268	30
1269	31
1270	31
1271	31
1272	31
1273	31
1274	31
1275	31
1276	31
1277	31
1278	31
1279	31
1280	31
1281	31
1282	31
1283	31
1284	31
1285	31
1286	31
1287	31
1288	31
1289	31
1290	31
1291	31
1292	31
1293	31
1294	31
1295	31
1296	31
1297	31
1298	31
1299	31
1300	31
1301	31
1302	31
1303	31
1304	31
1305	31
1306	31
1307	31
1308	31
1309	31
1310	31
1311	31
1312	31
1313	31
1314	31
1315	31
1316	31
1317	31
1318	31
1319	31
1320	31
1321	31
1322	31
1323	31
1324	31
1325	31
1326	31
1327	31
1328	31
1329	31
1330	31
1331	31
1332	31
1333	31
1334	31
1335	31
1336	31
1337	31
1338	31
1339	31
1340	31
1341	31
1342	31
1343	31
1344	31
1345	31
1346	31
1347	31
1348	31
1349	31
1350	31
1351	31
1352	31
1353	31
1354	31
1355	31
1356	31
1357	31
1358	31
1359	31
1360	31
1361	31
1362	32
1363	32
1364	32
1365	32
1366	32
1367	32
1368	32
1369	32
1370	32
1371	32
1372	32
1373	32
1374	32
1375	32
1376	32
1377	32
1378	32
1379	32
1380	32
1381	32
1382	32
1383	32
1384	32
1385	32
1386	32
1387	32
1388	32
1389	32
1390	32
1391	32
1392	32
1393	32
1394	32
1395	32
1396	32
1397	32
1398	32
1399	32
1400	32
1401	32
1402	32
1403	32
1404	32
1405	32
1406	33
1407	33
1408	33
1409	33
1410	33
1411	33
1412	33
1413	33
1414	33
1415	33
1416	33
1417	33
1418	33
1419	33
1420	33
1421	33
1422	33
1423	33
1424	33
1425	33
1426	33
1427	33
1428	33
1429	33
1430	33
1431	33
1432	33
1433	33
1434	33
1435	33
1436	33
1437	33
1438	33
1439	33
1440	33
1441	33
1442	33
1443	33
1444	33
1445	33
1446	33
1447	33
1448	33
1449	33
1450	33
1451	33
1452	33
1453	33
1454	33
1455	33
1456	33
1457	33
1458	33
1459	33
1460	33
1461	33
1462	33
1463	33
1464	33
1465	33
1466	33
1467	33
1468	33
1469	33
1470	33
1471	33
1472	33
1473	33
1474	33
1475	33
1476	33
1477	33
1478	33
1479	33
1480	33
1481	33
1482	34
1483	34
1484	34
1485	34
1486	34
1487	34
1488	34
1489	34
1490	34
1491	34
1492	34
1493	34
1494	34
1495	34
1496	34
1497	34
1498	34
1499	34
1500	34
1501	34
1502	34
1503	34
1504	34
1505	34
1506	34
1507	34
1508	34
1509	34
1510	34
1511	35
1512	35
1513	35
1514	35
1515	35
1516	35
1517	35
1518	35
1519	35
1520	35
1521	35
1522	35
1523	35
1524	35
1525	35
1526	35
1527	35
1528	35
1529	35
1530	35
1531	35
1532	35
1533	35
1534	35
1535	35
1536	35
1537	35
1538	35
1539	35
1540	35
1541	35
1542	35
1543	36
1544	36
1545	36
1546	36
1547	36
1548	36
1549	36
1550	36
1551	36
1552	36
1553	36
1554	36
1555	36
1556	36
1557	36
1558	36
1559	36
1560	36
1561	36
1562	36
1563	36
1564	36
1565	36
1566	36
1567	36
1568	36
1569	36
1570	36
1571	36
1572	36
1573	36
1574	36
1575	36
1576	36
1577	36
1578	36
1579	36
1580	36
1581	36
1582	36
1583	36
1584	36
1585	36
1586	36
1587	36
1588	36
1589	36
1590	36
1591	36
1592	36
1593	36
1594	36
1595	36
1596	36
1597	36
1598	36
1599	36
1600	36
1601	36
1602	37
1603	37
1604	37
1605	37
1606	37
1607	37
1608	37
1609	37
1610	37
1611	37
1612	37
1613	37
1614	37
1615	37
1616	37
1617	37
1618	37
1619	37
1620	37
1621	37
1622	37
1623	37
1624	37
1625	37
1626	37
1627	37
1628	37
1629	37
1630	37
1631	37
1632	37
1633	37
1634	37
1635	37
1636	37
1637	37
1638	37
1639	37
1640	37
1641	37
1642	37
1643	37
1644	37
1645	37
1646	37
1647	37
1648	37
1649	37
1650	37
1651	37
1652	37
1653	37
1654	37
1655	37
1656	37
1657	37
1658	37
1659	37
1660	37
1661	37
1662	37
1663	37
1664	37
1665	37
1666	37
1667	37
1668	37
1669	37
1670	38
1671	38
1672	38
1673	38
1674	38
1675	38
1676	38
1677	38
1678	38
1679	38
1680	38
1681	38
1682	38
1683	38
1684	38
1685	38
1686	38
1687	38
1688	38
1689	38
1690	38
1691	38
1692	38
1693	38
1694	38
1695	38
1696	38
1697	38
