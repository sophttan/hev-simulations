
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_mix <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   cases <- results[!is.na(results$TIME), ]
+   prp <- mean((cases$TYPE != 'E') & (cases$TYPE != '0'))
+     
+   return(c(idc, prp))
+ }
> 
> #########
> ## 75% ##
> #########
> 
> # 5% Cumulative Incidence
> beta_H <- 44
> beta_C <- 0.038
> beta_E <- 0.00003
> params <- c(beta_H, beta_C, beta_E)
> 
> n_sims <- 1000
> i <- 1
> j <- 0
> while (i <= n_sims) {
+     results <- SEIR_mix(params)
+     j <- j + 1
+     cat(paste0(j, '\t', i, '\n'))
+     if (all(metrics(results) > c(0.04, 0.73)) & all(metrics(results) < c(0.06, 0.77))) {
+         write.csv(results, file = paste0('5/', i, '.csv'), row.names = F)
+         i <- i + 1
+     }
+ }
1	1
2	1
3	1
4	1
5	1
6	1
7	1
8	1
9	2
10	2
11	2
12	2
13	2
14	3
15	3
16	3
17	4
18	4
19	5
20	5
21	5
22	5
23	5
24	5
25	5
26	5
27	5
28	5
29	5
30	5
31	5
32	5
33	5
34	5
35	5
36	5
37	5
38	5
39	5
40	5
41	5
42	5
43	5
44	5
45	5
46	5
47	6
48	6
49	6
50	6
51	6
52	7
53	7
54	7
55	7
56	7
57	7
58	7
59	7
60	7
61	7
62	7
63	7
64	7
65	7
66	7
67	7
68	7
69	7
70	7
71	7
72	8
73	8
74	8
75	8
76	8
77	8
78	8
79	8
80	8
81	8
82	8
83	8
84	8
85	8
86	8
87	8
88	8
89	8
90	8
91	8
92	8
93	8
94	8
95	8
96	8
97	8
98	8
99	8
100	8
101	8
102	8
103	8
104	8
105	8
106	8
107	8
108	8
109	8
110	9
111	9
112	9
113	9
114	9
115	9
116	9
117	9
118	9
119	9
120	9
121	9
122	9
123	9
124	9
125	9
126	9
127	9
128	9
129	10
130	10
131	10
132	10
133	10
134	10
135	10
136	10
137	10
138	10
139	10
140	10
141	10
142	10
143	10
144	10
145	10
146	10
147	10
148	10
149	10
150	10
151	10
152	10
153	10
154	10
155	10
156	10
157	10
158	10
159	10
160	10
161	10
162	10
163	10
164	10
165	10
166	10
167	10
168	10
169	10
170	10
171	10
172	10
173	10
174	10
175	10
176	10
177	10
178	10
179	10
180	10
181	10
182	10
183	11
184	11
185	11
186	11
187	11
188	11
189	11
190	11
191	11
192	11
193	11
194	11
195	11
196	11
197	11
198	11
199	11
200	11
201	11
202	11
203	11
204	11
205	11
206	11
207	11
208	12
209	12
210	12
211	12
212	12
213	12
214	12
215	12
216	12
217	12
218	12
219	12
220	12
221	12
222	12
223	12
224	12
225	12
226	12
227	12
228	12
229	12
230	12
231	13
232	13
233	13
234	13
235	14
236	14
237	14
238	14
239	14
240	14
241	14
242	15
243	15
244	15
245	15
246	16
247	16
248	16
249	17
250	17
251	17
252	17
253	17
254	17
255	17
256	17
257	17
258	17
259	17
260	17
261	17
262	17
263	17
264	17
265	17
266	17
267	17
268	17
269	17
270	17
271	17
272	17
273	17
274	17
275	17
276	17
277	17
278	17
279	18
280	18
281	18
282	18
283	19
284	19
285	19
286	19
287	19
288	19
289	19
290	19
291	19
292	19
293	19
294	19
295	19
296	19
297	19
298	20
299	20
300	20
301	20
302	20
303	20
304	20
305	20
306	20
307	20
308	20
309	20
310	20
311	20
312	20
313	20
314	21
315	21
316	21
317	22
318	22
319	22
320	23
321	23
322	23
323	23
324	23
325	23
326	23
327	23
328	24
329	24
330	24
331	25
332	25
333	25
334	25
335	25
336	25
337	25
338	25
339	25
340	25
341	26
342	26
343	26
344	26
345	26
346	26
347	26
348	26
349	26
350	26
351	26
352	26
353	26
354	27
355	27
356	27
357	27
358	27
359	27
360	27
361	27
362	27
363	27
364	27
365	27
366	27
367	27
368	27
369	27
370	27
371	27
372	27
373	27
374	27
375	27
376	27
377	27
378	27
379	27
380	27
381	27
382	27
383	27
384	27
385	27
386	27
387	27
388	27
389	27
390	27
391	27
392	27
393	27
394	27
395	28
396	28
397	28
398	28
399	28
400	28
401	28
402	28
403	28
404	28
405	28
406	29
407	29
408	29
409	29
410	29
411	29
412	29
413	29
414	29
415	29
416	29
417	29
418	29
419	29
420	29
421	29
422	29
423	29
424	29
425	29
426	29
427	29
428	29
429	29
430	29
431	29
432	29
433	29
434	29
435	29
436	29
437	29
438	29
439	29
440	29
441	29
442	30
443	30
444	30
445	31
446	31
447	31
448	31
449	31
450	31
451	31
452	31
453	31
454	31
455	31
456	32
457	32
458	32
459	32
460	33
461	33
462	33
463	33
464	33
465	33
466	33
467	34
468	34
469	34
470	34
471	34
472	34
473	34
474	34
475	34
476	34
477	34
478	34
479	34
480	34
481	34
482	34
483	34
484	34
485	34
486	34
487	34
488	34
489	34
490	34
491	34
492	34
493	34
494	34
495	35
496	35
497	35
498	35
499	35
500	36
501	36
502	36
503	36
504	36
505	36
506	36
507	36
508	36
509	36
510	37
511	37
512	37
513	37
514	37
515	37
516	37
517	37
518	37
519	37
520	37
521	37
522	37
523	37
524	37
525	37
526	37
527	37
528	37
529	37
530	37
531	37
532	37
533	37
534	37
535	37
536	37
537	37
538	37
539	37
540	37
541	37
542	37
543	38
544	38
545	38
546	38
547	38
548	38
549	38
550	38
551	38
552	38
553	38
554	38
555	38
556	38
557	38
558	38
559	38
560	38
561	39
562	39
563	39
564	39
565	40
566	40
567	40
568	41
569	41
570	41
571	41
572	41
573	41
574	41
575	42
576	42
577	42
578	42
579	42
580	42
581	43
582	43
583	43
584	43
585	43
586	43
587	43
588	43
589	43
590	44
591	44
592	44
593	44
594	44
595	44
596	44
597	44
598	44
599	45
600	45
601	45
602	45
603	45
604	46
605	46
606	46
607	46
608	46
609	46
610	46
611	46
612	46
613	46
614	46
615	46
616	47
617	47
618	48
619	48
620	48
621	48
622	48
623	48
624	48
625	48
626	48
627	49
628	49
629	49
630	49
631	49
632	49
633	49
634	49
635	49
636	49
637	49
638	49
639	49
640	49
641	49
642	49
643	49
644	49
645	49
646	49
647	49
648	49
649	49
650	49
651	49
652	49
653	49
654	49
655	49
656	49
657	49
658	49
659	49
660	49
661	49
662	49
663	50
664	50
665	50
666	50
667	50
668	50
669	50
670	50
671	50
672	50
673	50
674	50
675	50
676	50
677	50
678	50
679	51
680	51
681	51
682	51
683	51
684	51
685	52
686	53
687	53
688	53
689	53
690	53
691	53
692	53
693	53
694	53
695	53
696	53
697	53
698	54
699	54
700	54
701	54
702	54
703	54
704	54
705	54
706	54
707	54
708	54
709	54
710	54
711	54
712	55
713	55
714	55
715	55
716	55
717	55
718	55
719	55
720	55
721	55
722	55
723	55
724	55
725	55
726	55
727	55
728	55
729	55
730	55
731	55
732	55
733	55
734	55
735	55
736	55
737	55
738	55
739	55
740	55
741	55
742	55
743	56
744	56
745	56
746	57
747	57
748	57
749	57
750	57
751	57
752	57
753	58
754	58
755	58
756	58
757	58
758	58
759	58
760	58
761	58
762	58
763	58
764	58
765	58
766	59
767	59
768	59
769	59
770	59
771	59
772	59
773	59
774	59
775	59
776	59
777	60
778	60
779	60
780	60
781	60
782	60
783	60
784	60
785	60
786	60
787	60
788	60
789	60
790	60
791	60
792	60
793	60
794	60
795	60
796	60
797	60
798	61
799	61
800	61
801	61
802	61
803	61
804	61
805	61
806	61
807	61
808	61
809	61
810	61
811	61
812	61
813	61
814	61
815	61
816	61
817	61
818	61
819	61
820	61
821	61
822	61
823	61
824	61
825	61
826	61
827	61
828	61
829	61
830	61
831	61
832	61
833	61
834	61
835	61
836	61
837	61
838	61
839	61
840	61
841	61
842	61
843	61
844	61
845	61
846	61
847	61
848	61
849	61
850	61
851	61
852	61
853	61
854	62
855	62
856	62
857	62
858	62
859	62
860	62
861	62
862	62
863	62
864	63
865	63
866	63
867	63
868	63
869	63
870	64
871	64
872	64
873	64
874	64
875	65
876	65
877	66
878	66
879	66
880	66
881	66
882	66
883	66
884	66
885	66
886	66
887	66
888	66
889	67
890	67
891	67
892	67
893	67
894	67
895	67
896	67
897	67
898	67
899	67
900	67
901	67
902	67
903	67
904	67
905	67
906	67
907	67
908	67
909	67
910	67
911	67
912	67
913	67
914	67
915	67
916	67
917	67
918	67
919	67
920	67
921	67
922	67
923	67
924	67
925	67
926	67
927	67
928	67
929	67
930	67
931	67
932	67
933	67
934	67
935	67
936	67
937	67
938	67
939	67
940	67
941	67
942	67
943	67
944	67
945	67
946	67
947	67
948	67
949	67
950	67
951	67
952	67
953	67
954	67
955	67
956	67
957	67
958	67
959	67
960	67
961	67
962	67
963	67
964	67
965	67
966	68
967	68
968	68
969	68
970	69
971	69
972	69
973	69
974	69
975	69
976	70
977	71
978	71
979	71
980	71
981	71
982	71
983	71
984	71
985	71
986	71
987	71
988	71
989	71
990	71
991	71
992	71
993	71
994	71
995	71
996	72
997	73
998	74
999	74
1000	74
1001	74
1002	74
1003	74
1004	74
1005	74
1006	75
1007	75
1008	75
1009	75
1010	75
1011	75
1012	75
1013	76
1014	77
1015	77
1016	77
1017	77
1018	77
1019	77
1020	77
1021	78
1022	78
1023	78
1024	78
1025	78
1026	78
1027	78
1028	79
1029	79
1030	79
1031	80
1032	80
1033	80
1034	80
1035	81
1036	81
1037	81
1038	81
1039	81
1040	81
1041	81
1042	81
1043	81
1044	82
1045	82
1046	82
1047	82
1048	82
1049	82
1050	83
1051	83
1052	83
1053	83
1054	83
1055	83
1056	83
1057	83
1058	83
1059	83
1060	83
1061	83
1062	83
1063	83
1064	84
1065	84
1066	84
1067	84
1068	84
1069	84
1070	84
1071	84
1072	85
1073	85
1074	85
1075	85
1076	85
1077	85
1078	85
1079	85
1080	85
1081	85
1082	85
1083	85
1084	85
1085	85
1086	85
1087	86
1088	86
1089	86
1090	86
1091	86
1092	86
1093	86
1094	86
1095	86
1096	86
1097	86
1098	86
1099	86
1100	86
1101	86
1102	86
1103	86
1104	86
1105	87
1106	87
1107	87
1108	87
1109	87
1110	87
1111	87
1112	87
1113	87
1114	87
1115	87
1116	87
1117	87
1118	87
1119	87
1120	87
1121	87
1122	87
1123	87
1124	88
1125	88
1126	88
1127	88
1128	88
1129	88
1130	88
1131	88
1132	88
1133	88
1134	88
1135	88
1136	88
1137	88
1138	89
1139	89
1140	89
1141	89
1142	89
1143	89
1144	89
1145	89
1146	89
1147	90
1148	90
1149	90
1150	90
1151	90
1152	90
1153	90
1154	90
1155	90
1156	91
1157	92
1158	92
1159	92
1160	92
1161	92
1162	92
1163	92
1164	92
1165	92
1166	92
1167	92
1168	92
1169	92
1170	92
1171	92
1172	92
1173	92
1174	92
1175	92
1176	92
1177	92
1178	92
1179	92
1180	92
1181	92
1182	92
1183	92
1184	92
1185	92
1186	92
1187	92
1188	93
1189	93
1190	93
1191	93
1192	93
1193	93
1194	93
1195	93
1196	93
1197	93
1198	94
1199	94
1200	94
1201	94
1202	94
1203	94
1204	94
1205	94
1206	94
1207	94
1208	95
1209	95
1210	95
1211	95
1212	95
1213	95
1214	95
1215	95
1216	95
1217	95
1218	95
1219	95
1220	95
1221	95
1222	95
1223	96
1224	96
1225	96
1226	96
1227	96
1228	96
1229	96
1230	96
1231	97
1232	97
1233	97
1234	97
1235	97
1236	97
1237	97
1238	97
1239	97
1240	97
1241	97
1242	97
1243	97
1244	97
1245	97
1246	97
1247	97
1248	97
1249	97
1250	97
1251	97
1252	97
1253	97
1254	97
1255	97
1256	98
1257	98
1258	98
1259	98
1260	98
1261	98
1262	98
1263	98
1264	98
1265	98
1266	98
1267	98
1268	98
1269	98
1270	98
1271	99
1272	99
1273	99
1274	99
1275	99
1276	99
1277	99
1278	99
1279	99
1280	99
1281	99
1282	99
1283	99
1284	100
1285	101
1286	101
1287	101
1288	101
1289	101
1290	101
1291	101
1292	101
1293	102
1294	102
1295	102
1296	102
1297	102
1298	102
1299	102
1300	102
1301	102
1302	102
1303	102
1304	102
1305	102
1306	102
1307	102
1308	102
1309	102
1310	102
1311	102
1312	102
1313	102
1314	102
1315	102
1316	102
1317	102
1318	102
1319	102
1320	102
1321	102
1322	102
1323	102
1324	102
1325	102
1326	102
1327	102
1328	102
1329	102
1330	102
1331	103
1332	103
1333	104
1334	104
1335	104
1336	104
1337	104
1338	104
1339	104
1340	104
1341	104
1342	104
1343	104
1344	104
1345	104
1346	105
1347	105
1348	105
1349	105
1350	105
1351	105
1352	105
1353	105
1354	105
1355	105
1356	105
1357	105
1358	105
1359	105
1360	105
1361	105
1362	105
1363	105
1364	105
1365	105
1366	105
1367	105
1368	105
1369	105
1370	105
1371	105
1372	105
1373	105
1374	105
1375	105
1376	105
1377	105
1378	105
1379	105
1380	105
1381	105
1382	105
1383	105
1384	105
1385	105
1386	105
1387	105
1388	105
1389	105
1390	105
1391	105
1392	105
1393	105
1394	105
1395	105
1396	105
1397	105
1398	105
1399	105
1400	105
1401	105
1402	105
1403	106
1404	106
1405	106
1406	106
1407	106
1408	106
1409	106
1410	106
1411	106
1412	106
1413	106
1414	106
1415	106
1416	106
1417	106
1418	106
1419	106
1420	106
1421	106
1422	106
1423	107
1424	108
1425	108
1426	108
1427	108
1428	108
1429	108
1430	108
1431	108
1432	108
1433	108
1434	108
1435	108
1436	108
1437	108
1438	108
1439	108
1440	108
1441	108
1442	108
1443	108
1444	108
1445	108
1446	108
1447	108
1448	108
1449	108
1450	108
1451	108
1452	108
1453	108
1454	108
1455	108
1456	108
1457	108
1458	108
1459	108
1460	108
1461	108
1462	108
1463	108
1464	108
1465	108
1466	108
1467	108
1468	108
1469	108
1470	108
1471	108
1472	108
1473	108
1474	108
1475	108
1476	108
1477	108
1478	108
1479	108
1480	108
1481	109
1482	109
1483	109
1484	109
1485	109
1486	109
1487	109
1488	109
1489	109
1490	109
1491	109
1492	109
1493	109
1494	109
1495	109
1496	109
1497	109
1498	109
1499	109
1500	109
1501	109
1502	109
1503	109
1504	109
1505	109
1506	109
1507	109
1508	109
1509	109
1510	110
1511	110
1512	110
1513	110
1514	110
1515	110
1516	110
1517	110
1518	110
1519	110
1520	110
1521	110
1522	110
1523	110
1524	111
1525	111
1526	111
1527	111
1528	111
1529	111
1530	111
1531	111
1532	111
1533	111
1534	111
1535	111
1536	111
1537	111
1538	111
1539	111
1540	111
1541	111
1542	111
1543	112
1544	112
1545	112
1546	112
1547	112
1548	112
1549	112
1550	112
1551	112
1552	112
1553	112
1554	112
1555	112
1556	112
1557	112
1558	112
1559	112
1560	112
1561	112
1562	112
1563	112
1564	112
1565	113
1566	113
1567	113
1568	113
1569	113
1570	113
1571	113
1572	113
1573	113
1574	114
1575	114
1576	114
1577	114
1578	114
1579	114
1580	114
1581	115
1582	115
1583	115
1584	115
1585	115
1586	115
1587	115
1588	115
1589	115
1590	115
1591	115
1592	115
1593	115
1594	115
1595	115
1596	115
1597	115
1598	115
1599	115
1600	115
1601	115
1602	115
1603	115
1604	115
1605	115
1606	115
1607	115
1608	115
1609	115
1610	115
1611	115
1612	115
1613	115
1614	115
1615	115
1616	115
1617	115
1618	115
1619	115
1620	115
1621	115
1622	115
1623	115
1624	115
1625	115
1626	115
1627	115
1628	115
1629	115
1630	115
1631	115
1632	115
1633	115
1634	115
1635	115
1636	115
1637	115
1638	115
1639	115
1640	116
1641	116
1642	116
1643	116
1644	116
1645	116
1646	116
1647	116
1648	116
1649	116
1650	116
1651	116
1652	116
1653	116
1654	116
1655	116
1656	116
1657	116
1658	116
1659	117
1660	117
1661	117
1662	117
1663	117
1664	117
1665	117
1666	117
1667	117
1668	117
1669	117
1670	117
1671	117
1672	117
1673	117
1674	117
1675	117
1676	117
1677	117
1678	117
1679	117
1680	117
1681	117
1682	117
1683	117
1684	117
1685	117
1686	117
1687	117
1688	117
1689	117
1690	117
1691	117
1692	117
1693	117
1694	117
1695	117
1696	117
1697	117
1698	117
1699	117
1700	117
1701	117
1702	117
1703	117
1704	117
1705	117
1706	117
1707	117
1708	118
1709	118
1710	118
1711	118
1712	118
1713	118
1714	118
1715	118
1716	118
1717	118
1718	118
1719	118
1720	118
1721	119
1722	119
1723	119
1724	119
1725	119
1726	119
1727	119
1728	119
1729	119
1730	119
1731	119
1732	119
1733	119
1734	119
1735	119
1736	119
1737	119
1738	119
1739	119
1740	119
1741	119
1742	119
1743	119
1744	119
1745	119
1746	119
1747	119
1748	119
1749	119
1750	119
1751	119
1752	119
1753	119
1754	119
1755	119
1756	120
1757	120
1758	120
1759	120
1760	120
1761	120
1762	120
1763	120
1764	120
1765	120
1766	120
1767	120
1768	120
1769	120
1770	120
1771	120
1772	120
1773	120
1774	120
1775	120
1776	120
1777	120
1778	120
1779	120
1780	120
1781	120
1782	120
1783	120
1784	120
1785	120
1786	120
1787	120
1788	120
1789	120
1790	120
1791	120
1792	120
1793	120
1794	120
1795	120
1796	120
1797	120
1798	120
1799	120
1800	120
1801	120
1802	120
1803	120
1804	120
1805	120
1806	121
1807	121
1808	121
1809	121
1810	121
1811	121
1812	121
1813	122
1814	122
1815	122
1816	122
1817	122
1818	122
1819	123
1820	123
1821	123
1822	123
1823	123
1824	123
1825	123
1826	123
1827	123
1828	123
1829	123
1830	123
1831	123
1832	123
1833	123
1834	123
1835	123
1836	123
1837	123
1838	123
1839	123
1840	124
1841	124
1842	124
1843	124
1844	125
1845	125
1846	125
1847	125
1848	125
1849	125
1850	125
1851	125
1852	125
1853	125
1854	125
1855	125
1856	126
1857	126
1858	126
1859	126
1860	126
1861	126
1862	126
1863	126
1864	126
1865	126
1866	126
1867	126
1868	126
1869	126
1870	127
1871	127
1872	127
1873	127
1874	127
1875	128
1876	128
1877	128
1878	128
1879	128
1880	128
1881	128
1882	128
1883	128
1884	128
1885	128
1886	128
1887	128
1888	128
1889	128
1890	128
1891	128
1892	128
1893	128
1894	128
1895	128
1896	128
1897	128
1898	128
1899	128
1900	128
1901	128
1902	128
1903	128
1904	128
1905	128
1906	128
1907	128
1908	128
1909	128
1910	128
1911	128
1912	128
1913	128
1914	128
1915	129
1916	129
1917	129
1918	129
1919	129
1920	129
1921	129
1922	129
1923	129
1924	129
1925	129
1926	129
1927	129
1928	129
1929	129
1930	129
1931	129
1932	129
1933	129
1934	129
1935	129
1936	129
1937	129
1938	129
1939	130
1940	130
1941	130
1942	130
1943	130
1944	130
1945	130
1946	130
1947	130
1948	130
1949	130
1950	130
1951	131
1952	131
1953	131
1954	131
1955	131
1956	131
1957	131
1958	131
1959	131
1960	132
1961	132
1962	132
1963	132
1964	132
1965	132
1966	132
1967	132
1968	132
1969	132
1970	132
1971	132
1972	132
1973	132
1974	132
1975	132
1976	132
1977	132
1978	132
1979	132
1980	132
1981	132
1982	132
1983	132
1984	132
1985	132
1986	132
1987	132
1988	132
1989	132
1990	132
1991	132
1992	132
1993	132
1994	133
1995	133
1996	133
1997	133
1998	133
1999	133
2000	133
2001	133
2002	133
2003	133
2004	133
2005	133
2006	133
2007	133
2008	133
2009	133
2010	133
2011	133
2012	134
2013	134
2014	134
2015	134
2016	134
2017	134
2018	134
2019	134
2020	135
2021	135
2022	135
2023	135
2024	135
2025	135
2026	135
2027	135
2028	135
2029	135
2030	135
2031	135
2032	135
2033	135
2034	135
2035	135
2036	135
2037	135
2038	135
2039	135
2040	135
2041	135
2042	135
2043	135
2044	135
2045	135
2046	135
2047	135
2048	135
2049	135
2050	136
2051	136
2052	136
2053	137
2054	137
2055	137
2056	137
2057	137
2058	137
2059	137
2060	137
2061	138
2062	138
2063	138
2064	138
2065	138
2066	138
2067	138
2068	138
2069	138
2070	138
2071	138
2072	138
2073	138
2074	138
2075	139
2076	139
2077	139
2078	139
2079	140
2080	140
2081	140
2082	140
2083	140
2084	140
2085	141
2086	141
2087	141
2088	141
2089	141
2090	141
2091	141
2092	141
2093	141
2094	141
2095	141
2096	141
2097	141
2098	141
2099	141
2100	142
2101	142
2102	142
2103	142
2104	142
2105	143
2106	143
2107	143
2108	143
2109	143
2110	143
2111	143
2112	143
2113	143
2114	143
2115	143
2116	143
2117	143
2118	143
2119	143
2120	143
2121	143
2122	143
2123	143
2124	143
2125	143
2126	143
2127	143
2128	143
2129	143
2130	143
2131	143
2132	143
2133	143
2134	143
2135	143
2136	143
2137	143
2138	143
2139	143
2140	143
2141	143
2142	143
2143	143
2144	143
2145	143
2146	143
2147	143
2148	143
2149	143
2150	143
2151	144
2152	144
2153	144
2154	144
2155	145
2156	145
2157	145
2158	145
2159	145
2160	145
2161	145
2162	145
2163	145
2164	145
2165	145
2166	145
2167	145
2168	145
2169	145
2170	145
2171	146
2172	146
2173	146
2174	146
2175	146
2176	146
2177	146
2178	146
2179	146
2180	147
2181	147
2182	147
2183	147
2184	147
2185	147
2186	147
2187	147
2188	147
2189	147
2190	147
2191	148
2192	148
2193	148
2194	148
2195	148
2196	148
2197	148
2198	148
2199	148
2200	148
2201	148
2202	148
2203	148
2204	148
2205	148
2206	148
2207	149
2208	149
2209	149
2210	149
2211	150
2212	150
2213	150
2214	150
2215	150
2216	150
2217	150
2218	151
2219	151
2220	151
2221	151
2222	152
2223	152
2224	152
2225	152
2226	152
2227	153
2228	153
2229	153
2230	153
2231	153
2232	153
2233	153
2234	153
2235	153
2236	153
2237	153
2238	153
2239	153
2240	153
2241	153
2242	153
2243	153
2244	153
2245	153
2246	154
2247	154
2248	154
2249	154
2250	154
2251	154
2252	154
2253	154
2254	155
2255	155
2256	155
2257	155
2258	155
2259	155
2260	155
2261	155
2262	155
2263	155
2264	155
2265	155
2266	155
2267	155
2268	156
2269	156
2270	156
2271	156
2272	156
2273	156
2274	156
2275	156
2276	156
2277	156
2278	156
2279	157
2280	157
2281	157
2282	157
2283	157
2284	157
2285	157
2286	157
2287	157
2288	157
2289	157
2290	157
2291	157
2292	157
2293	157
2294	157
2295	157
2296	157
2297	157
2298	157
2299	157
2300	157
2301	157
2302	157
2303	157
2304	157
2305	157
2306	157
2307	157
2308	157
2309	157
2310	157
2311	157
2312	157
2313	157
2314	157
2315	157
2316	157
2317	157
2318	157
2319	157
2320	157
2321	158
2322	158
2323	158
2324	158
2325	158
2326	158
2327	158
2328	159
2329	159
2330	159
2331	159
2332	159
2333	159
2334	159
2335	160
2336	160
2337	160
2338	160
2339	160
