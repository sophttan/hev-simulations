
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_env <- function(params, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TIME = NA)
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       results$TIME[new_inf] <- t
+     }
+     
+     beta_E <- params[1]
+     risk_E <- pmin(beta_E * data$S, 1)
+     
+     new_exposed <- rbinom(N, 1, risk_E)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if(num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed == 1] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed == 1] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed == 1] <- 0
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(idc)
+ }
> 
> beta_Es <- seq(0, 0.00150, 0.00001) # 151
> 
> d_E <- length(beta_Es)
> 
> reps <- 1000
> idcs <- array(rep(NA, d_E * reps), dim = c(d_E, reps))
> t_tot <- 0
> for (i in 1:d_E) {
+   beta_E <- beta_Es[i]
+   params <- c(beta_E)
+   cat(paste0(format(beta_E, nsmall = 5, scientific = F), '/0.00150\t'))
+         
+   t_0 <- Sys.time()
+   vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+     results <- SEIR_env(params, inf) 
+     metrics(results)
+   }
+   t_1 <- Sys.time()
+   t_tot <- t_tot + (t_1 - t_0)
+         
+   cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+              format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+       
+   vals <- matrix(vals, reps, byrow = T)
+   idcs[i] <- vals[, 1]
+         
+   cat(paste0(format(round(mean(vals[, 1]), 3), nsmall = 3), '\n'))
+     
+   saveRDS(idcs, file = 'idcs.rds')
+   write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+ }
0.00000/0.00150	4.115 secs	(4.115 secs)	0.001
0.00001/0.00150	8.63 secs	(4.515 secs)	0.004
0.00002/0.00150	13.16 secs	(4.526 secs)	0.008
0.00003/0.00150	18.42 secs	(5.265 secs)	0.011
0.00004/0.00150	23.62 secs	(5.203 secs)	0.014
0.00005/0.00150	28.91 secs	(5.292 secs)	0.017
0.00006/0.00150	34.23 secs	(5.312 secs)	0.021
0.00007/0.00150	39.58 secs	(5.355 secs)	0.024
0.00008/0.00150	44.68 secs	(5.094 secs)	0.027
0.00009/0.00150	49.92 secs	(5.242 secs)	0.030
0.00010/0.00150	55.36 secs	(5.443 secs)	0.033
0.00011/0.00150	61.03 secs	(5.672 secs)	0.037
0.00012/0.00150	66.81 secs	(5.779 secs)	0.040
0.00013/0.00150	72.54 secs	(5.732 secs)	0.043
0.00014/0.00150	78.24 secs	(5.695 secs)	0.046
0.00015/0.00150	84.03 secs	(5.795 secs)	0.050
0.00016/0.00150	89.79 secs	(5.76 secs)	0.052
0.00017/0.00150	95.78 secs	(5.982 secs)	0.056
0.00018/0.00150	101.83 secs	(6.051 secs)	0.059
0.00019/0.00150	107.89 secs	(6.068 secs)	0.062
0.00020/0.00150	113.86 secs	(5.969 secs)	0.065
0.00021/0.00150	119.80 secs	(5.936 secs)	0.068
0.00022/0.00150	125.83 secs	(6.031 secs)	0.072
0.00023/0.00150	132.07 secs	(6.241 secs)	0.074
0.00024/0.00150	138.44 secs	(6.366 secs)	0.077
0.00025/0.00150	144.63 secs	(6.196 secs)	0.081
0.00026/0.00150	150.87 secs	(6.235 secs)	0.084
0.00027/0.00150	157.31 secs	(6.441 secs)	0.087
0.00028/0.00150	163.70 secs	(6.392 secs)	0.089
0.00029/0.00150	170.03 secs	(6.329 secs)	0.093
0.00030/0.00150	176.48 secs	(6.454 secs)	0.096
0.00031/0.00150	182.95 secs	(6.463 secs)	0.099
0.00032/0.00150	189.45 secs	(6.501 secs)	0.102
0.00033/0.00150	196.00 secs	(6.552 secs)	0.105
0.00034/0.00150	202.52 secs	(6.519 secs)	0.108
0.00035/0.00150	209.15 secs	(6.627 secs)	0.110
0.00036/0.00150	215.92 secs	(6.776 secs)	0.114
0.00037/0.00150	222.63 secs	(6.703 secs)	0.116
0.00038/0.00150	229.20 secs	(6.575 secs)	0.120
0.00039/0.00150	235.92 secs	(6.723 secs)	0.123
0.00040/0.00150	242.90 secs	(6.978 secs)	0.126
0.00041/0.00150	249.81 secs	(6.904 secs)	0.128
0.00042/0.00150	256.64 secs	(6.835 secs)	0.131
0.00043/0.00150	263.15 secs	(6.514 secs)	0.134
0.00044/0.00150	270.23 secs	(7.073 secs)	0.137
0.00045/0.00150	277.38 secs	(7.154 secs)	0.139
0.00046/0.00150	283.95 secs	(6.571 secs)	0.143
0.00047/0.00150	290.99 secs	(7.041 secs)	0.146
0.00048/0.00150	297.58 secs	(6.582 secs)	0.149
0.00049/0.00150	304.73 secs	(7.158 secs)	0.151
0.00050/0.00150	312.10 secs	(7.368 secs)	0.154
0.00051/0.00150	319.00 secs	(6.899 secs)	0.157
0.00052/0.00150	326.19 secs	(7.19 secs)	0.159
0.00053/0.00150	333.64 secs	(7.448 secs)	0.163
0.00054/0.00150	340.97 secs	(7.331 secs)	0.165
0.00055/0.00150	348.07 secs	(7.096 secs)	0.168
0.00056/0.00150	355.46 secs	(7.391 secs)	0.171
0.00057/0.00150	362.74 secs	(7.286 secs)	0.173
0.00058/0.00150	369.95 secs	(7.204 secs)	0.176
0.00059/0.00150	376.45 secs	(6.499 secs)	0.179
0.00060/0.00150	383.51 secs	(7.063 secs)	0.182
0.00061/0.00150	390.78 secs	(7.272 secs)	0.184
0.00062/0.00150	398.04 secs	(7.253 secs)	0.187
0.00063/0.00150	404.65 secs	(6.611 secs)	0.190
0.00064/0.00150	411.90 secs	(7.252 secs)	0.193
0.00065/0.00150	419.38 secs	(7.479 secs)	0.195
0.00066/0.00150	426.66 secs	(7.279 secs)	0.198
0.00067/0.00150	433.90 secs	(7.239 secs)	0.201
0.00068/0.00150	441.14 secs	(7.239 secs)	0.203
0.00069/0.00150	448.44 secs	(7.303 secs)	0.205
0.00070/0.00150	455.80 secs	(7.364 secs)	0.209
0.00071/0.00150	463.32 secs	(7.52 secs)	0.212
0.00072/0.00150	470.89 secs	(7.57 secs)	0.214
0.00073/0.00150	478.57 secs	(7.678 secs)	0.216
0.00074/0.00150	486.20 secs	(7.631 secs)	0.219
0.00075/0.00150	493.95 secs	(7.752 secs)	0.221
0.00076/0.00150	501.54 secs	(7.586 secs)	0.224
0.00077/0.00150	509.33 secs	(7.792 secs)	0.226
0.00078/0.00150	517.24 secs	(7.906 secs)	0.229
0.00079/0.00150	524.91 secs	(7.674 secs)	0.232
0.00080/0.00150	532.69 secs	(7.784 secs)	0.234
0.00081/0.00150	540.44 secs	(7.747 secs)	0.237
0.00082/0.00150	547.65 secs	(7.206 secs)	0.239
0.00083/0.00150	555.58 secs	(7.933 secs)	0.242
0.00084/0.00150	563.84 secs	(8.263 secs)	0.244
0.00085/0.00150	571.78 secs	(7.941 secs)	0.247
0.00086/0.00150	579.45 secs	(7.666 secs)	0.250
0.00087/0.00150	586.70 secs	(7.252 secs)	0.252
0.00088/0.00150	594.78 secs	(8.08 secs)	0.254
0.00089/0.00150	602.83 secs	(8.045 secs)	0.256
0.00090/0.00150	611.09 secs	(8.264 secs)	0.259
0.00091/0.00150	619.30 secs	(8.211 secs)	0.262
0.00092/0.00150	626.79 secs	(7.491 secs)	0.264
0.00093/0.00150	634.93 secs	(8.143 secs)	0.266
0.00094/0.00150	642.64 secs	(7.703 secs)	0.269
0.00095/0.00150	650.43 secs	(7.789 secs)	0.271
0.00096/0.00150	658.53 secs	(8.099 secs)	0.274
0.00097/0.00150	666.56 secs	(8.038 secs)	0.276
0.00098/0.00150	674.80 secs	(8.237 secs)	0.278
0.00099/0.00150	682.96 secs	(8.163 secs)	0.281
0.00100/0.00150	691.55 secs	(8.59 secs)	0.283
0.00101/0.00150	699.90 secs	(8.341 secs)	0.286
0.00102/0.00150	707.69 secs	(7.793 secs)	0.288
0.00103/0.00150	716.11 secs	(8.426 secs)	0.290
0.00104/0.00150	724.16 secs	(8.044 secs)	0.293
0.00105/0.00150	732.81 secs	(8.653 secs)	0.295
0.00106/0.00150	741.25 secs	(8.436 secs)	0.298
0.00107/0.00150	749.68 secs	(8.432 secs)	0.300
0.00108/0.00150	758.20 secs	(8.519 secs)	0.302
0.00109/0.00150	766.79 secs	(8.589 secs)	0.304
0.00110/0.00150	775.15 secs	(8.366 secs)	0.306
0.00111/0.00150	783.61 secs	(8.453 secs)	0.309
0.00112/0.00150	792.37 secs	(8.765 secs)	0.311
0.00113/0.00150	800.21 secs	(7.841 secs)	0.313
0.00114/0.00150	808.81 secs	(8.602 secs)	0.316
0.00115/0.00150	817.48 secs	(8.662 secs)	0.319
0.00116/0.00150	826.21 secs	(8.737 secs)	0.320
0.00117/0.00150	834.87 secs	(8.655 secs)	0.323
0.00118/0.00150	843.30 secs	(8.428 secs)	0.325
0.00119/0.00150	851.97 secs	(8.675 secs)	0.327
0.00120/0.00150	860.80 secs	(8.826 secs)	0.329
0.00121/0.00150	869.69 secs	(8.889 secs)	0.332
0.00122/0.00150	878.43 secs	(8.744 secs)	0.333
0.00123/0.00150	887.07 secs	(8.639 secs)	0.335
0.00124/0.00150	895.74 secs	(8.674 secs)	0.339
0.00125/0.00150	904.50 secs	(8.758 secs)	0.341
0.00126/0.00150	913.29 secs	(8.787 secs)	0.342
0.00127/0.00150	922.17 secs	(8.884 secs)	0.345
0.00128/0.00150	931.04 secs	(8.864 secs)	0.347
0.00129/0.00150	940.10 secs	(9.062 secs)	0.350
0.00130/0.00150	949.07 secs	(8.971 secs)	0.351
0.00131/0.00150	958.04 secs	(8.967 secs)	0.353
0.00132/0.00150	966.48 secs	(8.445 secs)	0.356
0.00133/0.00150	975.17 secs	(8.688 secs)	0.357
0.00134/0.00150	983.88 secs	(8.707 secs)	0.360
0.00135/0.00150	992.58 secs	(8.699 secs)	0.362
0.00136/0.00150	1001.34 secs	(8.765 secs)	0.364
0.00137/0.00150	1009.56 secs	(8.221 secs)	0.366
0.00138/0.00150	1017.98 secs	(8.414 secs)	0.369
0.00139/0.00150	1026.17 secs	(8.195 secs)	0.371
0.00140/0.00150	1034.52 secs	(8.347 secs)	0.372
0.00141/0.00150	1042.99 secs	(8.467 secs)	0.375
0.00142/0.00150	1051.55 secs	(8.566 secs)	0.376
0.00143/0.00150	1060.17 secs	(8.621 secs)	0.379
0.00144/0.00150	1068.63 secs	(8.46 secs)	0.381
0.00145/0.00150	1077.31 secs	(8.675 secs)	0.382
0.00146/0.00150	1085.90 secs	(8.596 secs)	0.386
0.00147/0.00150	1094.51 secs	(8.605 secs)	0.387
0.00148/0.00150	1103.31 secs	(8.804 secs)	0.389
0.00149/0.00150	1112.04 secs	(8.731 secs)	0.391
0.00150/0.00150	1120.80 secs	(8.755 secs)	0.393
There were 50 or more warnings (use warnings() to see the first 50)
> 
> proc.time()
     user    system   elapsed 
30188.733  1963.242  1137.123 
