
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+       
+       # Label infection types.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> beta_Hs <- seq(47, 49.8, 0.2) #15
> beta_Cs <- seq(0.00, 0.20, 0.01) #21
> 
> d_H <- length(beta_Hs)
> d_C <- length(beta_Cs)
> 
> reps <- 150
> idcs <- array(rep(NA, d_H * d_C * reps), dim = c(d_H, d_C, reps))
> sars <- array(rep(NA, d_H * d_C * reps), dim = c(d_H, d_C, reps))
> t_tot <- 0
> for (i in 1:d_H) {
+     for (j in 1:d_C) {
+       beta_H <- beta_Hs[i]
+       beta_C <- beta_Cs[j]
+       params <- c(beta_H, beta_C)
+       
+       cat(paste0(format(beta_H, nsmall = 1, digits = 3), '/49.8\t', 
+                  format(beta_C, nsmall = 3, digits = 3), '/0.500\t'))
+ 
+       t_0 <- Sys.time()
+       vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+         results <- SEIR(params, inf) 
+         metrics(results)
+       }
+       t_1 <- Sys.time()
+       t_tot <- t_tot + (t_1 - t_0)
+ 
+       cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+                  format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+ 
+       vals <- matrix(vals, reps, byrow = T)
+       idcs[i, j, ] <- vals[, 1]
+       sars[i, j, ] <- vals[, 2]
+ 
+       cat(paste0(format(round(mean(vals[, 1]), 3), nsmall = 3), '\t',
+                  format(round(mean(vals[, 2]), 3), nsmall = 3), '\n'))
+       
+       saveRDS(idcs, file = 'idcs.rds')
+       saveRDS(sars, file = 'sars.rds')
+       write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+       write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
+     }
+   message('\n')
+ }
47.0/49.8	0.000/0.500	30.64 secs	(30.64 secs)	0.003	0.244
47.0/49.8	0.010/0.500	60.86 secs	(30.22 secs)	0.003	0.201
47.0/49.8	0.020/0.500	92.53 secs	(31.67 secs)	0.004	0.246
47.0/49.8	0.030/0.500	125.05 secs	(32.52 secs)	0.005	0.197
47.0/49.8	0.040/0.500	159.63 secs	(34.58 secs)	0.009	0.230
47.0/49.8	0.050/0.500	196.53 secs	(36.90 secs)	0.011	0.204
47.0/49.8	0.060/0.500	239.93 secs	(43.41 secs)	0.022	0.223
47.0/49.8	0.070/0.500	281.55 secs	(41.62 secs)	0.030	0.194
47.0/49.8	0.080/0.500	331.89 secs	(50.34 secs)	0.052	0.220
47.0/49.8	0.090/0.500	384.97 secs	(53.08 secs)	0.052	0.204
47.0/49.8	0.100/0.500	439.83 secs	(54.86 secs)	0.074	0.178
47.0/49.8	0.110/0.500	513.38 secs	(1.226 mins)	0.131	0.216
47.0/49.8	0.120/0.500	588.00 secs	(1.244 mins)	0.195	0.235
47.0/49.8	0.130/0.500	665.11 secs	(1.285 mins)	0.223	0.228
47.0/49.8	0.140/0.500	745.05 secs	(1.332 mins)	0.250	0.223
47.0/49.8	0.150/0.500	826.78 secs	(1.362 mins)	0.303	0.222
47.0/49.8	0.160/0.500	908.57 secs	(1.363 mins)	0.349	0.227
47.0/49.8	0.170/0.500	999.45 secs	(1.515 mins)	0.452	0.235
47.0/49.8	0.180/0.500	1094.69 secs	(1.587 mins)	0.501	0.232
47.0/49.8	0.190/0.500	1188.13 secs	(1.557 mins)	0.549	0.241
47.0/49.8	0.200/0.500	1285.27 secs	(1.619 mins)	0.614	0.251


47.2/49.8	0.000/0.500	1315.99 secs	(30.73 secs)	0.003	0.240
47.2/49.8	0.010/0.500	1346.36 secs	(30.37 secs)	0.003	0.227
47.2/49.8	0.020/0.500	1377.69 secs	(31.33 secs)	0.004	0.219
47.2/49.8	0.030/0.500	1411.34 secs	(33.65 secs)	0.006	0.218
47.2/49.8	0.040/0.500	1445.05 secs	(33.71 secs)	0.008	0.213
47.2/49.8	0.050/0.500	1480.08 secs	(35.03 secs)	0.012	0.233
47.2/49.8	0.060/0.500	1518.82 secs	(38.74 secs)	0.020	0.220
47.2/49.8	0.070/0.500	1560.90 secs	(42.07 secs)	0.035	0.216
47.2/49.8	0.080/0.500	1613.68 secs	(52.78 secs)	0.042	0.231
47.2/49.8	0.090/0.500	1672.08 secs	(58.41 secs)	0.065	0.209
47.2/49.8	0.100/0.500	1732.92 secs	(1.014 mins)	0.082	0.206
47.2/49.8	0.110/0.500	1792.19 secs	(59.27 secs)	0.109	0.219
47.2/49.8	0.120/0.500	1862.81 secs	(1.177 mins)	0.173	0.230
47.2/49.8	0.130/0.500	1940.41 secs	(1.293 mins)	0.224	0.220
47.2/49.8	0.140/0.500	2023.87 secs	(1.391 mins)	0.289	0.234
47.2/49.8	0.150/0.500	2105.89 secs	(1.367 mins)	0.316	0.239
47.2/49.8	0.160/0.500	2193.36 secs	(1.458 mins)	0.357	0.235
47.2/49.8	0.170/0.500	2286.63 secs	(1.554 mins)	0.506	0.250
47.2/49.8	0.180/0.500	2379.14 secs	(1.542 mins)	0.520	0.245
47.2/49.8	0.190/0.500	2470.23 secs	(1.518 mins)	0.547	0.243
47.2/49.8	0.200/0.500	2566.02 secs	(1.597 mins)	0.652	0.256


47.4/49.8	0.000/0.500	2597.11 secs	(31.09 secs)	0.003	0.236
47.4/49.8	0.010/0.500	2628.21 secs	(31.10 secs)	0.004	0.238
47.4/49.8	0.020/0.500	2659.76 secs	(31.55 secs)	0.004	0.198
47.4/49.8	0.030/0.500	2693.79 secs	(34.04 secs)	0.005	0.219
47.4/49.8	0.040/0.500	2727.33 secs	(33.53 secs)	0.007	0.198
47.4/49.8	0.050/0.500	2763.26 secs	(35.93 secs)	0.013	0.218
47.4/49.8	0.060/0.500	2802.88 secs	(39.62 secs)	0.020	0.198
47.4/49.8	0.070/0.500	2843.81 secs	(40.93 secs)	0.027	0.191
47.4/49.8	0.080/0.500	2892.50 secs	(48.69 secs)	0.042	0.215
47.4/49.8	0.090/0.500	2948.84 secs	(56.34 secs)	0.073	0.216
47.4/49.8	0.100/0.500	3013.42 secs	(1.076 mins)	0.086	0.212
47.4/49.8	0.110/0.500	3082.51 secs	(1.151 mins)	0.126	0.227
47.4/49.8	0.120/0.500	3158.80 secs	(1.271 mins)	0.153	0.224
47.4/49.8	0.130/0.500	3238.86 secs	(1.334 mins)	0.234	0.242
47.4/49.8	0.140/0.500	3318.57 secs	(1.329 mins)	0.256	0.223
47.4/49.8	0.150/0.500	3408.52 secs	(1.499 mins)	0.332	0.228
47.4/49.8	0.160/0.500	3496.82 secs	(1.472 mins)	0.392	0.240
47.4/49.8	0.170/0.500	3585.70 secs	(1.481 mins)	0.457	0.244
47.4/49.8	0.180/0.500	3681.37 secs	(1.595 mins)	0.535	0.243
47.4/49.8	0.190/0.500	3777.94 secs	(1.61 mins)	0.594	0.251
47.4/49.8	0.200/0.500	3871.91 secs	(1.566 mins)	0.625	0.250


47.6/49.8	0.000/0.500	3902.53 secs	(30.62 secs)	0.003	0.227
47.6/49.8	0.010/0.500	3934.26 secs	(31.73 secs)	0.003	0.220
47.6/49.8	0.020/0.500	3965.77 secs	(31.51 secs)	0.004	0.229
47.6/49.8	0.030/0.500	3998.10 secs	(32.32 secs)	0.006	0.205
47.6/49.8	0.040/0.500	4032.96 secs	(34.87 secs)	0.010	0.224
47.6/49.8	0.050/0.500	4069.60 secs	(36.64 secs)	0.014	0.216
47.6/49.8	0.060/0.500	4109.06 secs	(39.46 secs)	0.020	0.214
47.6/49.8	0.070/0.500	4149.69 secs	(40.63 secs)	0.027	0.212
47.6/49.8	0.080/0.500	4196.58 secs	(46.89 secs)	0.043	0.210
47.6/49.8	0.090/0.500	4252.39 secs	(55.81 secs)	0.064	0.220
47.6/49.8	0.100/0.500	4313.05 secs	(1.011 mins)	0.094	0.212
47.6/49.8	0.110/0.500	4377.61 secs	(1.076 mins)	0.133	0.232
47.6/49.8	0.120/0.500	4448.36 secs	(1.179 mins)	0.163	0.243
47.6/49.8	0.130/0.500	4529.48 secs	(1.352 mins)	0.242	0.248
47.6/49.8	0.140/0.500	4609.09 secs	(1.327 mins)	0.262	0.225
47.6/49.8	0.150/0.500	4695.86 secs	(1.446 mins)	0.316	0.235
47.6/49.8	0.160/0.500	4785.74 secs	(1.498 mins)	0.418	0.245
47.6/49.8	0.170/0.500	4874.88 secs	(1.486 mins)	0.451	0.243
47.6/49.8	0.180/0.500	4969.08 secs	(1.57 mins)	0.534	0.241
47.6/49.8	0.190/0.500	5065.50 secs	(1.607 mins)	0.584	0.247
47.6/49.8	0.200/0.500	5161.78 secs	(1.605 mins)	0.668	0.260


47.8/49.8	0.000/0.500	5192.67 secs	(30.89 secs)	0.003	0.262
47.8/49.8	0.010/0.500	5223.87 secs	(31.20 secs)	0.003	0.233
47.8/49.8	0.020/0.500	5256.60 secs	(32.73 secs)	0.004	0.220
47.8/49.8	0.030/0.500	5291.21 secs	(34.61 secs)	0.008	0.223
47.8/49.8	0.040/0.500	5328.37 secs	(37.16 secs)	0.010	0.236
47.8/49.8	0.050/0.500	5365.51 secs	(37.15 secs)	0.014	0.222
47.8/49.8	0.060/0.500	5404.96 secs	(39.44 secs)	0.021	0.220
47.8/49.8	0.070/0.500	5445.60 secs	(40.65 secs)	0.024	0.208
47.8/49.8	0.080/0.500	5493.48 secs	(47.87 secs)	0.045	0.215
47.8/49.8	0.090/0.500	5547.06 secs	(53.58 secs)	0.060	0.207
47.8/49.8	0.100/0.500	5605.00 secs	(57.95 secs)	0.087	0.209
47.8/49.8	0.110/0.500	5669.63 secs	(1.077 mins)	0.111	0.231
47.8/49.8	0.120/0.500	5742.51 secs	(1.215 mins)	0.165	0.226
47.8/49.8	0.130/0.500	5821.66 secs	(1.319 mins)	0.225	0.231
47.8/49.8	0.140/0.500	5901.84 secs	(1.336 mins)	0.234	0.226
47.8/49.8	0.150/0.500	5989.82 secs	(1.466 mins)	0.343	0.232
47.8/49.8	0.160/0.500	6074.39 secs	(1.41 mins)	0.383	0.224
47.8/49.8	0.170/0.500	6165.55 secs	(1.519 mins)	0.451	0.232
47.8/49.8	0.180/0.500	6257.68 secs	(1.535 mins)	0.462	0.221
47.8/49.8	0.190/0.500	6352.86 secs	(1.586 mins)	0.616	0.260
47.8/49.8	0.200/0.500	6448.13 secs	(1.588 mins)	0.627	0.250


48.0/49.8	0.000/0.500	6479.18 secs	(31.05 secs)	0.003	0.238
48.0/49.8	0.010/0.500	6511.04 secs	(31.86 secs)	0.004	0.257
48.0/49.8	0.020/0.500	6543.19 secs	(32.16 secs)	0.005	0.224
48.0/49.8	0.030/0.500	6576.54 secs	(33.35 secs)	0.006	0.214
48.0/49.8	0.040/0.500	6610.90 secs	(34.35 secs)	0.009	0.253
48.0/49.8	0.050/0.500	6646.86 secs	(35.96 secs)	0.013	0.240
48.0/49.8	0.060/0.500	6685.75 secs	(38.89 secs)	0.021	0.233
48.0/49.8	0.070/0.500	6727.48 secs	(41.74 secs)	0.027	0.218
48.0/49.8	0.080/0.500	6777.66 secs	(50.18 secs)	0.047	0.230
48.0/49.8	0.090/0.500	6831.92 secs	(54.25 secs)	0.064	0.222
48.0/49.8	0.100/0.500	6890.47 secs	(58.55 secs)	0.090	0.215
48.0/49.8	0.110/0.500	6953.40 secs	(1.049 mins)	0.131	0.219
48.0/49.8	0.120/0.500	7019.16 secs	(1.096 mins)	0.160	0.224
48.0/49.8	0.130/0.500	7098.63 secs	(1.325 mins)	0.221	0.241
48.0/49.8	0.140/0.500	7181.56 secs	(1.382 mins)	0.271	0.252
48.0/49.8	0.150/0.500	7266.49 secs	(1.416 mins)	0.332	0.231
48.0/49.8	0.160/0.500	7355.24 secs	(1.479 mins)	0.394	0.243
48.0/49.8	0.170/0.500	7445.85 secs	(1.51 mins)	0.456	0.244
48.0/49.8	0.180/0.500	7538.19 secs	(1.539 mins)	0.513	0.240
48.0/49.8	0.190/0.500	7634.53 secs	(1.606 mins)	0.627	0.258
48.0/49.8	0.200/0.500	7732.68 secs	(1.636 mins)	0.643	0.260


48.2/49.8	0.000/0.500	7764.13 secs	(31.44 secs)	0.003	0.261
48.2/49.8	0.010/0.500	7794.71 secs	(30.58 secs)	0.003	0.225
48.2/49.8	0.020/0.500	7826.59 secs	(31.88 secs)	0.005	0.240
48.2/49.8	0.030/0.500	7859.71 secs	(33.12 secs)	0.006	0.216
48.2/49.8	0.040/0.500	7894.00 secs	(34.29 secs)	0.009	0.196
48.2/49.8	0.050/0.500	7930.19 secs	(36.19 secs)	0.014	0.218
48.2/49.8	0.060/0.500	7970.81 secs	(40.61 secs)	0.022	0.219
48.2/49.8	0.070/0.500	8015.50 secs	(44.70 secs)	0.031	0.219
48.2/49.8	0.080/0.500	8063.34 secs	(47.83 secs)	0.041	0.204
48.2/49.8	0.090/0.500	8116.38 secs	(53.04 secs)	0.070	0.218
48.2/49.8	0.100/0.500	8182.64 secs	(1.104 mins)	0.094	0.229
48.2/49.8	0.110/0.500	8254.21 secs	(1.193 mins)	0.132	0.216
48.2/49.8	0.120/0.500	8329.43 secs	(1.254 mins)	0.175	0.243
48.2/49.8	0.130/0.500	8408.25 secs	(1.314 mins)	0.246	0.244
48.2/49.8	0.140/0.500	8490.07 secs	(1.364 mins)	0.283	0.239
48.2/49.8	0.150/0.500	8579.40 secs	(1.489 mins)	0.347	0.241
48.2/49.8	0.160/0.500	8670.25 secs	(1.514 mins)	0.442	0.244
48.2/49.8	0.170/0.500	8760.30 secs	(1.501 mins)	0.499	0.257
48.2/49.8	0.180/0.500	8852.77 secs	(1.541 mins)	0.523	0.243
48.2/49.8	0.190/0.500	8947.01 secs	(1.571 mins)	0.535	0.238
48.2/49.8	0.200/0.500	9045.39 secs	(1.64 mins)	0.657	0.258


48.4/49.8	0.000/0.500	9075.99 secs	(30.60 secs)	0.003	0.228
48.4/49.8	0.010/0.500	9107.33 secs	(31.34 secs)	0.004	0.240
48.4/49.8	0.020/0.500	9139.25 secs	(31.93 secs)	0.005	0.221
48.4/49.8	0.030/0.500	9171.56 secs	(32.30 secs)	0.006	0.226
48.4/49.8	0.040/0.500	9206.28 secs	(34.72 secs)	0.011	0.217
48.4/49.8	0.050/0.500	9243.40 secs	(37.12 secs)	0.012	0.199
48.4/49.8	0.060/0.500	9284.69 secs	(41.29 secs)	0.023	0.217
48.4/49.8	0.070/0.500	9328.76 secs	(44.08 secs)	0.030	0.230
48.4/49.8	0.080/0.500	9376.72 secs	(47.95 secs)	0.047	0.203
48.4/49.8	0.090/0.500	9429.08 secs	(52.36 secs)	0.062	0.232
48.4/49.8	0.100/0.500	9487.84 secs	(58.76 secs)	0.093	0.223
48.4/49.8	0.110/0.500	9550.19 secs	(1.039 mins)	0.121	0.216
48.4/49.8	0.120/0.500	9622.50 secs	(1.205 mins)	0.173	0.238
48.4/49.8	0.130/0.500	9701.24 secs	(1.312 mins)	0.215	0.236
48.4/49.8	0.140/0.500	9782.85 secs	(1.36 mins)	0.290	0.241
48.4/49.8	0.150/0.500	9870.87 secs	(1.467 mins)	0.364	0.253
48.4/49.8	0.160/0.500	9963.28 secs	(1.54 mins)	0.428	0.243
48.4/49.8	0.170/0.500	10059.40 secs	(1.602 mins)	0.493	0.251
48.4/49.8	0.180/0.500	10156.07 secs	(1.611 mins)	0.568	0.250
48.4/49.8	0.190/0.500	10251.22 secs	(1.586 mins)	0.577	0.250
48.4/49.8	0.200/0.500	10346.57 secs	(1.589 mins)	0.614	0.243


48.6/49.8	0.000/0.500	10377.70 secs	(31.13 secs)	0.003	0.245
48.6/49.8	0.010/0.500	10408.74 secs	(31.05 secs)	0.003	0.225
48.6/49.8	0.020/0.500	10440.51 secs	(31.77 secs)	0.004	0.209
48.6/49.8	0.030/0.500	10472.73 secs	(32.21 secs)	0.005	0.237
48.6/49.8	0.040/0.500	10508.73 secs	(36.00 secs)	0.010	0.205
48.6/49.8	0.050/0.500	10544.51 secs	(35.78 secs)	0.013	0.217
48.6/49.8	0.060/0.500	10586.96 secs	(42.45 secs)	0.021	0.233
48.6/49.8	0.070/0.500	10628.91 secs	(41.95 secs)	0.028	0.213
48.6/49.8	0.080/0.500	10678.51 secs	(49.60 secs)	0.047	0.216
48.6/49.8	0.090/0.500	10732.73 secs	(54.22 secs)	0.063	0.210
48.6/49.8	0.100/0.500	10795.15 secs	(1.04 mins)	0.089	0.222
48.6/49.8	0.110/0.500	10864.25 secs	(1.152 mins)	0.137	0.225
48.6/49.8	0.120/0.500	10934.03 secs	(1.163 mins)	0.175	0.209
48.6/49.8	0.130/0.500	11011.50 secs	(1.291 mins)	0.245	0.232
48.6/49.8	0.140/0.500	11095.69 secs	(1.403 mins)	0.325	0.256
48.6/49.8	0.150/0.500	11181.37 secs	(1.428 mins)	0.355	0.245
48.6/49.8	0.160/0.500	11270.72 secs	(1.489 mins)	0.411	0.244
48.6/49.8	0.170/0.500	11361.11 secs	(1.507 mins)	0.429	0.227
48.6/49.8	0.180/0.500	11455.48 secs	(1.573 mins)	0.560	0.249
48.6/49.8	0.190/0.500	11549.78 secs	(1.572 mins)	0.576	0.248
48.6/49.8	0.200/0.500	11645.32 secs	(1.592 mins)	0.625	0.257


48.8/49.8	0.000/0.500	11676.09 secs	(30.78 secs)	0.003	0.221
48.8/49.8	0.010/0.500	11707.45 secs	(31.36 secs)	0.003	0.220
48.8/49.8	0.020/0.500	11739.45 secs	(32.00 secs)	0.005	0.246
48.8/49.8	0.030/0.500	11771.19 secs	(31.74 secs)	0.005	0.186
48.8/49.8	0.040/0.500	11806.12 secs	(34.93 secs)	0.010	0.209
48.8/49.8	0.050/0.500	11842.46 secs	(36.33 secs)	0.012	0.214
48.8/49.8	0.060/0.500	11881.40 secs	(38.95 secs)	0.019	0.215
48.8/49.8	0.070/0.500	11927.80 secs	(46.40 secs)	0.037	0.219
48.8/49.8	0.080/0.500	11978.95 secs	(51.15 secs)	0.050	0.223
48.8/49.8	0.090/0.500	12032.28 secs	(53.32 secs)	0.066	0.224
48.8/49.8	0.100/0.500	12092.49 secs	(1.003 mins)	0.101	0.223
48.8/49.8	0.110/0.500	12153.76 secs	(1.021 mins)	0.126	0.227
48.8/49.8	0.120/0.500	12228.60 secs	(1.247 mins)	0.177	0.220
48.8/49.8	0.130/0.500	12305.07 secs	(1.274 mins)	0.231	0.228
48.8/49.8	0.140/0.500	12385.68 secs	(1.344 mins)	0.284	0.226
48.8/49.8	0.150/0.500	12469.72 secs	(1.401 mins)	0.343	0.241
48.8/49.8	0.160/0.500	12560.16 secs	(1.507 mins)	0.399	0.240
48.8/49.8	0.170/0.500	12650.01 secs	(1.497 mins)	0.466	0.256
48.8/49.8	0.180/0.500	12745.37 secs	(1.589 mins)	0.559	0.256
48.8/49.8	0.190/0.500	12838.23 secs	(1.548 mins)	0.577	0.249
48.8/49.8	0.200/0.500	12935.90 secs	(1.628 mins)	0.647	0.254


49.0/49.8	0.000/0.500	12967.50 secs	(31.59 secs)	0.003	0.217
49.0/49.8	0.010/0.500	12998.26 secs	(30.76 secs)	0.003	0.235
49.0/49.8	0.020/0.500	13030.33 secs	(32.07 secs)	0.005	0.236
49.0/49.8	0.030/0.500	13062.59 secs	(32.26 secs)	0.006	0.236
49.0/49.8	0.040/0.500	13096.98 secs	(34.39 secs)	0.009	0.232
49.0/49.8	0.050/0.500	13135.81 secs	(38.84 secs)	0.013	0.222
49.0/49.8	0.060/0.500	13173.67 secs	(37.86 secs)	0.018	0.225
49.0/49.8	0.070/0.500	13215.43 secs	(41.76 secs)	0.030	0.214
49.0/49.8	0.080/0.500	13265.31 secs	(49.88 secs)	0.051	0.210
49.0/49.8	0.090/0.500	13321.68 secs	(56.37 secs)	0.072	0.227
49.0/49.8	0.100/0.500	13385.24 secs	(1.059 mins)	0.104	0.239
49.0/49.8	0.110/0.500	13453.16 secs	(1.132 mins)	0.124	0.226
49.0/49.8	0.120/0.500	13531.16 secs	(1.30 mins)	0.177	0.240
49.0/49.8	0.130/0.500	13606.91 secs	(1.262 mins)	0.211	0.226
49.0/49.8	0.140/0.500	13685.08 secs	(1.303 mins)	0.259	0.224
49.0/49.8	0.150/0.500	13769.72 secs	(1.411 mins)	0.317	0.222
49.0/49.8	0.160/0.500	13858.56 secs	(1.481 mins)	0.418	0.255
49.0/49.8	0.170/0.500	13949.14 secs	(1.51 mins)	0.442	0.231
49.0/49.8	0.180/0.500	14041.93 secs	(1.547 mins)	0.540	0.249
49.0/49.8	0.190/0.500	14137.58 secs	(1.594 mins)	0.586	0.248
49.0/49.8	0.200/0.500	14233.73 secs	(1.603 mins)	0.655	0.266


49.2/49.8	0.000/0.500	14264.51 secs	(30.78 secs)	0.003	0.264
49.2/49.8	0.010/0.500	14296.42 secs	(31.91 secs)	0.004	0.264
49.2/49.8	0.020/0.500	14327.44 secs	(31.02 secs)	0.004	0.246
49.2/49.8	0.030/0.500	14361.27 secs	(33.83 secs)	0.008	0.225
49.2/49.8	0.040/0.500	14396.50 secs	(35.23 secs)	0.011	0.232
49.2/49.8	0.050/0.500	14432.40 secs	(35.90 secs)	0.014	0.226
49.2/49.8	0.060/0.500	14473.31 secs	(40.92 secs)	0.023	0.230
49.2/49.8	0.070/0.500	14518.51 secs	(45.20 secs)	0.026	0.213
49.2/49.8	0.080/0.500	14563.86 secs	(45.34 secs)	0.039	0.212
49.2/49.8	0.090/0.500	14620.07 secs	(56.22 secs)	0.061	0.216
49.2/49.8	0.100/0.500	14680.79 secs	(1.012 mins)	0.087	0.229
49.2/49.8	0.110/0.500	14750.83 secs	(1.167 mins)	0.135	0.217
49.2/49.8	0.120/0.500	14825.02 secs	(1.237 mins)	0.183	0.240
49.2/49.8	0.130/0.500	14904.82 secs	(1.33 mins)	0.255	0.235
49.2/49.8	0.140/0.500	14990.36 secs	(1.426 mins)	0.302	0.248
49.2/49.8	0.150/0.500	15081.53 secs	(1.52 mins)	0.363	0.232
49.2/49.8	0.160/0.500	15171.59 secs	(1.501 mins)	0.409	0.248
49.2/49.8	0.170/0.500	15262.37 secs	(1.513 mins)	0.501	0.256
49.2/49.8	0.180/0.500	15355.78 secs	(1.557 mins)	0.519	0.255
49.2/49.8	0.190/0.500	15452.00 secs	(1.604 mins)	0.597	0.259
49.2/49.8	0.200/0.500	15550.06 secs	(1.634 mins)	0.661	0.253


49.4/49.8	0.000/0.500	15581.23 secs	(31.17 secs)	0.003	0.251
49.4/49.8	0.010/0.500	15612.48 secs	(31.24 secs)	0.004	0.260
49.4/49.8	0.020/0.500	15644.72 secs	(32.24 secs)	0.005	0.232
49.4/49.8	0.030/0.500	15678.10 secs	(33.39 secs)	0.007	0.230
49.4/49.8	0.040/0.500	15711.80 secs	(33.70 secs)	0.008	0.255
49.4/49.8	0.050/0.500	15746.61 secs	(34.81 secs)	0.009	0.202
49.4/49.8	0.060/0.500	15787.54 secs	(40.93 secs)	0.018	0.218
49.4/49.8	0.070/0.500	15831.52 secs	(43.98 secs)	0.029	0.244
49.4/49.8	0.080/0.500	15881.80 secs	(50.28 secs)	0.046	0.222
49.4/49.8	0.090/0.500	15936.90 secs	(55.11 secs)	0.069	0.224
49.4/49.8	0.100/0.500	16000.35 secs	(1.057 mins)	0.083	0.232
49.4/49.8	0.110/0.500	16067.14 secs	(1.113 mins)	0.129	0.237
49.4/49.8	0.120/0.500	16145.93 secs	(1.313 mins)	0.172	0.237
49.4/49.8	0.130/0.500	16221.90 secs	(1.266 mins)	0.253	0.245
49.4/49.8	0.140/0.500	16307.38 secs	(1.425 mins)	0.285	0.243
49.4/49.8	0.150/0.500	16393.73 secs	(1.439 mins)	0.333	0.237
49.4/49.8	0.160/0.500	16485.32 secs	(1.527 mins)	0.413	0.258
49.4/49.8	0.170/0.500	16578.45 secs	(1.552 mins)	0.474	0.238
49.4/49.8	0.180/0.500	16674.28 secs	(1.597 mins)	0.550	0.258
49.4/49.8	0.190/0.500	16769.78 secs	(1.592 mins)	0.584	0.249
49.4/49.8	0.200/0.500	16865.86 secs	(1.601 mins)	0.653	0.252


49.6/49.8	0.000/0.500	16897.10 secs	(31.24 secs)	0.003	0.253
49.6/49.8	0.010/0.500	16928.27 secs	(31.17 secs)	0.003	0.234
49.6/49.8	0.020/0.500	16960.74 secs	(32.47 secs)	0.004	0.250
49.6/49.8	0.030/0.500	16994.70 secs	(33.96 secs)	0.007	0.231
49.6/49.8	0.040/0.500	17029.99 secs	(35.29 secs)	0.009	0.233
49.6/49.8	0.050/0.500	17065.66 secs	(35.67 secs)	0.013	0.226
49.6/49.8	0.060/0.500	17105.99 secs	(40.34 secs)	0.020	0.220
49.6/49.8	0.070/0.500	17150.78 secs	(44.79 secs)	0.031	0.229
49.6/49.8	0.080/0.500	17199.55 secs	(48.77 secs)	0.043	0.219
49.6/49.8	0.090/0.500	17253.68 secs	(54.13 secs)	0.076	0.248
49.6/49.8	0.100/0.500	17315.52 secs	(1.031 mins)	0.102	0.234
49.6/49.8	0.110/0.500	17382.10 secs	(1.11 mins)	0.127	0.238
49.6/49.8	0.120/0.500	17456.18 secs	(1.235 mins)	0.177	0.224
49.6/49.8	0.130/0.500	17533.50 secs	(1.289 mins)	0.242	0.238
49.6/49.8	0.140/0.500	17614.93 secs	(1.357 mins)	0.285	0.236
49.6/49.8	0.150/0.500	17705.47 secs	(1.509 mins)	0.366	0.247
49.6/49.8	0.160/0.500	17791.93 secs	(1.441 mins)	0.409	0.238
49.6/49.8	0.170/0.500	17885.53 secs	(1.56 mins)	0.486	0.260
49.6/49.8	0.180/0.500	17982.15 secs	(1.61 mins)	0.553	0.252
49.6/49.8	0.190/0.500	18075.01 secs	(1.548 mins)	0.557	0.254
49.6/49.8	0.200/0.500	18171.42 secs	(1.607 mins)	0.612	0.247


49.8/49.8	0.000/0.500	18202.50 secs	(31.08 secs)	0.003	0.260
49.8/49.8	0.010/0.500	18234.04 secs	(31.54 secs)	0.004	0.232
49.8/49.8	0.020/0.500	18265.36 secs	(31.32 secs)	0.004	0.220
49.8/49.8	0.030/0.500	18299.22 secs	(33.85 secs)	0.008	0.246
49.8/49.8	0.040/0.500	18333.33 secs	(34.12 secs)	0.010	0.245
49.8/49.8	0.050/0.500	18369.06 secs	(35.72 secs)	0.012	0.220
49.8/49.8	0.060/0.500	18410.49 secs	(41.43 secs)	0.022	0.218
49.8/49.8	0.070/0.500	18455.28 secs	(44.79 secs)	0.034	0.226
49.8/49.8	0.080/0.500	18505.48 secs	(50.20 secs)	0.042	0.236
49.8/49.8	0.090/0.500	18558.56 secs	(53.07 secs)	0.064	0.224
49.8/49.8	0.100/0.500	18623.89 secs	(1.089 mins)	0.116	0.261
49.8/49.8	0.110/0.500	18690.55 secs	(1.111 mins)	0.153	0.240
49.8/49.8	0.120/0.500	18758.94 secs	(1.14 mins)	0.182	0.229
49.8/49.8	0.130/0.500	18837.77 secs	(1.314 mins)	0.223	0.234
49.8/49.8	0.140/0.500	18922.62 secs	(1.414 mins)	0.333	0.261
49.8/49.8	0.150/0.500	19009.45 secs	(1.447 mins)	0.365	0.253
49.8/49.8	0.160/0.500	19100.37 secs	(1.515 mins)	0.457	0.246
49.8/49.8	0.170/0.500	19189.94 secs	(1.493 mins)	0.465	0.266
49.8/49.8	0.180/0.500	19282.27 secs	(1.539 mins)	0.515	0.245
49.8/49.8	0.190/0.500	19378.72 secs	(1.607 mins)	0.600	0.263
49.8/49.8	0.200/0.500	19472.71 secs	(1.567 mins)	0.616	0.254


> 
> proc.time()
     user    system   elapsed 
482124.34  11440.31  19563.80 
