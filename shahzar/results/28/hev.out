
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   #return(sum((obs - target)^2))
+   
+   # The score is the binary cross entropy.
+   #return(-sum(tgt*log(fit) + (1 - tgt)*log(1 - fit)))
+   
+   # The score is the L¹ distance of the fitted values from the target.
+   return(sum(abs(fit - tgt)))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state <= 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.05, 0.0005)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 2, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat(i, '\t[', 
+         format(curr[1], nsmall = 2), '\t', 
+         format(curr[2], nsmall = 4), ']\t', 
+         format(curr_lik, nsmall = 3), '\t')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat('[', 
+         format(prop[1], nsmall = 2), '\t', 
+         format(prop[2], nsmall = 4), ']\t',
+         format(prop_lik, nsmall = 3), '\t')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(r, nsmall = 3), '\t', format(p, nsmall = 3), '\n')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> tgt <- c(0.30, 0.25)
> start <- c(52.7367735229351, 0.121308277642932)
> results <- metropolis(start, tgt, num_sim = 1000, num_iter = 1000)
1 	[ 52.73677 	 0.1213083 ]	 5.362761 	[ 52.78921 	 0.1211515 ]	 5.325707 	0.9636249 	 0.1080209 
2 	[ 52.78921 	 0.1211515 ]	 5.325707 	[ 52.82823 	 0.1219028 ]	 4.281584 	0.3520001 	 0.2722547 
3 	[ 52.82823 	 0.1219028 ]	 4.281584 	[ 52.81569 	 0.121976 ]	 5.207035 	2.523007 	 0.7788702 
4 	[ 52.81569 	 0.121976 ]	 5.207035 	[ 52.83323 	 0.1226532 ]	 4.291248 	0.4002012 	 0.7494975 
5 	[ 52.81569 	 0.121976 ]	 5.207035 	[ 52.90737 	 0.1223135 ]	 3.754105 	0.233884 	 0.5837359 
6 	[ 52.81569 	 0.121976 ]	 5.207035 	[ 52.85081 	 0.1214957 ]	 4.649841 	0.5728139 	 0.7679965 
7 	[ 52.81569 	 0.121976 ]	 5.207035 	[ 52.79373 	 0.1221673 ]	 5.809106 	1.825895 	 0.2745276 
8 	[ 52.79373 	 0.1221673 ]	 5.809106 	[ 52.7216 	 0.1215833 ]	 5.874093 	1.067145 	 0.3513535 
9 	[ 52.7216 	 0.1215833 ]	 5.874093 	[ 52.75075 	 0.1217925 ]	 4.778103 	0.3342086 	 0.2174305 
10 	[ 52.75075 	 0.1217925 ]	 4.778103 	[ 52.75988 	 0.1222148 ]	 4.861597 	1.087078 	 0.0949085 
11 	[ 52.75988 	 0.1222148 ]	 4.861597 	[ 52.73402 	 0.1226491 ]	 4.467745 	0.6744543 	 0.8229581 
12 	[ 52.75988 	 0.1222148 ]	 4.861597 	[ 52.71536 	 0.1224647 ]	 5.065477 	1.226152 	 0.4608687 
13 	[ 52.71536 	 0.1224647 ]	 5.065477 	[ 52.70887 	 0.1220868 ]	 4.292263 	0.4615275 	 0.07022704 
14 	[ 52.70887 	 0.1220868 ]	 4.292263 	[ 52.75056 	 0.1215041 ]	 4.489443 	1.217963 	 0.7104859 
15 	[ 52.75056 	 0.1215041 ]	 4.489443 	[ 52.78484 	 0.1208555 ]	 4.911272 	1.524748 	 0.3329423 
16 	[ 52.78484 	 0.1208555 ]	 4.911272 	[ 52.72551 	 0.120336 ]	 4.708505 	0.8164684 	 0.3838171 
17 	[ 52.72551 	 0.120336 ]	 4.708505 	[ 52.7464 	 0.1197264 ]	 3.580513 	0.3236824 	 0.8686252 
18 	[ 52.72551 	 0.120336 ]	 4.708505 	[ 52.70638 	 0.1214641 ]	 5.362879 	1.923937 	 0.6940667 
19 	[ 52.70638 	 0.1214641 ]	 5.362879 	[ 52.69733 	 0.1218701 ]	 4.023824 	0.2620931 	 0.5485949 
20 	[ 52.70638 	 0.1214641 ]	 5.362879 	[ 52.70366 	 0.1213738 ]	 5.070526 	0.7465052 	 0.1283418 
21 	[ 52.70366 	 0.1213738 ]	 5.070526 	[ 52.72482 	 0.1213473 ]	 4.979799 	0.913267 	 0.9291732 
22 	[ 52.70366 	 0.1213738 ]	 5.070526 	[ 52.56448 	 0.1207483 ]	 3.613485 	0.2329245 	 0.3874135 
23 	[ 52.70366 	 0.1213738 ]	 5.070526 	[ 52.81442 	 0.121172 ]	 5.399787 	1.38994 	 0.7702238 
24 	[ 52.81442 	 0.121172 ]	 5.399787 	[ 52.71817 	 0.1212877 ]	 4.564647 	0.4338139 	 0.2953177 
25 	[ 52.71817 	 0.1212877 ]	 4.564647 	[ 52.78671 	 0.1217217 ]	 4.319092 	0.7822699 	 0.6486274 
26 	[ 52.78671 	 0.1217217 ]	 4.319092 	[ 52.73132 	 0.1207916 ]	 4.310299 	0.9912461 	 0.4295965 
27 	[ 52.73132 	 0.1207916 ]	 4.310299 	[ 52.76093 	 0.1206784 ]	 4.856991 	1.727528 	 0.2392422 
28 	[ 52.76093 	 0.1206784 ]	 4.856991 	[ 52.80815 	 0.1209568 ]	 4.087008 	0.4630207 	 0.517257 
29 	[ 52.76093 	 0.1206784 ]	 4.856991 	[ 52.82038 	 0.1209367 ]	 3.899519 	0.3838622 	 0.4710094 
30 	[ 52.76093 	 0.1206784 ]	 4.856991 	[ 52.77699 	 0.1204017 ]	 4.271633 	0.5569061 	 0.3730127 
31 	[ 52.77699 	 0.1204017 ]	 4.271633 	[ 52.76819 	 0.1201768 ]	 3.922478 	0.7052842 	 0.2109762 
32 	[ 52.76819 	 0.1201768 ]	 3.922478 	[ 52.78244 	 0.1206058 ]	 5.509467 	4.889003 	 0.6049154 
33 	[ 52.78244 	 0.1206058 ]	 5.509467 	[ 52.72498 	 0.1211156 ]	 4.138421 	0.2538415 	 0.2542747 
34 	[ 52.78244 	 0.1206058 ]	 5.509467 	[ 52.81121 	 0.1204847 ]	 3.94808 	0.2098448 	 0.851303 
35 	[ 52.78244 	 0.1206058 ]	 5.509467 	[ 52.76976 	 0.1211029 ]	 4.401693 	0.3302936 	 0.9365271 
36 	[ 52.78244 	 0.1206058 ]	 5.509467 	[ 52.79407 	 0.1209425 ]	 8.020612 	12.31903 	 0.4335612 
37 	[ 52.79407 	 0.1209425 ]	 8.020612 	[ 52.90599 	 0.1213238 ]	 4.651989 	0.03443703 	 0.590142 
38 	[ 52.79407 	 0.1209425 ]	 8.020612 	[ 52.72625 	 0.1212545 ]	 3.869753 	0.01575087 	 0.9741431 
39 	[ 52.79407 	 0.1209425 ]	 8.020612 	[ 52.74417 	 0.1206526 ]	 4.892389 	0.04379556 	 0.9497261 
40 	[ 52.79407 	 0.1209425 ]	 8.020612 	[ 52.75366 	 0.1209176 ]	 5.393713 	0.0723023 	 0.6214004 
41 	[ 52.79407 	 0.1209425 ]	 8.020612 	[ 52.86521 	 0.1207371 ]	 4.510391 	0.02989031 	 0.006060109 
42 	[ 52.86521 	 0.1207371 ]	 4.510391 	[ 52.95091 	 0.1207534 ]	 4.737933 	1.255509 	 0.08435716 
43 	[ 52.95091 	 0.1207534 ]	 4.737933 	[ 52.9695 	 0.1207934 ]	 3.672842 	0.3446965 	 0.1324436 
44 	[ 52.9695 	 0.1207934 ]	 3.672842 	[ 53.09488 	 0.1205765 ]	 5.85951 	8.90549 	 0.9092673 
45 	[ 53.09488 	 0.1205765 ]	 5.85951 	[ 53.03229 	 0.1205589 ]	 4.678487 	0.3069647 	 0.1151574 
46 	[ 53.03229 	 0.1205589 ]	 4.678487 	[ 52.93185 	 0.1196517 ]	 4.557627 	0.886158 	 0.7883179 
47 	[ 52.93185 	 0.1196517 ]	 4.557627 	[ 53.01961 	 0.1196738 ]	 4.356507 	0.8178146 	 0.08585713 
48 	[ 53.01961 	 0.1196738 ]	 4.356507 	[ 53.06234 	 0.1204518 ]	 6.128834 	5.884531 	 0.9197952 
49 	[ 53.06234 	 0.1204518 ]	 6.128834 	[ 53.08348 	 0.1204401 ]	 4.37284 	0.1727353 	 0.9594857 
50 	[ 53.06234 	 0.1204518 ]	 6.128834 	[ 53.07185 	 0.1207069 ]	 4.008762 	0.1200229 	 0.1164865 
51 	[ 53.07185 	 0.1207069 ]	 4.008762 	[ 53.04194 	 0.1213374 ]	 5.69073 	5.376124 	 0.02978529 
52 	[ 53.04194 	 0.1213374 ]	 5.69073 	[ 52.98075 	 0.1214545 ]	 4.14376 	0.2128921 	 0.4139514 
53 	[ 53.04194 	 0.1213374 ]	 5.69073 	[ 53.01531 	 0.1216415 ]	 5.523624 	0.8461102 	 0.6361421 
54 	[ 53.01531 	 0.1216415 ]	 5.523624 	[ 53.00202 	 0.1221 ]	 5.737195 	1.238092 	 0.04212956 
55 	[ 53.00202 	 0.1221 ]	 5.737195 	[ 53.1543 	 0.1223324 ]	 4.10643 	0.1957796 	 0.01243621 
56 	[ 53.1543 	 0.1223324 ]	 4.10643 	[ 53.09054 	 0.1221589 ]	 4.518974 	1.510657 	 0.8395292 
57 	[ 53.09054 	 0.1221589 ]	 4.518974 	[ 53.09815 	 0.1219091 ]	 6.005004 	4.419515 	 0.6789819 
58 	[ 53.09815 	 0.1219091 ]	 6.005004 	[ 53.125 	 0.121352 ]	 4.058876 	0.142826 	 0.726466 
59 	[ 53.09815 	 0.1219091 ]	 6.005004 	[ 53.06343 	 0.1214014 ]	 4.171529 	0.1598572 	 0.6066482 
60 	[ 53.09815 	 0.1219091 ]	 6.005004 	[ 53.152 	 0.121085 ]	 5.09608 	0.4029575 	 0.1989319 
61 	[ 53.152 	 0.121085 ]	 5.09608 	[ 53.12715 	 0.1210821 ]	 3.888161 	0.2988184 	 0.3110308 
62 	[ 53.152 	 0.121085 ]	 5.09608 	[ 53.19002 	 0.1210566 ]	 6.656558 	4.761098 	 0.371875 
63 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.17676 	 0.1214025 ]	 4.211497 	0.08672084 	 0.2951368 
64 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.23551 	 0.1211354 ]	 3.810161 	0.05805311 	 0.9465631 
65 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.19454 	 0.1202389 ]	 5.425963 	0.2921187 	 0.5542776 
66 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.12179 	 0.1206583 ]	 3.939456 	0.06606595 	 0.3679743 
67 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.23671 	 0.1222842 ]	 4.31204 	0.09589337 	 0.1575785 
68 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.3893 	 0.1215744 ]	 4.922526 	0.176571 	 0.2446762 
69 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.22689 	 0.1213492 ]	 4.655737 	0.1352242 	 0.3519928 
70 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.27075 	 0.121183 ]	 4.664586 	0.136426 	 0.1489376 
71 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.1911 	 0.1212723 ]	 4.732657 	0.1460362 	 0.5187141 
72 	[ 53.19002 	 0.1210566 ]	 6.656558 	[ 53.22682 	 0.1215819 ]	 4.893219 	0.1714714 	 0.0944047 
73 	[ 53.22682 	 0.1215819 ]	 4.893219 	[ 53.31374 	 0.1225958 ]	 4.43247 	0.6308106 	 0.5559059 
74 	[ 53.31374 	 0.1225958 ]	 4.43247 	[ 53.23255 	 0.1219061 ]	 5.958498 	4.59987 	 0.4299255 
75 	[ 53.23255 	 0.1219061 ]	 5.958498 	[ 53.25578 	 0.1216471 ]	 5.714049 	0.7831361 	 0.6991705 
76 	[ 53.25578 	 0.1216471 ]	 5.714049 	[ 53.23891 	 0.1204813 ]	 6.475017 	2.140346 	 0.813852 
77 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.14965 	 0.1210776 ]	 5.235114 	0.2894125 	 0.3338923 
78 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.17174 	 0.1196378 ]	 4.592876 	0.1522639 	 0.7914317 
79 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.2438 	 0.1207083 ]	 5.181216 	0.2742266 	 0.502631 
80 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.17586 	 0.1199146 ]	 3.533453 	0.05278311 	 0.5716574 
81 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.28835 	 0.1196222 ]	 3.982295 	0.08268467 	 0.2425659 
82 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.19987 	 0.1199326 ]	 4.569012 	0.1486733 	 0.2617597 
83 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.15745 	 0.1205145 ]	 5.048396 	0.240119 	 0.9443353 
84 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.28052 	 0.119636 ]	 4.543695 	0.1449565 	 0.9800788 
85 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.30197 	 0.1202653 ]	 4.477924 	0.1357293 	 0.9385559 
86 	[ 53.23891 	 0.1204813 ]	 6.475017 	[ 53.22009 	 0.1200439 ]	 5.374751 	0.3327827 	 0.09800309 
87 	[ 53.22009 	 0.1200439 ]	 5.374751 	[ 53.25156 	 0.11963 ]	 3.711863 	0.1895906 	 0.5130945 
88 	[ 53.22009 	 0.1200439 ]	 5.374751 	[ 53.24718 	 0.1205701 ]	 5.265277 	0.896305 	 0.8018591 
89 	[ 53.24718 	 0.1205701 ]	 5.265277 	[ 53.18884 	 0.1205754 ]	 5.737777 	1.604 	 0.3512707 
90 	[ 53.18884 	 0.1205754 ]	 5.737777 	[ 53.2013 	 0.1212594 ]	 5.779326 	1.042424 	 0.7119642 
91 	[ 53.2013 	 0.1212594 ]	 5.779326 	[ 53.1776 	 0.1215169 ]	 4.829801 	0.3869248 	 0.6329521 
92 	[ 53.2013 	 0.1212594 ]	 5.779326 	[ 53.20324 	 0.1214089 ]	 4.462096 	0.2678763 	 0.1912961 
93 	[ 53.20324 	 0.1214089 ]	 4.462096 	[ 53.34548 	 0.1221421 ]	 3.936918 	0.59145 	 0.7847817 
94 	[ 53.20324 	 0.1214089 ]	 4.462096 	[ 53.25947 	 0.1211351 ]	 4.999932 	1.712298 	 0.07645219 
95 	[ 53.25947 	 0.1211351 ]	 4.999932 	[ 53.2942 	 0.1206987 ]	 3.648781 	0.2589421 	 0.3191446 
96 	[ 53.25947 	 0.1211351 ]	 4.999932 	[ 53.33014 	 0.1212602 ]	 4.436439 	0.5692172 	 0.5652956 
97 	[ 53.33014 	 0.1212602 ]	 4.436439 	[ 53.40913 	 0.1215595 ]	 5.334388 	2.454564 	 0.6065218 
98 	[ 53.40913 	 0.1215595 ]	 5.334388 	[ 53.45466 	 0.1212673 ]	 5.044678 	0.7484809 	 0.198506 
99 	[ 53.45466 	 0.1212673 ]	 5.044678 	[ 53.36439 	 0.1214447 ]	 7.213751 	8.750167 	 0.2116784 
100 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.32314 	 0.1212848 ]	 5.063616 	0.1164685 	 0.9700178 
101 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.29209 	 0.1220992 ]	 4.993807 	0.1086152 	 0.8836875 
102 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.3415 	 0.1207069 ]	 4.512512 	0.06712227 	 0.7526946 
103 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.36691 	 0.121262 ]	 4.585876 	0.07223182 	 0.3426362 
104 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.38692 	 0.1208377 ]	 5.055982 	0.1155827 	 0.6026739 
105 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.35362 	 0.1216812 ]	 4.698973 	0.08088086 	 0.3381572 
106 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.44549 	 0.1213094 ]	 5.411153 	0.16487 	 0.7875793 
107 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.37414 	 0.1222126 ]	 6.467435 	0.4741097 	 0.8129819 
108 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.34492 	 0.1218209 ]	 4.862286 	0.09522955 	 0.2780793 
109 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.3389 	 0.1219546 ]	 4.736046 	0.08393559 	 0.4123974 
110 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.29773 	 0.1212782 ]	 4.439093 	0.06237078 	 0.3234207 
111 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.38024 	 0.1211848 ]	 4.454104 	0.06331411 	 0.7742761 
112 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.36107 	 0.1213366 ]	 4.971872 	0.1062586 	 0.9095705 
113 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.3478 	 0.1222152 ]	 4.981097 	0.1072434 	 0.5677068 
114 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.32986 	 0.121803 ]	 4.975855 	0.1066827 	 0.3610553 
115 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.38621 	 0.1217751 ]	 5.170866 	0.1296541 	 0.8613111 
116 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.3036 	 0.121242 ]	 4.301986 	0.05437965 	 0.9435007 
117 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.26569 	 0.1212667 ]	 5.436389 	0.1690836 	 0.4291367 
118 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.29764 	 0.1205447 ]	 5.175505 	0.130257 	 0.8803202 
119 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.38494 	 0.1216641 ]	 4.066465 	0.0429686 	 0.1702798 
120 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.32295 	 0.1212713 ]	 4.266275 	0.05247198 	 0.6921272 
121 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.31981 	 0.1221171 ]	 3.937515 	0.03777016 	 0.6910888 
122 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.30684 	 0.121777 ]	 5.263274 	0.1422062 	 0.8568628 
123 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.35551 	 0.1216559 ]	 3.81506 	0.03341697 	 0.805155 
124 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.27846 	 0.1213196 ]	 4.740617 	0.08432017 	 0.1189987 
125 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.34411 	 0.1213099 ]	 4.686748 	0.07989811 	 0.1412011 
126 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.30796 	 0.1215964 ]	 5.4633 	0.1736955 	 0.3573769 
127 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.31141 	 0.1219715 ]	 4.251156 	0.05168459 	 0.1627007 
128 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.38299 	 0.1212719 ]	 4.721773 	0.08274611 	 0.8119527 
129 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.34494 	 0.121319 ]	 5.028013 	0.1123947 	 0.9667487 
130 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.38846 	 0.1216411 ]	 4.118441 	0.04526096 	 0.8879275 
131 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.30897 	 0.1216551 ]	 5.204155 	0.1340428 	 0.9051629 
132 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.36893 	 0.121353 ]	 4.951425 	0.104108 	 0.1101428 
133 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.44749 	 0.1215002 ]	 5.082403 	0.1186772 	 0.6580733 
134 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.29633 	 0.1218653 ]	 5.717177 	0.2238958 	 0.7806435 
135 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.36645 	 0.1207312 ]	 4.922706 	0.1011606 	 0.6454233 
136 	[ 53.36439 	 0.1214447 ]	 7.213751 	[ 53.36764 	 0.1214837 ]	 6.363 	0.427094 	 0.3699602 
137 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.27436 	 0.1212566 ]	 4.732131 	0.1957594 	 0.8640729 
138 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.35594 	 0.1214216 ]	 5.449324 	0.4010474 	 0.7826377 
139 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.3227 	 0.1212494 ]	 3.675843 	0.06807418 	 0.5750564 
140 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.32397 	 0.1208831 ]	 5.295322 	0.3438057 	 0.5585791 
141 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.39975 	 0.1215048 ]	 4.828162 	0.2154907 	 0.2442617 
142 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.45627 	 0.1225029 ]	 4.775306 	0.2043963 	 0.809866 
143 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.35621 	 0.1207984 ]	 4.388813 	0.1388742 	 0.1997099 
144 	[ 53.36764 	 0.1214837 ]	 6.363 	[ 53.44364 	 0.1210168 ]	 4.674913 	0.1848729 	 0.1595705 
145 	[ 53.44364 	 0.1210168 ]	 4.674913 	[ 53.55464 	 0.1208441 ]	 5.466313 	2.206484 	 0.7652428 
146 	[ 53.55464 	 0.1208441 ]	 5.466313 	[ 53.55314 	 0.121175 ]	 3.96267 	0.2223188 	 0.5506908 
147 	[ 53.55464 	 0.1208441 ]	 5.466313 	[ 53.58467 	 0.1209293 ]	 4.420857 	0.3515315 	 0.4848422 
148 	[ 53.55464 	 0.1208441 ]	 5.466313 	[ 53.65456 	 0.1209844 ]	 5.404486 	0.9400448 	 0.5465007 
149 	[ 53.65456 	 0.1209844 ]	 5.404486 	[ 53.61591 	 0.1214826 ]	 6.372149 	2.631788 	 0.7197478 
150 	[ 53.61591 	 0.1214826 ]	 6.372149 	[ 53.60117 	 0.1212817 ]	 4.707787 	0.1893113 	 0.5094969 
151 	[ 53.61591 	 0.1214826 ]	 6.372149 	[ 53.57758 	 0.1212206 ]	 5.663355 	0.4922375 	 0.8980462 
152 	[ 53.61591 	 0.1214826 ]	 6.372149 	[ 53.55503 	 0.120309 ]	 4.193443 	0.1131879 	 0.06869722 
153 	[ 53.55503 	 0.120309 ]	 4.193443 	[ 53.53913 	 0.1196139 ]	 3.474646 	0.487338 	 0.283163 
154 	[ 53.53913 	 0.1196139 ]	 3.474646 	[ 53.5615 	 0.119104 ]	 3.804752 	1.391116 	 0.6092409 
155 	[ 53.5615 	 0.119104 ]	 3.804752 	[ 53.515 	 0.1188577 ]	 5.375383 	4.809684 	 0.8514932 
156 	[ 53.515 	 0.1188577 ]	 5.375383 	[ 53.50266 	 0.1184559 ]	 4.924929 	0.6373386 	 0.4440951 
157 	[ 53.50266 	 0.1184559 ]	 4.924929 	[ 53.4554 	 0.1185718 ]	 3.930531 	0.369946 	 0.6570135 
158 	[ 53.50266 	 0.1184559 ]	 4.924929 	[ 53.4998 	 0.1188187 ]	 3.524138 	0.2464021 	 0.5142904 
159 	[ 53.50266 	 0.1184559 ]	 4.924929 	[ 53.50137 	 0.118232 ]	 3.456294 	0.2302395 	 0.9400343 
160 	[ 53.50266 	 0.1184559 ]	 4.924929 	[ 53.58363 	 0.1179439 ]	 3.793374 	0.3225313 	 0.6270224 
161 	[ 53.50266 	 0.1184559 ]	 4.924929 	[ 53.57528 	 0.1180489 ]	 3.466645 	0.2326352 	 0.9167088 
162 	[ 53.50266 	 0.1184559 ]	 4.924929 	[ 53.49094 	 0.1187249 ]	 3.589489 	0.2630424 	 0.03303697 
163 	[ 53.49094 	 0.1187249 ]	 3.589489 	[ 53.48468 	 0.1199852 ]	 4.212968 	1.865408 	 0.5041402 
164 	[ 53.48468 	 0.1199852 ]	 4.212968 	[ 53.48761 	 0.1199988 ]	 4.404012 	1.210512 	 0.9045336 
165 	[ 53.48761 	 0.1199988 ]	 4.404012 	[ 53.43117 	 0.1193557 ]	 5.653918 	3.490015 	 0.5782761 
166 	[ 53.43117 	 0.1193557 ]	 5.653918 	[ 53.43782 	 0.1194461 ]	 3.871368 	0.1682087 	 0.4147669 
167 	[ 53.43117 	 0.1193557 ]	 5.653918 	[ 53.47872 	 0.1192582 ]	 3.454706 	0.1108905 	 0.8923141 
168 	[ 53.43117 	 0.1193557 ]	 5.653918 	[ 53.41746 	 0.1195632 ]	 4.681262 	0.3780774 	 0.2696156 
169 	[ 53.41746 	 0.1195632 ]	 4.681262 	[ 53.4428 	 0.1192225 ]	 4.046073 	0.5298355 	 0.6921467 
170 	[ 53.41746 	 0.1195632 ]	 4.681262 	[ 53.33354 	 0.1195631 ]	 3.845271 	0.4334449 	 0.1472977 
171 	[ 53.33354 	 0.1195631 ]	 3.845271 	[ 53.33497 	 0.120061 ]	 4.414931 	1.767666 	 0.6732504 
172 	[ 53.33497 	 0.120061 ]	 4.414931 	[ 53.29631 	 0.1202752 ]	 4.356487 	0.9432306 	 0.6456443 
173 	[ 53.29631 	 0.1202752 ]	 4.356487 	[ 53.39408 	 0.120059 ]	 4.841452 	1.624118 	 0.4987252 
174 	[ 53.39408 	 0.120059 ]	 4.841452 	[ 53.43968 	 0.1203637 ]	 4.217736 	0.5359494 	 0.9502246 
175 	[ 53.39408 	 0.120059 ]	 4.841452 	[ 53.39718 	 0.1200937 ]	 5.805836 	2.623171 	 0.7826996 
176 	[ 53.39718 	 0.1200937 ]	 5.805836 	[ 53.3591 	 0.1199082 ]	 4.527242 	0.2784286 	 0.491082 
177 	[ 53.39718 	 0.1200937 ]	 5.805836 	[ 53.37876 	 0.1197616 ]	 4.705277 	0.332685 	 0.5193748 
178 	[ 53.39718 	 0.1200937 ]	 5.805836 	[ 53.39476 	 0.119375 ]	 4.31343 	0.2248312 	 0.5714398 
179 	[ 53.39718 	 0.1200937 ]	 5.805836 	[ 53.37669 	 0.1187684 ]	 3.973028 	0.1599638 	 0.4036018 
180 	[ 53.39718 	 0.1200937 ]	 5.805836 	