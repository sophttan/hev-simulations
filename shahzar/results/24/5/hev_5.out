
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.5, 0.005)) {
+   # Sample from gamma distributions with means at the current state.
+   # The SDs correspond to the step-size of the chain for each parameter.
+   r <- (state / sds)^2
+   v <- state / sds^2
+   return(rgamma(n = 2, shape = r, rate = v))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 3), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 3), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.05, 0.25)
> start <- c(56.5997291895948, 0.0662600954950668)
> results <- metropolis(start, target, num_sim = 1000, num_iter = 1000)
1	[56.6	0.066]	10.093		[57.109	0.061]	8.936	0.314	0.256
2	[57.109	0.061]	8.936		[56.588	0.062]	8.908	0.972	0.258
3	[56.588	0.062]	8.908		[56.862	0.07]	11.306	11.007	0.327
4	[56.862	0.07]	11.306		[57.52	0.078]	7.04	0.014	0.405
5	[56.862	0.07]	11.306		[57.17	0.073]	7.957	0.035	0.737
6	[56.862	0.07]	11.306		[57.138	0.071]	8.796	0.081	0.956
7	[56.862	0.07]	11.306		[56.189	0.073]	7.998	0.037	0.932
8	[56.862	0.07]	11.306		[57.073	0.069]	9.56	0.174	0.687
9	[56.862	0.07]	11.306		[56.527	0.071]	8.922	0.092	0.786
10	[56.862	0.07]	11.306		[56.939	0.066]	10.258	0.35	0.389
11	[56.862	0.07]	11.306		[55.646	0.065]	9.962	0.261	0.793
12	[56.862	0.07]	11.306		[56.701	0.07]	9.84	0.231	0.993
13	[56.862	0.07]	11.306		[57.329	0.066]	8.707	0.074	0.846
14	[56.862	0.07]	11.306		[57.554	0.07]	7.826	0.031	0.44
15	[56.862	0.07]	11.306		[57.273	0.068]	9.301	0.135	0.754
16	[56.862	0.07]	11.306		[56.895	0.067]	9.894	0.244	0.557
17	[56.862	0.07]	11.306		[57.072	0.072]	8.899	0.09	0.628
18	[56.862	0.07]	11.306		[57.432	0.072]	8.267	0.048	0.814
19	[56.862	0.07]	11.306		[55.592	0.073]	8.469	0.059	0.436
20	[56.862	0.07]	11.306		[56.668	0.065]	10.305	0.367	0.584
21	[56.862	0.07]	11.306		[57.368	0.07]	9.225	0.125	0.156
22	[56.862	0.07]	11.306		[56.529	0.067]	10.056	0.286	0.798
23	[56.862	0.07]	11.306		[57.296	0.064]	9.414	0.151	0.772
24	[56.862	0.07]	11.306		[57.104	0.067]	9.019	0.102	0.051
25	[57.104	0.067]	9.019		[57.339	0.065]	10.198	3.25	0.715
26	[57.339	0.065]	10.198		[57.648	0.071]	8.69	0.221	0.848
27	[57.339	0.065]	10.198		[57.333	0.072]	8.43	0.171	0.786
28	[57.339	0.065]	10.198		[57.656	0.071]	8.843	0.258	0.427
29	[57.339	0.065]	10.198		[57.2	0.068]	8.115	0.125	0.886
30	[57.339	0.065]	10.198		[56.797	0.065]	9.411	0.455	0.454
31	[56.797	0.065]	9.411		[56.031	0.06]	8.061	0.259	0.856
32	[56.797	0.065]	9.411		[56.797	0.057]	7.597	0.163	0.481
33	[56.797	0.065]	9.411		[56.697	0.058]	7.636	0.169	0.188
34	[56.797	0.065]	9.411		[57.089	0.065]	9.227	0.832	0.673
35	[57.089	0.065]	9.227		[56.432	0.063]	8.742	0.616	0.196
36	[56.432	0.063]	8.742		[55.466	0.061]	8.27	0.624	0.452
37	[55.466	0.061]	8.27		[55.686	0.059]	7.973	0.743	0.068
38	[55.686	0.059]	7.973		[55.383	0.062]	8.214	1.273	0.034
39	[55.383	0.062]	8.214		[56.374	0.056]	7.585	0.533	0.117
40	[56.374	0.056]	7.585		[57.232	0.055]	7.255	0.719	0.132
41	[57.232	0.055]	7.255		[56.952	0.048]	6.792	0.629	0.98
42	[57.232	0.055]	7.255		[57.855	0.052]	7.265	1.011	0.964
43	[57.855	0.052]	7.265		[57.315	0.054]	7.313	1.049	0.681
44	[57.315	0.054]	7.313		[57.064	0.056]	7.492	1.196	0.487
45	[57.064	0.056]	7.492		[57.667	0.048]	6.808	0.505	0.198
46	[57.667	0.048]	6.808		[57.57	0.045]	6.624	0.832	0.464
47	[57.57	0.045]	6.624		[58.101	0.046]	6.738	1.12	0.384
48	[58.101	0.046]	6.738		[58.447	0.041]	6.625	0.893	0.787
49	[58.447	0.041]	6.625		[57.86	0.041]	6.459	0.848	0.668
50	[57.86	0.041]	6.459		[57.457	0.043]	6.637	1.194	0.41
51	[57.457	0.043]	6.637		[57.755	0.039]	6.093	0.581	0.306
52	[57.755	0.039]	6.093		[57.179	0.038]	6.149	1.058	0.989
53	[57.179	0.038]	6.149		[57.201	0.036]	6.321	1.188	0.979
54	[57.201	0.036]	6.321		[57.425	0.035]	6.118	0.816	0.898
55	[57.201	0.036]	6.321		[56.946	0.045]	6.595	1.315	0.6
56	[56.946	0.045]	6.595		[57.352	0.043]	6.738	1.154	0.348
57	[57.352	0.043]	6.738		[56.971	0.054]	6.926	1.207	0.427
58	[56.971	0.054]	6.926		[55.952	0.052]	7.241	1.369	0.612
59	[55.952	0.052]	7.241		[55.38	0.047]	6.721	0.595	0.373
60	[55.38	0.047]	6.721		[54.721	0.046]	6.771	1.052	0.033
61	[54.721	0.046]	6.771		[53.698	0.05]	6.846	1.077	0.833
62	[53.698	0.05]	6.846		[53.03	0.06]	7.352	1.659	0.353
63	[53.03	0.06]	7.352		[53.273	0.065]	8.115	2.144	0.038
64	[53.273	0.065]	8.115		[53.235	0.058]	7.337	0.459	0.253
65	[53.235	0.058]	7.337		[53.572	0.061]	7.471	1.144	0.241
66	[53.572	0.061]	7.471		[54.086	0.058]	7.735	1.302	0.173
67	[54.086	0.058]	7.735		[53.413	0.063]	8.295	1.749	0.627
68	[53.413	0.063]	8.295		[54.034	0.059]	7.604	0.501	0.775
69	[53.413	0.063]	8.295		[53.424	0.065]	7.921	0.688	0.247
70	[53.424	0.065]	7.921		[53.345	0.07]	7.737	0.832	0.495
71	[53.345	0.07]	7.737		[52.943	0.081]	6.918	0.441	0.843
72	[53.345	0.07]	7.737		[52.888	0.069]	8.605	2.382	0.621
73	[52.888	0.069]	8.605		[51.602	0.068]	7.657	0.388	0.393
74	[52.888	0.069]	8.605		[53.572	0.073]	8.247	0.699	0.042
75	[53.572	0.073]	8.247		[52.862	0.079]	7.502	0.474	0.219
76	[52.862	0.079]	7.502		[53.196	0.079]	7.317	0.831	0.53
77	[53.196	0.079]	7.317		[53.28	0.077]	8.071	2.126	0.305
78	[53.28	0.077]	8.071		[54.066	0.073]	8.478	1.502	0.273
79	[54.066	0.073]	8.478		[54.428	0.077]	7.867	0.543	0.973
80	[54.066	0.073]	8.478		[54.393	0.071]	11.223	15.566	0.513
81	[54.393	0.071]	11.223		[54.378	0.066]	10.239	0.374	0.347
82	[54.378	0.066]	10.239		[54.264	0.068]	8.751	0.226	0.598
83	[54.378	0.066]	10.239		[54.555	0.066]	9.67	0.566	0.309
84	[54.555	0.066]	9.67		[54.095	0.061]	8.043	0.196	0.336
85	[54.555	0.066]	9.67		[54.956	0.064]	8.261	0.244	0.317
86	[54.555	0.066]	9.67		[55.337	0.081]	6.575	0.045	0.888
87	[54.555	0.066]	9.67		[54.935	0.066]	7.738	0.145	0.967
88	[54.555	0.066]	9.67		[54.322	0.061]	8.066	0.201	0.007
89	[54.322	0.061]	8.066		[53.828	0.07]	8.861	2.215	0.967
90	[53.828	0.07]	8.861		[52.791	0.066]	7.392	0.23	0.548
91	[53.828	0.07]	8.861		[53.347	0.069]	9.068	1.23	0.265
92	[53.347	0.069]	9.068		[53.955	0.062]	8.366	0.495	0.759
93	[53.347	0.069]	9.068		[53.663	0.054]	7.053	0.133	0.014
94	[53.663	0.054]	7.053		[54.174	0.048]	6.796	0.774	0.052
95	[54.174	0.048]	6.796		[54.277	0.056]	7.433	1.891	0.157
96	[54.277	0.056]	7.433		[54.109	0.065]	8.775	3.825	0.449
97	[54.109	0.065]	8.775		[54.253	0.063]	7.763	0.364	0.27
98	[54.253	0.063]	7.763		[55.051	0.059]	8.002	1.269	0.088
99	[55.051	0.059]	8.002		[54.99	0.057]	7.536	0.628	0.248
100	[54.99	0.057]	7.536		[55.099	0.055]	7.4	0.872	0.873
101	[54.99	0.057]	7.536		[55.17	0.056]	7.436	0.904	0.995
102	[54.99	0.057]	7.536		[54.209	0.051]	7.01	0.591	0.144
103	[54.209	0.051]	7.01		[54.466	0.052]	7.139	1.138	0.182
104	[54.466	0.052]	7.139		[54.34	0.058]	7.678	1.714	0.337
105	[54.34	0.058]	7.678		[54.941	0.053]	7.196	0.617	0.851
106	[54.34	0.058]	7.678		[54.341	0.063]	8.108	1.538	0.663
107	[54.341	0.063]	8.108		[55.413	0.061]	7.735	0.689	0.379
108	[55.413	0.061]	7.735		[54.913	0.059]	7.833	1.102	0.897
109	[54.913	0.059]	7.833		[54.465	0.063]	8.224	1.478	0.896
110	[54.465	0.063]	8.224		[54.731	0.065]	7.955	0.764	0.075
111	[54.731	0.065]	7.955		[55.113	0.064]	8.928	2.647	0.597
112	[55.113	0.064]	8.928		[55.48	0.067]	10.545	5.035	0.556
113	[55.48	0.067]	10.545		[55.706	0.064]	9.126	0.242	0.781
114	[55.48	0.067]	10.545		[55.944	0.061]	8.501	0.13	0.767
115	[55.48	0.067]	10.545		[55.335	0.064]	9.176	0.254	0.349
116	[55.48	0.067]	10.545		[54.573	0.061]	8.534	0.134	0.086
117	[54.573	0.061]	8.534		[54.535	0.059]	8.049	0.615	0.927
118	[54.573	0.061]	8.534		[54.789	0.061]	8.329	0.815	0.152
119	[54.789	0.061]	8.329		[55.353	0.058]	7.592	0.479	0.768
120	[54.789	0.061]	8.329		[55.094	0.057]	7.687	0.526	0.712
121	[54.789	0.061]	8.329		[55.037	0.067]	10.04	5.533	0.916
122	[55.037	0.067]	10.04		[55.181	0.068]	9.91	0.878	0.054
123	[55.181	0.068]	9.91		[54.71	0.068]	9.088	0.439	0.537
124	[55.181	0.068]	9.91		[55.472	0.069]	10.976	2.904	0.673
125	[55.472	0.069]	10.976		[55.706	0.062]	8.355	0.073	0.926
126	[55.472	0.069]	10.976		[55.547	0.072]	8.611	0.094	0.789
127	[55.472	0.069]	10.976		[55.409	0.075]	7.991	0.05	0.549
128	[55.472	0.069]	10.976		[55.899	0.064]	8.735	0.106	0.692
129	[55.472	0.069]	10.976		[54.809	0.073]	8.367	0.074	0.923
130	[55.472	0.069]	10.976		[56.088	0.063]	8.636	0.096	0.636
131	[55.472	0.069]	10.976		[56.255	0.08]	6.717	0.014	0.842
132	[55.472	0.069]	10.976		[56.25	0.069]	10.389	0.556	0.356
133	[56.25	0.069]	10.389		[56.235	0.069]	12.606	9.18	0.332
134	[56.235	0.069]	12.606		[55.743	0.072]	8.752	0.021	0.91
135	[56.235	0.069]	12.606		[57.076	0.072]	8.136	0.011	0.078
136	[56.235	0.069]	12.606		[56.968	0.075]	8.126	0.011	0.394
137	[56.235	0.069]	12.606		[56.03	0.075]	8.219	0.012	0.278
138	[56.235	0.069]	12.606		[56.117	0.067]	10.473	0.118	0.186
139	[56.235	0.069]	12.606		[56.111	0.071]	9.039	0.028	0.216
140	[56.235	0.069]	12.606		[56.827	0.066]	9.455	0.043	0.714
141	[56.235	0.069]	12.606		[55.577	0.067]	11.121	0.227	0.069
142	[55.577	0.067]	11.121		[56.119	0.066]	9.489	0.195	0.765
143	[55.577	0.067]	11.121		[55.913	0.066]	9.427	0.184	0.28
144	[55.577	0.067]	11.121		[55.182	0.07]	9.92	0.301	0.601
145	[55.577	0.067]	11.121		[55.626	0.079]	7.086	0.018	0.275
146	[55.577	0.067]	11.121		[56.108	0.063]	8.751	0.093	0.455
147	[55.577	0.067]	11.121		[54.416	0.077]	7.404	0.024	0.533
148	[55.577	0.067]	11.121		[56.056	0.068]	12.065	2.571	0.293
149	[56.056	0.068]	12.065		[55.997	0.072]	9.486	0.076	0.235
150	[56.056	0.068]	12.065		[55.705	0.073]	9.131	0.053	0.226
151	[56.056	0.068]	12.065		[55.908	0.072]	9.826	0.107	0.237
152	[56.056	0.068]	12.065		[55.122	0.069]	11.146	0.399	0.363
153	[55.122	0.069]	11.146		[54.675	0.065]	8.646	0.082	0.921
154	[55.122	0.069]	11.146		[55.123	0.064]	8.649	0.082	0.506
155	[55.122	0.069]	11.146		[56.576	0.075]	7.884	0.038	0.428
156	[55.122	0.069]	11.146		[55.312	0.069]	11.086	0.941	0.366
157	[55.312	0.069]	11.086		[55.687	0.062]	8.363	0.066	0.65
158	[55.312	0.069]	11.086		[54.227	0.068]	10.692	0.675	0.792
159	[55.312	0.069]	11.086		[56.181	0.071]	10.76	0.722	0.873
160	[55.312	0.069]	11.086		[56.439	0.07]	10.917	0.845	0.289
161	[56.439	0.07]	10.917		[56.608	0.071]	8.361	0.078	0.969
162	[56.439	0.07]	10.917		[56.331	0.07]	10.762	0.856	0.036
163	[56.331	0.07]	10.762		[57.43	0.074]	7.997	0.063	0.991
164	[56.331	0.07]	10.762		[56.042	0.062]	8.513	0.105	0.151
165	[56.331	0.07]	10.762		[56.195	0.076]	7.557	0.041	0.984
166	[56.331	0.07]	10.762		[55.108	0.076]	7.773	0.05	0.4
167	[56.331	0.07]	10.762		[56.225	0.071]	9.68	0.339	0.467
168	[56.331	0.07]	10.762		[55.536	0.074]	8.981	0.168	0.67
169	[56.331	0.07]	10.762		[56.049	0.075]	7.98	0.062	0.312
170	[56.331	0.07]	10.762		[56.931	0.07]	8.908	0.157	0.653
171	[56.331	0.07]	10.762		[56.033	0.069]	9.184	0.206	0.212
172	[56.331	0.07]	10.762		[57.4	0.08]	6.528	0.015	0.298
173	[56.331	0.07]	10.762		[56.246	0.075]	7.592	0.042	0.318
174	[56.331	0.07]	10.762		[55.946	0.065]	9.645	0.327	0.605
175	[56.331	0.07]	10.762		[56.555	0.062]	9.007	0.173	0.37
176	[56.331	0.07]	10.762		[56.772	0.066]	11.917	3.173	0.646
177	[56.772	0.066]	11.917		[56.615	0.063]	8.427	0.031	0.526
178	[56.772	0.066]	11.917		[56.324	0.065]	9.028	0.056	0.691
179	[56.772	0.066]	11.917		[56.625	0.07]	10.429	0.226	0.145
180	[56.625	0.07]	10.429		[56.715	0.072]	10.744	1.371	0.104
181	[56.715	0.072]	10.744		[56.753	0.071]	9.069	0.187	0.249
182	[56.715	0.072]	10.744		[56.73	0.067]	11.951	3.343	0.74
183	[56.73	0.067]	11.951		[56.782	0.06]	8.228	0.024	0.116
184	[56.73	0.067]	11.951		[57.267	0.069]	10.96	0.371	0.285
185	[57.267	0.069]	10.96		[56.878	0.073]	8.621	0.096	0.559
186	[57.267	0.069]	10.96		[56.983	0.075]	7.913	0.047	0.89
187	[57.267	0.069]	10.96		[57.226	0.071]	8.896	0.127	0.069
188	[57.226	0.071]	8.896		[56.635	0.072]	9.171	1.317	0.595
189	[56.635	0.072]	9.171		[56.701	0.063]	7.831	0.262	0.521
190	[56.635	0.072]	9.171		[55.203	0.068]	11.841	14.433	0.14
