
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.5, 0.005)) {
+   # Sample from gamma distributions with means at the current state.
+   # The SDs correspond to the step-size of the chain for each parameter.
+   r <- (state / sds)^2
+   v <- state / sds^2
+   return(rgamma(n = 2, shape = r, rate = v))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 3), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 3), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.3, 0.25)
> start <- c(51.2386100875685, 0.122167209713071)
> results <- metropolis(start, target, num_sim = 1000, num_iter = 1000)
1	[51.239	0.122]	9.997		[51.235	0.123]	9.272	0.484	0.251
2	[51.235	0.123]	9.272		[50.925	0.13]	6.565	0.067	0.827
3	[51.235	0.123]	9.272		[51.02	0.117]	6.101	0.042	0.029
4	[51.02	0.117]	6.101		[50.755	0.113]	5.103	0.369	0.893
5	[51.02	0.117]	6.101		[51.215	0.122]	7.698	4.941	0.791
6	[51.215	0.122]	7.698		[50.808	0.123]	7.856	1.171	0.221
7	[50.808	0.123]	7.856		[50.152	0.124]	7.338	0.595	0.403
8	[50.152	0.124]	7.338		[50.045	0.121]	6.415	0.398	0.042
9	[50.045	0.121]	6.415		[49.558	0.124]	7.695	3.597	0.98
10	[49.558	0.124]	7.695		[49.513	0.126]	8.127	1.54	0.517
11	[49.513	0.126]	8.127		[49.906	0.126]	8.817	1.994	0.55
12	[49.906	0.126]	8.817		[49.92	0.129]	6.731	0.124	0.951
13	[49.906	0.126]	8.817		[49.93	0.126]	8.047	0.463	0.555
14	[49.906	0.126]	8.817		[49.617	0.122]	6.776	0.13	0.567
15	[49.906	0.126]	8.817		[50.289	0.131]	6.355	0.085	0.07
16	[50.289	0.131]	6.355		[50.598	0.132]	6.533	1.195	0.383
17	[50.598	0.132]	6.533		[50.362	0.129]	6.852	1.377	0.316
18	[50.362	0.129]	6.852		[50.426	0.133]	5.363	0.225	0.423
19	[50.362	0.129]	6.852		[49.213	0.128]	7.621	2.156	0.472
20	[49.213	0.128]	7.621		[49.061	0.126]	7.896	1.316	0.239
21	[49.061	0.126]	7.896		[49.555	0.124]	7.386	0.601	0.761
22	[49.061	0.126]	7.896		[49.29	0.115]	5.086	0.06	0.909
23	[49.061	0.126]	7.896		[48.547	0.122]	5.858	0.13	0.329
24	[49.061	0.126]	7.896		[48.738	0.121]	5.678	0.109	0.529
25	[49.061	0.126]	7.896		[48.717	0.129]	7.531	0.694	0.178
26	[48.717	0.129]	7.531		[48.409	0.125]	6.489	0.353	0.095
27	[48.409	0.125]	6.489		[48.393	0.136]	5.502	0.372	0.633
28	[48.409	0.125]	6.489		[49.45	0.127]	7.694	3.337	0.736
29	[49.45	0.127]	7.694		[49.694	0.134]	5.797	0.15	0.114
30	[49.694	0.134]	5.797		[49.991	0.132]	6.082	1.33	0.54
31	[49.991	0.132]	6.082		[50.642	0.133]	5.913	0.844	0.189
32	[50.642	0.133]	5.913		[50.912	0.133]	5.659	0.775	0.591
33	[50.912	0.133]	5.659		[50.909	0.136]	4.912	0.474	0.682
34	[50.912	0.133]	5.659		[52.015	0.137]	4.689	0.379	0.943
35	[50.912	0.133]	5.659		[50.49	0.132]	6.193	1.706	0.773
36	[50.49	0.132]	6.193		[50.619	0.13]	6.724	1.701	0.946
37	[50.619	0.13]	6.724		[50.177	0.127]	7.509	2.191	0.125
38	[50.177	0.127]	7.509		[49.528	0.124]	7.434	0.928	0.044
39	[49.528	0.124]	7.434		[50.272	0.123]	7.379	0.946	0.335
40	[50.272	0.123]	7.379		[51.03	0.127]	7.326	0.948	0.975
41	[50.272	0.123]	7.379		[50.404	0.134]	5.333	0.129	0.75
42	[50.272	0.123]	7.379		[49.963	0.131]	6.547	0.435	0.017
43	[49.963	0.131]	6.547		[50.414	0.126]	7.954	4.084	0.491
44	[50.414	0.126]	7.954		[50.265	0.125]	8.924	2.638	0.104
45	[50.265	0.125]	8.924		[51.262	0.124]	8.62	0.738	0.447
46	[51.262	0.124]	8.62		[51.384	0.122]	7.336	0.277	0.507
47	[51.262	0.124]	8.62		[50.811	0.119]	5.581	0.048	0.9
48	[51.262	0.124]	8.62		[50.757	0.128]	7.056	0.209	0.81
49	[51.262	0.124]	8.62		[51.472	0.126]	8.086	0.586	0.875
50	[51.262	0.124]	8.62		[51.22	0.124]	8.996	1.456	0.146
51	[51.22	0.124]	8.996		[51.104	0.13]	5.91	0.046	0.967
52	[51.22	0.124]	8.996		[51.879	0.113]	5.13	0.021	0.985
53	[51.22	0.124]	8.996		[50.553	0.115]	5.474	0.03	0.895
54	[51.22	0.124]	8.996		[51.223	0.129]	6.933	0.127	0.116
55	[51.223	0.129]	6.933		[50.697	0.119]	6.419	0.598	0.004
56	[50.697	0.119]	6.419		[50.675	0.113]	5.112	0.27	0.932
57	[50.697	0.119]	6.419		[51.006	0.113]	5.103	0.268	0.412
58	[50.697	0.119]	6.419		[50.333	0.123]	8.155	5.671	0.711
59	[50.333	0.123]	8.155		[50.494	0.129]	6.595	0.21	0.068
60	[50.494	0.129]	6.595		[49.842	0.124]	7.847	3.495	0.565
61	[49.842	0.124]	7.847		[50.547	0.126]	8.258	1.509	0.65
62	[50.547	0.126]	8.258		[50.898	0.135]	4.886	0.034	0.827
63	[50.547	0.126]	8.258		[51.368	0.13]	5.796	0.085	0.88
64	[50.547	0.126]	8.258		[51.349	0.129]	6.806	0.234	0.207
65	[51.349	0.129]	6.806		[50.939	0.128]	7.879	2.922	0.317
66	[50.939	0.128]	7.879		[50.549	0.128]	7.183	0.499	0.272
67	[50.549	0.128]	7.183		[49.517	0.132]	6.609	0.564	0.313
68	[49.517	0.132]	6.609		[50.057	0.135]	5.019	0.204	0.564
69	[49.517	0.132]	6.609		[50.436	0.127]	7.734	3.079	0.547
70	[50.436	0.127]	7.734		[49.501	0.129]	7.048	0.504	0.45
71	[49.501	0.129]	7.048		[48.677	0.127]	7.768	2.055	0.879
72	[48.677	0.127]	7.768		[49.307	0.132]	6.62	0.317	0.8
73	[48.677	0.127]	7.768		[49.455	0.128]	7.778	1.01	0.425
74	[49.455	0.128]	7.778		[48.789	0.128]	8.105	1.388	0.781
75	[48.789	0.128]	8.105		[48.374	0.127]	6.893	0.297	0.463
76	[48.789	0.128]	8.105		[48.454	0.128]	7.433	0.51	0.24
77	[48.454	0.128]	7.433		[48.748	0.128]	7.834	1.493	0.276
78	[48.748	0.128]	7.834		[48.335	0.123]	6.33	0.222	0.541
79	[48.748	0.128]	7.834		[46.998	0.13]	7.203	0.532	0.704
80	[48.748	0.128]	7.834		[49.433	0.126]	8.387	1.739	0.166
81	[49.433	0.126]	8.387		[48.978	0.129]	7.621	0.465	0.339
82	[48.978	0.129]	7.621		[48.031	0.13]	6.794	0.437	0.236
83	[48.031	0.13]	6.794		[47.849	0.128]	7.218	1.528	0.677
84	[47.849	0.128]	7.218		[47.902	0.124]	6.145	0.342	0.764
85	[47.849	0.128]	7.218		[47.173	0.128]	7.563	1.413	0.953
86	[47.173	0.128]	7.563		[47.804	0.135]	5.984	0.206	0.879
87	[47.173	0.128]	7.563		[47.013	0.131]	6.889	0.51	0.365
88	[47.013	0.131]	6.889		[46.998	0.132]	7.229	1.405	0.766
89	[46.998	0.132]	7.229		[47.079	0.135]	6.078	0.316	0.628
90	[46.998	0.132]	7.229		[46.792	0.132]	6.708	0.594	0.656
91	[46.998	0.132]	7.229		[47.683	0.127]	7.106	0.885	0.49
92	[47.683	0.127]	7.106		[47.493	0.123]	5.807	0.273	0.551
93	[47.683	0.127]	7.106		[48.114	0.128]	7.483	1.458	0.97
94	[48.114	0.128]	7.483		[47.593	0.13]	6.934	0.577	0.45
95	[47.593	0.13]	6.934		[47.203	0.137]	5.807	0.324	0.142
96	[47.203	0.137]	5.807		[46.976	0.133]	6.519	2.037	0.873
97	[46.976	0.133]	6.519		[46.974	0.133]	6.798	1.322	0.125
98	[46.974	0.133]	6.798		[47.231	0.124]	5.52	0.279	0.035
99	[47.231	0.124]	5.52		[46.996	0.121]	5.388	0.877	0.057
100	[46.996	0.121]	5.388		[46.476	0.127]	6.499	3.035	0.632
101	[46.476	0.127]	6.499		[47.048	0.132]	6.569	1.072	0.737
102	[47.048	0.132]	6.569		[47.035	0.131]	7.09	1.685	0.87
103	[47.035	0.131]	7.09		[46.932	0.134]	6.455	0.53	0.148
104	[46.932	0.134]	6.455		[46.72	0.138]	5.612	0.431	0.415
105	[46.72	0.138]	5.612		[46.517	0.14]	5.331	0.755	0.201
106	[46.517	0.14]	5.331		[46.477	0.14]	4.961	0.691	0.848
107	[46.517	0.14]	5.331		[45.569	0.136]	6.162	2.295	0.117
108	[45.569	0.136]	6.162		[45.182	0.133]	6.368	1.228	0.014
109	[45.182	0.133]	6.368		[44.976	0.126]	5.286	0.339	0.659
110	[45.182	0.133]	6.368		[44.877	0.133]	6.589	1.248	0.969
111	[44.877	0.133]	6.589		[44.989	0.132]	6.418	0.843	0.191
112	[44.989	0.132]	6.418		[44.472	0.128]	5.671	0.474	0.6
113	[44.989	0.132]	6.418		[45.749	0.13]	6.622	1.226	0.623
114	[45.749	0.13]	6.622		[45.009	0.139]	5.803	0.441	0.886
115	[45.749	0.13]	6.622		[45.213	0.127]	6.001	0.537	0.606
116	[45.749	0.13]	6.622		[45.78	0.127]	5.955	0.513	0.116
117	[45.78	0.127]	5.955		[46.181	0.122]	5.458	0.609	0.951
118	[45.78	0.127]	5.955		[46.178	0.125]	5.808	0.864	0.301
119	[46.178	0.125]	5.808		[45.762	0.116]	4.408	0.247	0.308
120	[46.178	0.125]	5.808		[45.775	0.134]	7.219	4.099	0.319
121	[45.775	0.134]	7.219		[45.598	0.135]	6.591	0.534	0.002
122	[45.598	0.135]	6.591		[46.545	0.135]	6.806	1.24	0.125
123	[46.545	0.135]	6.806		[46.876	0.143]	4.797	0.134	0.465
124	[46.545	0.135]	6.806		[45.98	0.133]	6.86	1.055	0.605
