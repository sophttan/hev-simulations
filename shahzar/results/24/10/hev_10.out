
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.5, 0.005)) {
+   # Sample from gamma distributions with means at the current state.
+   # The SDs correspond to the step-size of the chain for each parameter.
+   r <- (state / sds)^2
+   v <- state / sds^2
+   return(rgamma(n = 2, shape = r, rate = v))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 3), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 3), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.1, 0.25)
> start <- c(53.2151712710697, 0.0861778399605129)
> results <- metropolis(start, target, num_sim = 1000, num_iter = 1000)
1	[53.215	0.086]	8.813		[53.164	0.084]	8.074	0.478	0.451
2	[53.164	0.084]	8.074		[52.781	0.09]	8.399	1.384	0.231
3	[52.781	0.09]	8.399		[52.949	0.088]	8.205	0.824	0.719
4	[52.949	0.088]	8.205		[52.979	0.092]	7.22	0.373	0.927
5	[52.949	0.088]	8.205		[52.394	0.085]	7.992	0.808	0.824
6	[52.949	0.088]	8.205		[53.179	0.093]	7.209	0.369	0.882
7	[52.949	0.088]	8.205		[53.593	0.086]	9.265	2.885	0.255
8	[53.593	0.086]	9.265		[54.312	0.09]	8.421	0.43	0.044
9	[54.312	0.09]	8.421		[54.293	0.094]	6.543	0.153	0.523
10	[54.312	0.09]	8.421		[53.85	0.093]	6.63	0.167	0.369
11	[54.312	0.09]	8.421		[54.534	0.088]	9.481	2.887	0.161
12	[54.534	0.088]	9.481		[54.797	0.088]	8.197	0.277	0.818
13	[54.534	0.088]	9.481		[53.498	0.092]	7.151	0.097	0.966
14	[54.534	0.088]	9.481		[54.846	0.09]	7.309	0.114	0.926
15	[54.534	0.088]	9.481		[55.056	0.091]	6.858	0.073	0.238
16	[54.534	0.088]	9.481		[54.529	0.09]	8.472	0.365	0.389
17	[54.534	0.088]	9.481		[54.165	0.088]	8.769	0.491	0.466
18	[54.165	0.088]	8.769		[53.614	0.087]	9.764	2.705	0.664
19	[53.614	0.087]	9.764		[53.721	0.09]	8.002	0.172	0.151
20	[53.721	0.09]	8.002		[53.407	0.087]	9.433	4.18	0.056
21	[53.407	0.087]	9.433		[53.074	0.088]	8.967	0.628	0.125
22	[53.074	0.088]	8.967		[52.803	0.084]	7.418	0.213	0.023
23	[52.803	0.084]	7.418		[53.05	0.074]	6.109	0.27	0.202
24	[53.05	0.074]	6.109		[53.184	0.068]	5.798	0.733	0.727
25	[53.184	0.068]	5.798		[52.932	0.068]	5.802	1.004	0.834
26	[52.932	0.068]	5.802		[52.155	0.061]	5.213	0.555	0.606
27	[52.932	0.068]	5.802		[53.087	0.065]	5.465	0.714	0.051
28	[53.087	0.065]	5.465		[52.731	0.065]	5.456	0.991	0.857
29	[52.731	0.065]	5.456		[51.445	0.062]	5.215	0.785	0.637
30	[51.445	0.062]	5.215		[51.02	0.067]	5.401	1.205	0.195
31	[51.02	0.067]	5.401		[51.337	0.067]	5.5	1.104	0.344
32	[51.337	0.067]	5.5		[51.208	0.071]	5.799	1.348	0.494
33	[51.208	0.071]	5.799		[50.753	0.07]	5.476	0.724	0.587
34	[50.753	0.07]	5.476		[51.155	0.067]	5.475	0.999	0.157
35	[51.155	0.067]	5.475		[50.805	0.069]	5.562	1.091	0.103
36	[50.805	0.069]	5.562		[51.399	0.076]	5.934	1.451	0.234
37	[51.399	0.076]	5.934		[51.612	0.071]	5.776	0.854	0.167
38	[51.612	0.071]	5.776		[51.6	0.071]	5.732	0.958	0.122
39	[51.6	0.071]	5.732		[52.857	0.074]	6.314	1.79	0.531
40	[52.857	0.074]	6.314		[52.237	0.082]	6.688	1.453	0.84
41	[52.237	0.082]	6.688		[52.645	0.083]	7.785	2.996	0.125
42	[52.645	0.083]	7.785		[52.289	0.085]	8.586	2.227	0.577
43	[52.289	0.085]	8.586		[52.354	0.087]	8.334	0.777	0.308
44	[52.354	0.087]	8.334		[51.771	0.085]	7.292	0.353	0.245
45	[51.771	0.085]	7.292		[50.743	0.085]	7.151	0.869	0.305
46	[50.743	0.085]	7.151		[50.886	0.081]	6.696	0.634	0.56
47	[50.886	0.081]	6.696		[51.097	0.084]	6.731	1.035	0.492
48	[51.097	0.084]	6.731		[50.752	0.079]	6.153	0.561	0.659
49	[51.097	0.084]	6.731		[49.989	0.086]	7.056	1.385	0.085
50	[49.989	0.086]	7.056		[50.547	0.083]	7.175	1.126	0.755
51	[50.547	0.083]	7.175		[50.832	0.088]	7.383	1.231	0.218
52	[50.832	0.088]	7.383		[50.513	0.09]	7.503	1.128	0.68
53	[50.513	0.09]	7.503		[50.267	0.088]	7.393	0.895	0.654
54	[50.267	0.088]	7.393		[49.849	0.09]	7.036	0.7	0.428
55	[49.849	0.09]	7.036		[49.804	0.094]	6.59	0.64	0.251
56	[49.804	0.094]	6.59		[49.624	0.089]	7.091	1.651	0.646
57	[49.624	0.089]	7.091		[49.206	0.085]	6.089	0.367	0.098
58	[49.206	0.085]	6.089		[49.897	0.094]	7.425	3.804	0.677
59	[49.897	0.094]	7.425		[49.382	0.089]	6.8	0.536	0.17
60	[49.382	0.089]	6.8		[49.448	0.086]	6.917	1.124	0.499
61	[49.448	0.086]	6.917		[49.286	0.083]	6.343	0.563	0.444
62	[49.286	0.083]	6.343		[50.089	0.082]	6.668	1.384	0.182
63	[50.089	0.082]	6.668		[50.833	0.081]	6.25	0.658	0.314
64	[50.833	0.081]	6.25		[51.53	0.077]	6.122	0.88	0.217
65	[51.53	0.077]	6.122		[51.94	0.077]	6.265	1.154	0.249
66	[51.94	0.077]	6.265		[51.53	0.078]	6.383	1.125	0.653
67	[51.53	0.078]	6.383		[51.913	0.083]	6.828	1.561	0.149
68	[51.913	0.083]	6.828		[52.774	0.079]	6.683	0.864	0.757
69	[52.774	0.079]	6.683		[52.36	0.082]	7.018	1.399	0.575
70	[52.36	0.082]	7.018		[51.945	0.078]	6.33	0.502	0.34
71	[51.945	0.078]	6.33		[52.591	0.08]	7.135	2.238	0.442
72	[52.591	0.08]	7.135		[52.699	0.081]	6.78	0.701	0.987
73	[52.591	0.08]	7.135		[52.361	0.074]	6.086	0.35	0.709
74	[52.591	0.08]	7.135		[52.518	0.086]	8.204	2.91	0.533
75	[52.518	0.086]	8.204		[51.977	0.088]	7.956	0.781	0.831
76	[52.518	0.086]	8.204		[52.792	0.087]	8.842	1.894	0.01
77	[52.792	0.087]	8.842		[52.708	0.09]	9.072	1.258	0.831
78	[52.708	0.09]	9.072		[52.995	0.091]	7.941	0.323	0.632
79	[52.708	0.09]	9.072		[52.851	0.092]	7.684	0.25	0.936
80	[52.708	0.09]	9.072		[52.391	0.092]	7.467	0.201	0.382
81	[52.708	0.09]	9.072		[52.646	0.095]	6.95	0.12	0.824
82	[52.708	0.09]	9.072		[53.712	0.092]	7.384	0.185	0.304
83	[52.708	0.09]	9.072		[53.393	0.089]	8.757	0.73	0.045
84	[53.393	0.089]	8.757		[53.197	0.084]	8.271	0.615	0.159
85	[53.197	0.084]	8.271		[52.742	0.082]	7.345	0.396	0.824
86	[53.197	0.084]	8.271		[53.494	0.08]	6.883	0.25	0.437
87	[53.197	0.084]	8.271		[53.204	0.081]	7.254	0.362	0.433
88	[53.197	0.084]	8.271		[52.833	0.08]	6.979	0.275	0.837
89	[53.197	0.084]	8.271		[53.976	0.086]	12.933	105.868	0.536
90	[53.976	0.086]	12.933		[54.762	0.085]	11.011	0.146	0.975
91	[53.976	0.086]	12.933		[54.018	0.074]	6.152	0.001	0.417
92	[53.976	0.086]	12.933		[53.558	0.089]	8.23	0.009	0.471
93	[53.976	0.086]	12.933		[53.129	0.086]	8.066	0.008	0.258
94	[53.976	0.086]	12.933		[54.038	0.082]	7.749	0.006	0.324
95	[53.976	0.086]	12.933		[53.58	0.09]	7.732	0.006	0.489
96	[53.976	0.086]	12.933		[53.122	0.083]	7.91	0.007	0.132
97	[53.976	0.086]	12.933		[53.61	0.084]	9.893	0.048	0.239
98	[53.976	0.086]	12.933		[53.798	0.089]	8.771	0.016	0.665
99	[53.976	0.086]	12.933		[53.897	0.084]	9.114	0.022	0.549
100	[53.976	0.086]	12.933		[53.912	0.086]	9.21	0.024	0.504
101	[53.976	0.086]	12.933		[53.797	0.083]	8.241	0.009	0.475
102	[53.976	0.086]	12.933		[54.318	0.084]	8.347	0.01	0.253
103	[53.976	0.086]	12.933		[53.487	0.079]	6.832	0.002	0.523
104	[53.976	0.086]	12.933		[54.388	0.085]	9.395	0.029	0.065
105	[53.976	0.086]	12.933		[54.082	0.083]	8.107	0.008	0.563
106	[53.976	0.086]	12.933		[54.255	0.088]	8.848	0.017	0.8
107	[53.976	0.086]	12.933		[53.71	0.089]	9.409	0.029	0.602
108	[53.976	0.086]	12.933		[54.057	0.09]	7.992	0.007	0.482
109	[53.976	0.086]	12.933		[54.287	0.082]	8.18	0.009	0.053
110	[53.976	0.086]	12.933		[53.626	0.091]	8.288	0.01	0.118
111	[53.976	0.086]	12.933		[53.913	0.088]	9.071	0.021	0.776
112	[53.976	0.086]	12.933		[53.911	0.086]	9.279	0.026	0.555
113	[53.976	0.086]	12.933		[53.59	0.09]	8.302	0.01	0.831
114	[53.976	0.086]	12.933		[52.747	0.085]	8.725	0.015	0.423
115	[53.976	0.086]	12.933		[54.051	0.085]	9.852	0.046	0.559
116	[53.976	0.086]	12.933		[54.332	0.073]	6.361	0.001	0.017
117	[53.976	0.086]	12.933		[54.001	0.09]	7.906	0.007	0.732
118	[53.976	0.086]	12.933		[54.29	0.075]	6.8	0.002	0.602
119	[53.976	0.086]	12.933		[53.975	0.09]	7.882	0.006	0.206
120	[53.976	0.086]	12.933		[54.242	0.08]	7.24	0.003	0.581
121	[53.976	0.086]	12.933		[54.356	0.081]	7.493	0.004	0.552
122	[53.976	0.086]	12.933		[54.25	0.087]	9.912	0.049	0.412
123	[53.976	0.086]	12.933		[53.776	0.093]	7.381	0.004	0.464
124	[53.976	0.086]	12.933		[53.748	0.079]	7.196	0.003	0.149
125	[53.976	0.086]	12.933		[53.577	0.092]	7.241	0.003	0.942
126	[53.976	0.086]	12.933		[53.535	0.093]	7.135	0.003	0.594
127	[53.976	0.086]	12.933		[53.649	0.092]	6.906	0.002	0.717
128	[53.976	0.086]	12.933		[54.253	0.095]	6.257	0.001	0.22
129	[53.976	0.086]	12.933		[53.714	0.086]	8.198	0.009	0.197
130	[53.976	0.086]	12.933		[54.495	0.09]	7.735	0.006	0.853
131	[53.976	0.086]	12.933		[53.741	0.085]	9.13	0.022	0.361
132	[53.976	0.086]	12.933		[54.289	0.086]	9.493	0.032	0.33
133	[53.976	0.086]	12.933		[54.044	0.086]	10.705	0.108	0.298
134	[53.976	0.086]	12.933		[53.732	0.077]	6.839	0.002	0.789
135	[53.976	0.086]	12.933		[53.793	0.085]	9.252	0.025	0.128
136	[53.976	0.086]	12.933		[53.817	0.089]	8.043	0.008	0.032
137	[53.976	0.086]	12.933		[53.4	0.09]	7.866	0.006	0.231
138	[53.976	0.086]	12.933		[54.627	0.087]	13.13	1.218	0.346
139	[54.627	0.087]	13.13		[55.183	0.083]	9.152	0.019	0.21
140	[54.627	0.087]	13.13		[54.949	0.101]	5.128	0	0.061
141	[54.627	0.087]	13.13		[54.732	0.088]	9.069	0.017	0.651
142	[54.627	0.087]	13.13		[54.657	0.091]	8.299	0.008	0.957
143	[54.627	0.087]	13.13		[54.868	0.083]	8.811	0.013	0.846
144	[54.627	0.087]	13.13		[53.924	0.086]	10.109	0.049	0.839
145	[54.627	0.087]	13.13		[54.111	0.084]	9.542	0.028	0.788
146	[54.627	0.087]	13.13		[55.01	0.085]	10.414	0.066	0.296
147	[54.627	0.087]	13.13		[54.781	0.085]	8.079	0.006	0.493
148	[54.627	0.087]	13.13		[54.869	0.086]	9.544	0.028	0.372
149	[54.627	0.087]	13.13		[54.775	0.076]	6.693	0.002	0.356
150	[54.627	0.087]	13.13		[55.301	0.091]	7.164	0.003	0.524
151	[54.627	0.087]	13.13		[55.183	0.088]	10.194	0.053	0.333
152	[54.627	0.087]	13.13		[53.934	0.086]	10.332	0.061	0.571
153	[54.627	0.087]	13.13		[54.034	0.083]	8.259	0.008	0.654
154	[54.627	0.087]	13.13		[54.767	0.079]	7.359	0.003	0.663
155	[54.627	0.087]	13.13		[54.615	0.08]	7.831	0.005	0.045
156	[54.627	0.087]	13.13		[55.267	0.081]	8.197	0.007	0.479
157	[54.627	0.087]	13.13		[55.035	0.1]	5.624	0.001	0.627
158	[54.627	0.087]	13.13		[54.625	0.091]	7.055	0.002	0.41
159	[54.627	0.087]	13.13		[55.43	0.09]	7.869	0.005	0.503
160	[54.627	0.087]	13.13		[54.634	0.081]	8.792	0.013	0.864
161	[54.627	0.087]	13.13		[54.093	0.085]	11.431	0.183	0.761
162	[54.627	0.087]	13.13		[53.788	0.074]	6.346	0.001	0.365
163	[54.627	0.087]	13.13		[54.796	0.088]	9.503	0.027	0.667
