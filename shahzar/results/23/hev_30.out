
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.5, 0.005)) {
+   # Sample from gamma distributions with means at the current state.
+   # The SDs correspond to the step-size of the chain for each parameter.
+   r <- (state / sds)^2
+   v <- state / sds^2
+   return(rgamma(n = 2, shape = r, rate = v))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 3), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 3), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '30/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '30/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '30/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.3, 0.25)
> start <- c(53.651, 0.121)
> results <- metropolis(start, target, num_sim = 500, num_iter = 1000)
1	[53.651	0.121]	7.331		[53.91	0.122]	11.026	40.257	0.946
2	[53.91	0.122]	11.026		[53.872	0.124]	8.285	0.064	0.864
3	[53.91	0.122]	11.026		[53.512	0.123]	7.647	0.034	0.491
4	[53.91	0.122]	11.026		[54.59	0.125]	7.745	0.038	0.597
5	[53.91	0.122]	11.026		[53.303	0.121]	10.325	0.496	0.392
6	[53.303	0.121]	10.325		[53.022	0.116]	5.814	0.011	0.514
7	[53.303	0.121]	10.325		[53.52	0.121]	11.302	2.656	0.543
8	[53.52	0.121]	11.302		[53.341	0.119]	8.523	0.062	0.569
9	[53.52	0.121]	11.302		[54.233	0.117]	7.008	0.014	0.148
10	[53.52	0.121]	11.302		[53.346	0.133]	4.954	0.002	0.324
11	[53.52	0.121]	11.302		[53.707	0.124]	8.034	0.038	0.008
12	[53.707	0.124]	8.034		[53.285	0.121]	7.843	0.826	0.058
13	[53.285	0.121]	7.843		[53.991	0.124]	7.195	0.523	0.536
14	[53.285	0.121]	7.843		[52.661	0.117]	6.682	0.313	0.087
15	[52.661	0.117]	6.682		[52.529	0.126]	6.928	1.279	0.744
16	[52.529	0.126]	6.928		[52.304	0.126]	7.055	1.136	0.051
17	[52.304	0.126]	7.055		[51.606	0.124]	9.017	7.114	0.607
18	[51.606	0.124]	9.017		[51.249	0.129]	7.831	0.305	0.562
19	[51.606	0.124]	9.017		[52.014	0.131]	5.441	0.028	0.721
20	[51.606	0.124]	9.017		[51.853	0.122]	8.159	0.424	0.726
21	[51.606	0.124]	9.017		[51.615	0.123]	10.057	2.829	0.355
22	[51.615	0.123]	10.057		[51.33	0.118]	7.291	0.063	0.947
23	[51.615	0.123]	10.057		[51.126	0.117]	6.654	0.033	0.262
24	[51.615	0.123]	10.057		[51.331	0.119]	6.548	0.03	0.919
25	[51.615	0.123]	10.057		[51.469	0.119]	7.788	0.103	0.543
26	[51.615	0.123]	10.057		[51.481	0.123]	9.715	0.71	0.706
27	[51.481	0.123]	9.715		[51.101	0.121]	6.656	0.047	0.564
28	[51.481	0.123]	9.715		[51.785	0.118]	6.8	0.054	0.932
29	[51.481	0.123]	9.715		[51.075	0.121]	6.481	0.039	0.528
30	[51.481	0.123]	9.715		[51.268	0.126]	8.07	0.193	0.837
31	[51.481	0.123]	9.715		[52.096	0.12]	6.693	0.049	0.069
32	[51.481	0.123]	9.715		[50.331	0.124]	7.931	0.168	0.092
33	[50.331	0.124]	7.931		[50.85	0.126]	7.03	0.407	0.376
34	[50.85	0.126]	7.03		[50.274	0.128]	7.326	1.344	0.554
35	[50.274	0.128]	7.326		[49.801	0.128]	7.397	1.073	0.128
36	[49.801	0.128]	7.397		[49.042	0.13]	6.95	0.64	0.088
37	[49.042	0.13]	6.95		[49.449	0.13]	7.268	1.375	0.419
38	[49.449	0.13]	7.268		[49.064	0.129]	7.932	1.942	0.225
39	[49.064	0.129]	7.932		[49.913	0.137]	5.357	0.076	0.029
40	[49.913	0.137]	5.357		[50.102	0.135]	5.352	0.995	0.082
41	[50.102	0.135]	5.352		[50.045	0.13]	7.064	5.538	0.194
42	[50.045	0.13]	7.064		[50.266	0.136]	5.185	0.153	0.68
43	[50.045	0.13]	7.064		[50.194	0.131]	6.387	0.509	0.417
44	[50.194	0.131]	6.387		[50.315	0.127]	7.805	4.126	0.34
45	[50.315	0.127]	7.805		[50.06	0.127]	7.43	0.687	0.681
46	[50.06	0.127]	7.43		[50.173	0.123]	6.686	0.475	0.253
47	[50.173	0.123]	6.686		[49.882	0.126]	7.839	3.169	0.235
48	[49.882	0.126]	7.839		[50.435	0.122]	6.881	0.383	0.262
49	[50.435	0.122]	6.881		[50.692	0.118]	5.74	0.319	0.252
50	[50.692	0.118]	5.74		[50.493	0.119]	6.301	1.753	0.097
51	[50.493	0.119]	6.301		[50.401	0.115]	4.699	0.202	0.614
52	[50.493	0.119]	6.301		[51.002	0.117]	6.685	1.468	0.05
53	[51.002	0.117]	6.685		[51.94	0.113]	4.89	0.166	0.692
54	[51.002	0.117]	6.685		[50.967	0.117]	6.376	0.735	0.116
55	[50.967	0.117]	6.376		[50.593	0.121]	7.673	3.656	0.254
56	[50.593	0.121]	7.673		[50.39	0.12]	6.342	0.264	0.949
57	[50.593	0.121]	7.673		[50.616	0.13]	6.886	0.455	0.519
58	[50.593	0.121]	7.673		[50.63	0.126]	8.666	2.7	0.955
59	[50.63	0.126]	8.666		[50.988	0.124]	9.187	1.684	0.639
60	[50.988	0.124]	9.187		[51.227	0.132]	5.594	0.028	0.825
61	[50.988	0.124]	9.187		[51.326	0.132]	5.763	0.033	0.409
62	[50.988	0.124]	9.187		[51.269	0.12]	7.09	0.123	0.866
63	[50.988	0.124]	9.187		[50.643	0.125]	7.534	0.191	0.581
64	[50.988	0.124]	9.187		[50.313	0.128]	6.403	0.062	0.169
65	[50.988	0.124]	9.187		[49.836	0.129]	6.785	0.09	0.895
66	[50.988	0.124]	9.187		[51.479	0.129]	6.672	0.081	0.831
67	[50.988	0.124]	9.187		[51.286	0.127]	8.285	0.406	0.443
68	[50.988	0.124]	9.187		[50.677	0.113]	4.818	0.013	0.996
69	[50.988	0.124]	9.187		[50.128	0.122]	7.421	0.171	0.117
70	[50.128	0.122]	7.421		[50.069	0.122]	7.666	1.278	0.375
71	[50.069	0.122]	7.666		[49.001	0.124]	7.033	0.531	0.342
72	[49.001	0.124]	7.033		[48.592	0.123]	6.884	0.861	0.026
73	[48.592	0.123]	6.884		[49.393	0.119]	6.076	0.446	0.254
74	[49.393	0.119]	6.076		[49.021	0.113]	4.757	0.267	0.426
75	[49.393	0.119]	6.076		[49.723	0.126]	7.908	6.244	0.28
76	[49.723	0.126]	7.908		[49.277	0.115]	4.64	0.038	0.832
77	[49.723	0.126]	7.908		[49.374	0.125]	7.159	0.473	0.769
78	[49.723	0.126]	7.908		[49.805	0.143]	4.181	0.024	0.601
79	[49.723	0.126]	7.908		[48.994	0.131]	6.532	0.252	0.105
80	[48.994	0.131]	6.532		[48.502	0.139]	4.7	0.16	0.732
81	[48.994	0.131]	6.532		[48.766	0.136]	5.204	0.265	0.436
82	[48.994	0.131]	6.532		[49.502	0.136]	5.413	0.327	0.633
83	[48.994	0.131]	6.532		[48.676	0.13]	7.759	3.412	0.771
84	[48.676	0.13]	7.759		[48.097	0.136]	5.566	0.112	0.917
85	[48.676	0.13]	7.759		[49.889	0.124]	7.201	0.573	0.796
86	[48.676	0.13]	7.759		[49.263	0.137]	5.863	0.15	0.323
87	[48.676	0.13]	7.759		[49.212	0.133]	6.389	0.254	0.263
88	[48.676	0.13]	7.759		[48.156	0.122]	5.751	0.134	0.856
89	[48.676	0.13]	7.759		[48.302	0.126]	7.763	1.004	0.022
90	[48.302	0.126]	7.763		[48.639	0.129]	7.077	0.503	0.841
91	[48.302	0.126]	7.763		[48.56	0.119]	5.875	0.151	0.027
92	[48.56	0.119]	5.875		[48.254	0.115]	4.738	0.321	0.416
93	[48.56	0.119]	5.875		[49.579	0.121]	6.588	2.04	0.616
94	[49.579	0.121]	6.588		[49.344	0.117]	5.192	0.247	0.19
95	[49.344	0.117]	5.192		[49.064	0.121]	6.319	3.089	0.957
96	[49.064	0.121]	6.319		[49.003	0.132]	6.826	1.659	0.902
97	[49.003	0.132]	6.826		[48.649	0.125]	7.674	2.335	0.157
98	[48.649	0.125]	7.674		[48.465	0.133]	5.902	0.17	0.339
99	[48.649	0.125]	7.674		[48.611	0.115]	4.793	0.056	0.823
100	[48.649	0.125]	7.674		[48.906	0.117]	5.508	0.115	0.872
101	[48.649	0.125]	7.674		[48.38	0.121]	6.706	0.38	0.791
102	[48.649	0.125]	7.674		[48.932	0.127]	7.501	0.841	0.974
103	[48.649	0.125]	7.674		[47.528	0.13]	6.619	0.348	0.955
104	[48.649	0.125]	7.674		[48.333	0.122]	5.492	0.113	0.26
105	[48.649	0.125]	7.674		[48.215	0.118]	5.429	0.106	0.2
106	[48.649	0.125]	7.674		[48.256	0.125]	7.306	0.692	0.853
107	[48.649	0.125]	7.674		[49.608	0.126]	7.341	0.717	0.021
108	[49.608	0.126]	7.341		[49.078	0.122]	6.744	0.55	0.489
109	[49.078	0.122]	6.744		[49.39	0.121]	6.169	0.563	0.464
110	[49.39	0.121]	6.169		[49.873	0.116]	5.553	0.54	0.08
111	[49.873	0.116]	5.553		[49.457	0.117]	5.125	0.652	0.222
112	[49.457	0.117]	5.125		[50.094	0.119]	6.132	2.738	0.577
113	[50.094	0.119]	6.132		[49.798	0.124]	6.412	1.323	0.649
114	[49.798	0.124]	6.412		[50.198	0.119]	6.666	1.289	0.771
115	[50.198	0.119]	6.666		[50.534	0.119]	5.538	0.324	0.486
116	[50.198	0.119]	6.666		[49.785	0.118]	5.95	0.489	0.499
117	[50.198	0.119]	6.666		[50.534	0.109]	4.7	0.14	0.579
118	[50.198	0.119]	6.666		[49.423	0.118]	5.577	0.336	0.928
119	[50.198	0.119]	6.666		[50.18	0.123]	7.366	2.013	0.939
120	[50.18	0.123]	7.366		[49.964	0.126]	9.129	5.835	0.365
121	[49.964	0.126]	9.129		[49.684	0.126]	7.7	0.239	0.625
122	[49.964	0.126]	9.129		[49.452	0.123]	7.379	0.174	0.567
123	[49.964	0.126]	9.129		[49.999	0.127]	8.437	0.5	0.304
124	[49.999	0.127]	8.437		[50.145	0.124]	7.359	0.34	0.359
125	[49.999	0.127]	8.437		[51.045	0.121]	7.906	0.588	0.194
126	[51.045	0.121]	7.906		[51	0.119]	6.315	0.204	0.285
127	[51.045	0.121]	7.906		[51.845	0.121]	8.664	2.135	0.222
128	[51.845	0.121]	8.664		[51.241	0.119]	6.157	0.081	0.154
129	[51.845	0.121]	8.664		[52.255	0.121]	8.028	0.529	0.416
130	[52.255	0.121]	8.028		[53.137	0.118]	6.872	0.315	0.089
131	[53.137	0.118]	6.872		[52.667	0.116]	6.075	0.451	0.533
132	[53.137	0.118]	6.872		[53.595	0.112]	5.598	0.28	0.44
133	[53.137	0.118]	6.872		[54.091	0.125]	6.044	0.437	0.928
134	[53.137	0.118]	6.872		[53.581	0.11]	5.283	0.204	0.182
135	[53.581	0.11]	5.283		[54.16	0.103]	4.321	0.382	0.923
136	[53.581	0.11]	5.283		[52.741	0.114]	5.486	1.226	0.663
137	[52.741	0.114]	5.486		[52.433	0.118]	6.423	2.551	0.29
138	[52.433	0.118]	6.423		[51.866	0.122]	10.179	42.788	0.622
139	[51.866	0.122]	10.179		[51.001	0.119]	6.678	0.03	0.156
140	[51.866	0.122]	10.179		[51.824	0.12]	6.475	0.025	0.132
141	[51.866	0.122]	10.179		[52.791	0.12]	8.464	0.18	0.974
142	[51.866	0.122]	10.179		[52.115	0.12]	7.935	0.106	0.943
143	[51.866	0.122]	10.179		[52.632	0.118]	6.537	0.026	0.513
144	[51.866	0.122]	10.179		[52.047	0.12]	7.329	0.058	0.352
145	[51.866	0.122]	10.179		[52.632	0.125]	7.292	0.056	0.727
146	[51.866	0.122]	10.179		[51.52	0.133]	5.326	0.008	0.031
147	[51.866	0.122]	10.179		[51.333	0.128]	6.407	0.023	0.116
148	[51.866	0.122]	10.179		[51.112	0.129]	6.893	0.037	0.953
149	[51.866	0.122]	10.179		[51.381	0.134]	5.125	0.006	0.419
150	[51.866	0.122]	10.179		[50.995	0.134]	4.772	0.004	0.691
151	[51.866	0.122]	10.179		[51.667	0.116]	6.125	0.017	0.448
152	[51.866	0.122]	10.179		[51.83	0.125]	7.871	0.099	0.893
153	[51.866	0.122]	10.179		[51.388	0.123]	8.271	0.148	0.712
154	[51.866	0.122]	10.179		[51.373	0.129]	7.299	0.056	0.327
155	[51.866	0.122]	10.179		[51.869	0.116]	5.505	0.009	0.047
156	[51.866	0.122]	10.179		[51.307	0.123]	8.074	0.122	0.198
157	[51.866	0.122]	10.179		[52.211	0.119]	6.897	0.038	0.64
158	[51.866	0.122]	10.179		[51.962	0.118]	6.429	0.024	0.807
159	[51.866	0.122]	10.179		[52.333	0.111]	4.795	0.005	0.418
160	[51.866	0.122]	10.179		[51.783	0.117]	6.415	0.023	0.512
161	[51.866	0.122]	10.179		[52.075	0.116]	5.973	0.015	0.622
162	[51.866	0.122]	10.179		[51.74	0.113]	4.836	0.005	0.795
163	[51.866	0.122]	10.179		[52.056	0.121]	7.923	0.105	0.798
164	[51.866	0.122]	10.179		[52.467	0.133]	5.095	0.006	0.232
165	[51.866	0.122]	10.179		[52.021	0.128]	7.763	0.089	0.138
166	[51.866	0.122]	10.179		[51.509	0.119]	7.358	0.06	0.02
167	[51.509	0.119]	7.358		[51.771	0.122]	9.699	10.388	0.252
168	[51.771	0.122]	9.699		[51.937	0.126]	7.262	0.087	0.557
169	[51.771	0.122]	9.699		[50.911	0.123]	9.078	0.538	0.307
170	[50.911	0.123]	9.078		[50.368	0.129]	8.291	0.456	0.829
171	[50.911	0.123]	9.078		[50.904	0.125]	7.919	0.314	0.306
172	[50.904	0.125]	7.919		[50.808	0.124]	9.48	4.764	0.239
173	[50.808	0.124]	9.48		[50.424	0.112]	4.699	0.008	0.297
174	[50.808	0.124]	9.48		[51.085	0.124]	11.14	5.262	0.213
175	[51.085	0.124]	11.14		[51.406	0.123]	7.458	0.025	0.071
176	[51.085	0.124]	11.14		[50.758	0.123]	8.926	0.109	0.789
177	[51.085	0.124]	11.14		[50.893	0.124]	7.316	0.022	0.717
178	[51.085	0.124]	11.14		[51.319	0.12]	6.23	0.007	0.342
179	[51.085	0.124]	11.14		[51.619	0.122]	9.699	0.237	0.679
180	[51.085	0.124]	11.14		[51.282	0.126]	7.187	0.019	0.567
181	[51.085	0.124]	11.14		[51.569	0.116]	5.611	0.004	0.803
182	[51.085	0.124]	11.14		[51.239	0.122]	11.961	2.273	0.054
183	[51.239	0.122]	11.961		[50.688	0.12]	6.744	0.005	0.291
184	[51.239	0.122]	11.961		[51.246	0.116]	5.906	0.002	0.879
185	[51.239	0.122]	11.961		[51.431	0.12]	5.662	0.002	0.382
186	[51.239	0.122]	11.961		[51.175	0.122]	6.974	0.007	0.332
187	[51.239	0.122]	11.961		[50.722	0.126]	8.292	0.025	0.158
188	[51.239	0.122]	11.961		[50.32	0.114]	5.361	0.001	0.034
189	[51.239	0.122]	11.961		[51.281	0.118]	5.991	0.003	0.978
190	[51.239	0.122]	11.961		[51.774	0.118]	6.225	0.003	0.078
191	[51.239	0.122]	11.961		[50.679	0.127]	8.469	0.03	0.065
192	[51.239	0.122]	11.961		[51.696	0.116]	5.683	0.002	0.504
193	[51.239	0.122]	11.961		[51.266	0.122]	6.796	0.006	0.229
194	[51.239	0.122]	11.961		[51.678	0.129]	6.227	0.003	0.507
195	[51.239	0.122]	11.961		[51.344	0.118]	5.926	0.002	0.016
196	[51.239	0.122]	11.961		[50.354	0.125]	7.962	0.018	0.207
197	[51.239	0.122]	11.961		[50.835	0.124]	7.896	0.017	0.936
198	[51.239	0.122]	11.961		[51.871	0.116]	6.702	0.005	0.152
199	[51.239	0.122]	11.961		[51.389	0.122]	8.73	0.039	0.411
200	[51.239	0.122]	11.961		[50.806	0.132]	5.563	0.002	0.761
201	[51.239	0.122]	11.961		[51.674	0.124]	8.95	0.049	0.524
202	[51.239	0.122]	11.961		[50.35	0.121]	7.314	0.01	0.165
203	[51.239	0.122]	11.961		[51.229	0.118]	6.519	0.004	0.262
204	[51.239	0.122]	11.961		[51.729	0.131]	6.654	0.005	0.47
205	[51.239	0.122]	11.961		[51.226	0.127]	7.172	0.008	0.931
206	[51.239	0.122]	11.961		[52.215	0.124]	8.58	0.034	0.404
207	[51.239	0.122]	11.961		[50.329	0.118]	6.124	0.003	0.654
208	[51.239	0.122]	11.961		[51.518	0.131]	5.446	0.001	0.014
209	[51.239	0.122]	11.961		[51.251	0.12]	7.897	0.017	0.918
210	[51.239	0.122]	11.961		[51.972	0.131]	5.422	0.001	0.58
211	[51.239	0.122]	11.961		[52.015	0.129]	6.021	0.003	0.752
212	[51.239	0.122]	11.961		[52.363	0.114]	5.89	0.002	0.458
