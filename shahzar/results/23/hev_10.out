
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.5, 0.005)) {
+   # Sample from gamma distributions with means at the current state.
+   # The SDs correspond to the step-size of the chain for each parameter.
+   r <- (state / sds)^2
+   v <- state / sds^2
+   return(rgamma(n = 2, shape = r, rate = v))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 3), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 3), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '10/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '10/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '10/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.1, 0.25)
> start <- c(56.1012661805613, 0.0854055992250984)
> results <- metropolis(start, target, num_sim = 500, num_iter = 1000)
1	[56.101	0.085]	8.461		[56.346	0.078]	7.492	0.38	0.882
2	[56.101	0.085]	8.461		[56.66	0.083]	8.401	0.942	0.1
3	[56.66	0.083]	8.401		[56.811	0.07]	6.078	0.098	0.509
4	[56.66	0.083]	8.401		[56.432	0.077]	7.163	0.29	0.249
5	[56.432	0.077]	7.163		[56.896	0.076]	6.841	0.725	0.894
6	[56.432	0.077]	7.163		[56.631	0.074]	6.501	0.516	0.328
7	[56.631	0.074]	6.501		[55.688	0.083]	10.021	33.781	0.013
8	[55.688	0.083]	10.021		[55.074	0.086]	9.133	0.411	0.057
9	[55.074	0.086]	9.133		[55.719	0.093]	6.838	0.101	0.037
10	[55.719	0.093]	6.838		[54.944	0.085]	9.311	11.856	0.905
11	[54.944	0.085]	9.311		[54.908	0.092]	6.737	0.076	0.141
12	[54.944	0.085]	9.311		[54.437	0.086]	10.268	2.605	0.789
13	[54.437	0.086]	10.268		[55.546	0.091]	6.952	0.036	0.244
14	[54.437	0.086]	10.268		[54.686	0.087]	8.83	0.237	0.51
15	[54.437	0.086]	10.268		[55.654	0.087]	9.494	0.461	0.437
16	[55.654	0.087]	9.494		[55.611	0.09]	8.713	0.458	0.974
17	[55.654	0.087]	9.494		[56.522	0.094]	5.735	0.023	0.099
18	[55.654	0.087]	9.494		[55.079	0.092]	6.775	0.066	0.799
19	[55.654	0.087]	9.494		[56.72	0.093]	6.221	0.038	0.781
20	[55.654	0.087]	9.494		[55.116	0.086]	9.857	1.438	0.71
21	[55.116	0.086]	9.857		[55.091	0.081]	8.957	0.406	0.648
22	[55.116	0.086]	9.857		[54.931	0.083]	8.177	0.186	0.425
23	[55.116	0.086]	9.857		[53.775	0.089]	8.017	0.159	0.879
24	[55.116	0.086]	9.857		[55.343	0.094]	6.1	0.023	0.068
25	[55.116	0.086]	9.857		[54.823	0.09]	6.879	0.051	0.559
26	[55.116	0.086]	9.857		[54.512	0.091]	7.165	0.068	0.596
27	[55.116	0.086]	9.857		[54.71	0.081]	7.047	0.06	0.032
28	[54.71	0.081]	7.047		[54.603	0.087]	8.252	3.338	0.905
29	[54.603	0.087]	8.252		[54.774	0.086]	9.914	5.271	0.824
30	[54.774	0.086]	9.914		[55.365	0.083]	8.585	0.265	0.914
31	[54.774	0.086]	9.914		[55.604	0.075]	6.627	0.037	0.205
32	[54.774	0.086]	9.914		[54.255	0.092]	7.134	0.062	0.709
33	[54.774	0.086]	9.914		[54.776	0.079]	7.561	0.095	0.514
34	[54.774	0.086]	9.914		[55.093	0.086]	9.443	0.624	0.782
35	[54.774	0.086]	9.914		[54.481	0.082]	7.582	0.097	0.681
36	[54.774	0.086]	9.914		[54.581	0.08]	8.003	0.148	0.368
37	[54.774	0.086]	9.914		[55.538	0.09]	7.844	0.126	0.093
38	[55.538	0.09]	7.844		[55.418	0.088]	8.518	1.962	0.862
39	[55.418	0.088]	8.518		[56.016	0.091]	7.04	0.228	0.404
40	[55.418	0.088]	8.518		[55.539	0.087]	8.497	0.979	0.065
41	[55.539	0.087]	8.497		[54.985	0.093]	6.851	0.193	0.434
42	[55.539	0.087]	8.497		[54.951	0.088]	8.687	1.209	0.608
43	[54.951	0.088]	8.687		[55.56	0.09]	7.687	0.368	0.727
44	[54.951	0.088]	8.687		[54.957	0.095]	6.822	0.155	0.26
45	[54.951	0.088]	8.687		[54.778	0.088]	8.504	0.833	0.497
46	[54.778	0.088]	8.504		[55.299	0.094]	6.197	0.1	0.88
47	[54.778	0.088]	8.504		[55.234	0.082]	8.87	1.442	0.53
48	[55.234	0.082]	8.87		[54.838	0.071]	6.25	0.073	0.141
49	[55.234	0.082]	8.87		[54.841	0.088]	9.6	2.075	0.759
50	[54.841	0.088]	9.6		[54.793	0.083]	9.113	0.615	0.063
51	[54.793	0.083]	9.113		[54.492	0.079]	7.152	0.141	0.437
52	[54.793	0.083]	9.113		[54.237	0.092]	7.569	0.213	0.705
53	[54.793	0.083]	9.113		[54.578	0.078]	6.938	0.114	0.688
54	[54.793	0.083]	9.113		[54.828	0.083]	10.047	2.543	0.089
55	[54.828	0.083]	10.047		[54.29	0.09]	6.674	0.034	0.024
56	[54.29	0.09]	6.674		[54.605	0.089]	7.468	2.212	0.569
57	[54.605	0.089]	7.468		[55.154	0.09]	6.921	0.579	0.638
58	[54.605	0.089]	7.468		[54.485	0.076]	7.106	0.696	0.276
59	[54.485	0.076]	7.106		[54.642	0.074]	6.7	0.667	0.117
60	[54.642	0.074]	6.7		[54.486	0.071]	5.877	0.439	0.06
61	[54.486	0.071]	5.877		[54.379	0.076]	6.823	2.576	0.079
62	[54.379	0.076]	6.823		[54.41	0.083]	8.918	8.121	0.882
63	[54.41	0.083]	8.918		[53.662	0.086]	8.084	0.435	0.183
64	[53.662	0.086]	8.084		[53.679	0.094]	6.619	0.231	0.579
65	[53.662	0.086]	8.084		[53.406	0.084]	8.598	1.671	0.139
66	[53.406	0.084]	8.598		[53.112	0.085]	8.387	0.81	0.839
67	[53.406	0.084]	8.598		[54.085	0.082]	7.854	0.476	0.257
68	[54.085	0.082]	7.854		[53.972	0.085]	9.067	3.362	0.715
69	[53.972	0.085]	9.067		[54.027	0.093]	7.567	0.223	0.661
70	[53.972	0.085]	9.067		[54.4	0.092]	7.374	0.184	0.22
71	[53.972	0.085]	9.067		[53.924	0.077]	6.789	0.102	0.236
72	[53.972	0.085]	9.067		[54.163	0.075]	6.375	0.068	0.336
73	[53.972	0.085]	9.067		[53.793	0.086]	10.68	5.02	0.857
74	[53.793	0.086]	10.68		[54.464	0.087]	9.114	0.209	0.119
75	[54.464	0.087]	9.114		[54.041	0.089]	8.454	0.517	0.134
76	[54.041	0.089]	8.454		[53.824	0.092]	8.024	0.651	0.857
77	[54.041	0.089]	8.454		[54.143	0.095]	6.389	0.127	0.235
78	[54.041	0.089]	8.454		[53.206	0.088]	10.202	5.74	0.587
79	[53.206	0.088]	10.202		[52.895	0.088]	8.853	0.26	0.73
80	[53.206	0.088]	10.202		[53.387	0.096]	6.379	0.022	0.532
81	[53.206	0.088]	10.202		[52.936	0.081]	7.221	0.051	0.487
82	[53.206	0.088]	10.202		[52.961	0.087]	11.277	2.932	0.509
83	[52.961	0.087]	11.277		[52.426	0.082]	7.618	0.026	0.928
84	[52.961	0.087]	11.277		[52.89	0.085]	8.619	0.07	0.471
85	[52.961	0.087]	11.277		[52.538	0.094]	6.848	0.012	0.729
86	[52.961	0.087]	11.277		[53.088	0.087]	8.132	0.043	0.359
87	[52.961	0.087]	11.277		[53.4	0.091]	7.488	0.023	0.032
88	[52.961	0.087]	11.277		[53.224	0.085]	7.59	0.025	0.758
89	[52.961	0.087]	11.277		[53.258	0.093]	7.159	0.016	0.276
90	[52.961	0.087]	11.277		[52.471	0.082]	7.703	0.028	0.021
91	[52.471	0.082]	7.703		[52.974	0.09]	8.428	2.063	0.254
92	[52.974	0.09]	8.428		[52.542	0.077]	6.268	0.115	0.248
93	[52.974	0.09]	8.428		[53.056	0.089]	8.568	1.151	0.41
94	[53.056	0.089]	8.568		[53.215	0.086]	11.873	27.252	0.722
95	[53.215	0.086]	11.873		[53.398	0.089]	10.309	0.209	0.492
96	[53.215	0.086]	11.873		[53.119	0.083]	8.062	0.022	0.289
97	[53.215	0.086]	11.873		[52.905	0.09]	9.206	0.069	0.122
98	[53.215	0.086]	11.873		[52.988	0.088]	8.986	0.056	0.915
99	[53.215	0.086]	11.873		[53.632	0.079]	7.109	0.009	0.877
100	[53.215	0.086]	11.873		[52.63	0.087]	9.903	0.139	0.766
101	[53.215	0.086]	11.873		[53.329	0.078]	6.662	0.005	0.784
102	[53.215	0.086]	11.873		[52.846	0.077]	6.657	0.005	0.153
103	[53.215	0.086]	11.873		[53.215	0.086]	8.185	0.025	0.626
104	[53.215	0.086]	11.873		[52.413	0.089]	8.278	0.027	0.617
105	[53.215	0.086]	11.873		[52.557	0.09]	7.64	0.014	0.003
106	[52.557	0.09]	7.64		[52.825	0.086]	9.149	4.521	0.76
107	[52.825	0.086]	9.149		[52.275	0.082]	6.379	0.063	0.702
108	[52.825	0.086]	9.149		[52.733	0.088]	8.218	0.394	0.875
109	[52.825	0.086]	9.149		[53.304	0.092]	7.193	0.142	0.323
110	[52.825	0.086]	9.149		[53.345	0.083]	7.859	0.276	0.363
111	[52.825	0.086]	9.149		[53.979	0.087]	10.017	2.384	0.385
112	[53.979	0.087]	10.017		[54.297	0.084]	8.163	0.157	0.671
113	[53.979	0.087]	10.017		[53.753	0.08]	7.261	0.064	0.803
114	[53.979	0.087]	10.017		[53.767	0.092]	7.844	0.114	0.645
115	[53.979	0.087]	10.017		[54.521	0.091]	7.908	0.121	0.38
116	[53.979	0.087]	10.017		[54.326	0.085]	8.727	0.275	0.059
117	[54.326	0.085]	8.727		[53.615	0.087]	8.002	0.484	0.307
118	[53.615	0.087]	8.002		[53.767	0.086]	9.524	4.579	0.048
119	[53.767	0.086]	9.524		[53.031	0.09]	10.513	2.691	0.822
120	[53.031	0.09]	10.513		[53.319	0.089]	9.536	0.376	0.914
121	[53.031	0.09]	10.513		[52.558	0.094]	6.949	0.028	0.656
122	[53.031	0.09]	10.513		[53.07	0.082]	7.369	0.043	0.421
123	[53.031	0.09]	10.513		[53.285	0.091]	8.786	0.178	0.898
124	[53.031	0.09]	10.513		[52.252	0.085]	7.209	0.037	0.724
125	[53.031	0.09]	10.513		[52.633	0.087]	8.134	0.093	0.237
126	[53.031	0.09]	10.513		[53.103	0.088]	7.74	0.062	0.456
127	[53.031	0.09]	10.513		[52.711	0.089]	8.027	0.083	0.872
128	[53.031	0.09]	10.513		[52.589	0.093]	6.532	0.019	0.866
129	[53.031	0.09]	10.513		[53.501	0.089]	9.477	0.355	0.172
130	[53.501	0.089]	9.477		[53.82	0.081]	7.393	0.124	0.562
131	[53.501	0.089]	9.477		[53.831	0.089]	8.344	0.322	0.883
132	[53.501	0.089]	9.477		[52.97	0.087]	8.817	0.517	0.707
133	[53.501	0.089]	9.477		[53.016	0.084]	8.028	0.235	0.204
134	[53.016	0.084]	8.028		[52.691	0.086]	7.686	0.71	0.759
135	[53.016	0.084]	8.028		[52.485	0.081]	7.652	0.686	0.217
136	[52.485	0.081]	7.652		[52.311	0.079]	6.835	0.442	0.683
137	[52.485	0.081]	7.652		[51.873	0.083]	7.412	0.787	0.29
138	[51.873	0.083]	7.412		[52.123	0.084]	7.925	1.671	0.249
139	[52.123	0.084]	7.925		[52.929	0.083]	7.67	0.775	0.231
140	[52.929	0.083]	7.67		[52.569	0.08]	7.158	0.599	0.606
141	[52.929	0.083]	7.67		[53.13	0.082]	8.295	1.868	0.757
142	[53.13	0.082]	8.295		[53.286	0.096]	6.536	0.172	0.819
143	[53.13	0.082]	8.295		[51.991	0.075]	6.048	0.106	0.429
144	[53.13	0.082]	8.295		[54.085	0.084]	9.254	2.608	0.837
145	[54.085	0.084]	9.254		[54.709	0.087]	9.311	1.059	0.918
146	[54.709	0.087]	9.311		[54.356	0.09]	8.062	0.287	0.298
147	[54.709	0.087]	9.311		[55.673	0.089]	8.38	0.394	0.927
148	[54.709	0.087]	9.311		[54.093	0.093]	7.23	0.125	0.349
149	[54.709	0.087]	9.311		[55.93	0.089]	8.291	0.361	0.256
150	[55.93	0.089]	8.291		[55.789	0.092]	7.268	0.36	0.529
151	[55.93	0.089]	8.291		[55.995	0.091]	7.343	0.388	0.774
152	[55.93	0.089]	8.291		[56.89	0.097]	5.623	0.069	0.593
153	[55.93	0.089]	8.291		[56.005	0.09]	6.815	0.228	0.117
154	[56.005	0.09]	6.815		[56.009	0.097]	5.24	0.207	0.699
155	[56.005	0.09]	6.815		[56.389	0.094]	6.291	0.592	0.913
156	[56.005	0.09]	6.815		[55.838	0.089]	6.85	1.036	0.079
157	[55.838	0.089]	6.85		[55.49	0.095]	5.921	0.395	0.883
158	[55.838	0.089]	6.85		[55.904	0.093]	6.445	0.667	0.275
159	[55.904	0.093]	6.445		[57.204	0.095]	6.118	0.721	0.681
160	[57.204	0.095]	6.118		[56.965	0.097]	5.333	0.456	0.018
161	[56.965	0.097]	5.333		[57.3	0.094]	5.659	1.386	0.767
162	[57.3	0.094]	5.659		[57.311	0.097]	5.435	0.799	0.813
163	[57.3	0.094]	5.659		[56.452	0.095]	5.697	1.039	0.262
164	[56.452	0.095]	5.697		[56.095	0.098]	5.55	0.863	0.792
165	[56.095	0.098]	5.55		[55.873	0.095]	5.707	1.171	0.071
166	[55.873	0.095]	5.707		[55.799	0.1]	5.366	0.711	0.512
167	[55.799	0.1]	5.366		[55.774	0.099]	5.22	0.864	0.82
168	[55.774	0.099]	5.22		[55.625	0.103]	4.55	0.512	0.392
169	[55.625	0.103]	4.55		[55.928	0.099]	5.242	1.998	0.499
170	[55.928	0.099]	5.242		[56.603	0.1]	5.169	0.93	0.175
171	[56.603	0.1]	5.169		[57.06	0.095]	5.426	1.293	0.359
172	[57.06	0.095]	5.426		[57.095	0.09]	7.277	6.362	0.587
173	[57.095	0.09]	7.277		[56.793	0.099]	5.269	0.134	0.124
174	[56.793	0.099]	5.269		[56.344	0.098]	5.603	1.396	0.633
175	[56.344	0.098]	5.603		[56.565	0.095]	5.756	1.165	0.797
176	[56.565	0.095]	5.756		[56.405	0.098]	5.198	0.573	0.8
177	[56.565	0.095]	5.756		[56.225	0.091]	7.224	4.341	0.036
178	[56.225	0.091]	7.224		[55.782	0.096]	5.481	0.175	0.207
179	[56.225	0.091]	7.224		[56.483	0.087]	8.802	4.848	0.157
180	[56.483	0.087]	8.802		[55.87	0.082]	8.132	0.512	0.708
181	[56.483	0.087]	8.802		[55.65	0.083]	8.688	0.892	0.582
182	[55.65	0.083]	8.688		[55.1	0.091]	7.57	0.327	0.162
183	[55.1	0.091]	7.57		[55.499	0.103]	4.99	0.076	0.717
184	[55.1	0.091]	7.57		[54.898	0.088]	8.032	1.588	0.253
185	[54.898	0.088]	8.032		[55.232	0.088]	8.631	1.82	0.054
186	[55.232	0.088]	8.631		[54.47	0.085]	9.018	1.473	0.845
187	[54.47	0.085]	9.018		[54.133	0.09]	8.566	0.636	0.246
188	[54.133	0.09]	8.566		[53.491	0.089]	8.849	1.327	0.741
189	[53.491	0.089]	8.849		[53.669	0.092]	8.081	0.464	0.504
190	[53.491	0.089]	8.849		[53.15	0.091]	7.663	0.306	0.13
191	[53.15	0.091]	7.663		[51.966	0.087]	7.048	0.54	0.203
192	[51.966	0.087]	7.048		[51.404	0.083]	7.168	1.127	0.43
193	[51.404	0.083]	7.168		[51	0.088]	6.662	0.603	0.484
194	[51	0.088]	6.662		[50.642	0.085]	6.873	1.235	0.233
195	[50.642	0.085]	6.873		[50.016	0.088]	7.252	1.462	0.911
196	[50.016	0.088]	7.252		[49.72	0.088]	6.694	0.572	0.962
197	[50.016	0.088]	7.252		[50.332	0.089]	6.907	0.708	0.078
198	[50.332	0.089]	6.907		[50.059	0.094]	6.744	0.85	0.196
199	[50.059	0.094]	6.744		[49.761	0.098]	6.394	0.705	0.914
200	[50.059	0.094]	6.744		[50.695	0.088]	7.865	3.066	0.206
201	[50.695	0.088]	7.865		[51.668	0.088]	8.407	1.72	0.095
202	[51.668	0.088]	8.407		[51.231	0.091]	7.105	0.272	0.097
203	[51.231	0.091]	7.105		[50.457	0.088]	7.129	1.024	0.882
204	[50.457	0.088]	7.129		[50.43	0.094]	7.423	1.342	0.298
205	[50.43	0.094]	7.423		[50.495	0.097]	6.489	0.393	0.446
206	[50.43	0.094]	7.423		[49.804	0.092]	6.978	0.641	0.85
207	[50.43	0.094]	7.423		[49.403	0.097]	6.689	0.48	0.318
208	[49.403	0.097]	6.689		[49.344	0.092]	6.824	1.144	0.455
209	[49.344	0.092]	6.824		[48.191	0.089]	6.627	0.821	0.282
210	[48.191	0.089]	6.627		[48.624	0.084]	6.175	0.636	0.899
211	[48.191	0.089]	6.627		[48.068	0.088]	6.516	0.895	0.849
212	[48.068	0.088]	6.516		[47.374	0.084]	6.159	0.7	0.679
213	[47.374	0.084]	6.159		[47.499	0.083]	5.665	0.61	0.967
214	[47.374	0.084]	6.159		[47.565	0.076]	5.759	0.671	0.46
215	[47.565	0.076]	5.759		[47.888	0.07]	5.161	0.55	0.578
216	[47.565	0.076]	5.759		[47.35	0.079]	5.707	0.949	0.119
217	[47.35	0.079]	5.707		[46.813	0.085]	5.604	0.902	0.865
218	[46.813	0.085]	5.604		[45.737	0.086]	5.408	0.822	0.592
219	[45.737	0.086]	5.408		[44.967	0.084]	5.574	1.18	0.492
220	[44.967	0.084]	5.574		[44.147	0.085]	5.053	0.594	0.244
221	[44.147	0.085]	5.053		[44.556	0.092]	5.881	2.288	0.89
222	[44.556	0.092]	5.881		[44.663	0.096]	6.125	1.276	0.441
223	[44.663	0.096]	6.125		[44.241	0.092]	5.509	0.54	0.236
224	[44.241	0.092]	5.509		[44.817	0.093]	6.116	1.835	0.966
225	[44.817	0.093]	6.116		[44.164	0.091]	5.813	0.738	0.222
226	[44.164	0.091]	5.813		[43.491	0.088]	5.334	0.62	0.646
227	[44.164	0.091]	5.813		[44.384	0.086]	5.601	0.809	0.319
228	[44.384	0.086]	5.601		[44.639	0.089]	5.629	1.028	0.251
229	[44.639	0.089]	5.629		[44.989	0.095]	6.161	1.703	0.151
230	[44.989	0.095]	6.161		[44.814	0.095]	6.011	0.86	0.674
231	[44.814	0.095]	6.011		[45.125	0.087]	5.704	0.736	0.071
232	[45.125	0.087]	5.704		[45.571	0.1]	6.282	1.784	0.009
233	[45.571	0.1]	6.282		[45.964	0.093]	6.042	0.786	0.884
234	[45.571	0.1]	6.282		[45.873	0.108]	5.15	0.322	0.567
235	[45.571	0.1]	6.282		[45.284	0.105]	5.74	0.581	0.115
236	[45.284	0.105]	5.74		[45.649	0.11]	5.3	0.644	0.771
237	[45.284	0.105]	5.74		[45.266	0.111]	5.004	0.479	0.74
238	[45.284	0.105]	5.74		[45.406	0.105]	5.582	0.854	0.205
239	[45.406	0.105]	5.582		[45.773	0.101]	6.23	1.912	0.292
240	[45.773	0.101]	6.23		[45.056	0.105]	5.569	0.517	0.169
241	[45.056	0.105]	5.569		[44.872	0.11]	4.93	0.528	0.426
242	[44.872	0.11]	4.93		[45.46	0.112]	5.027	1.102	0.16
243	[45.46	0.112]	5.027		[45.081	0.113]	4.859	0.845	0.66
244	[45.081	0.113]	4.859		[45.669	0.111]	5.031	1.188	0.746
245	[45.669	0.111]	5.031		[46.56	0.109]	5.274	1.275	0.046
246	[46.56	0.109]	5.274		[46.844	0.109]	5.092	0.833	0.082
247	[46.844	0.109]	5.092		[47.435	0.117]	4.201	0.41	0.768
248	[46.844	0.109]	5.092		[47.903	0.106]	5.326	1.264	0.57
249	[47.903	0.106]	5.326		[47.499	0.103]	5.805	1.614	0.498
250	[47.499	0.103]	5.805		[47.755	0.097]	6.922	3.057	0.829
251	[47.755	0.097]	6.922		[47.62	0.097]	6.45	0.623	0.529
252	[47.62	0.097]	6.45		[47.816	0.1]	6.267	0.833	0.762
253	[47.816	0.1]	6.267		[47.979	0.093]	6.435	1.183	0.512
254	[47.979	0.093]	6.435		[47.638	0.085]	6.074	0.697	0.659
255	[47.638	0.085]	6.074		[47.903	0.086]	7.271	3.308	0.651
256	[47.903	0.086]	7.271		[47.595	0.089]	6.814	0.633	0.489
257	[47.595	0.089]	6.814		[48.235	0.091]	6.822	1.009	0.317
258	[48.235	0.091]	6.822		[47.728	0.096]	6.338	0.616	0.118
259	[47.728	0.096]	6.338		[47.919	0.086]	5.968	0.691	0.352
260	[47.919	0.086]	5.968		[48.506	0.086]	6.039	1.074	0.662
261	[48.506	0.086]	6.039		[49.19	0.084]	6.549	1.665	0.503
262	[49.19	0.084]	6.549		[49.963	0.079]	6.455	0.91	0.666
263	[49.963	0.079]	6.455		[49.934	0.086]	6.957	1.652	0.328
264	[49.934	0.086]	6.957		[49.97	0.097]	6.484	0.623	0.816
265	[49.934	0.086]	6.957		[49.718	0.093]	7.335	1.459	0.353
266	[49.718	0.093]	7.335		[49.795	0.087]	7.997	1.94	0.396
267	[49.795	0.087]	7.997		[49.599	0.084]	6.217	0.169	0.938
268	[49.795	0.087]	7.997		[49.4	0.079]	5.845	0.116	0.957
