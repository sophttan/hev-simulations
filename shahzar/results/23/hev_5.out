
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(obs, target) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((obs - target)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, target, n = 300) {
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state, inc, inf)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   avg_vals <- colMeans(vals)
+   return(-log(score(avg_vals, target)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.5, 0.005)) {
+   # Sample from gamma distributions with means at the current state.
+   # The SDs correspond to the step-size of the chain for each parameter.
+   r <- (state / sds)^2
+   v <- state / sds^2
+   return(rgamma(n = 2, shape = r, rate = v))
+ }
> 
> # MCMC
> metropolis <- function(start, target, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 2)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, target, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, target, num_sim)
+     
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     message(paste0(i, '\t[', round(curr[1], 3), '\t', round(curr[2], 3), 
+                    ']\t', round(curr_lik, 3), '\t', 
+                    '\t[', round(prop[1], 3), '\t', round(prop[2], 3), ']\t',
+                    round(prop_lik, 3), '\t', round(r, 3), '\t', round(p, 3)))
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = '5/path.txt', row.names = F, col.names = F)
+     write.table(liks, file = '5/liks.txt', row.names = F, col.names = F)
+     write.table(best, file = '5/best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> target <- c(0.05, 0.25)
> start <- c(56.25, 0.07)
> results <- metropolis(start, target, num_sim = 500, num_iter = 1000)
1	[56.25	0.07]	9.51		[55.663	0.074]	9.702	1.212	0.587
2	[55.663	0.074]	9.702		[56.24	0.07]	9.381	0.725	0.541
3	[56.24	0.07]	9.381		[56.207	0.072]	8.988	0.675	0.365
4	[56.207	0.072]	8.988		[55.698	0.069]	9.297	1.361	0.954
5	[55.698	0.069]	9.297		[55.755	0.064]	8.97	0.721	0.33
6	[55.755	0.064]	8.97		[55.846	0.062]	8.101	0.419	0.45
7	[55.755	0.064]	8.97		[55.022	0.06]	7.995	0.377	0.696
8	[55.755	0.064]	8.97		[55.842	0.063]	8.636	0.716	0.31
9	[55.842	0.063]	8.636		[56.287	0.064]	9.247	1.843	0.148
10	[56.287	0.064]	9.247		[57.132	0.073]	8.221	0.358	0.282
11	[57.132	0.073]	8.221		[56.697	0.071]	9.281	2.886	0.597
12	[56.697	0.071]	9.281		[56.173	0.069]	11.764	11.973	0.034
13	[56.173	0.069]	11.764		[57.065	0.073]	7.678	0.017	0.801
14	[56.173	0.069]	11.764		[56.6	0.066]	15.77	54.957	0.353
15	[56.6	0.066]	15.77		[57.149	0.071]	9.717	0.002	0.635
16	[56.6	0.066]	15.77		[56.226	0.067]	9	0.001	0.177
17	[56.6	0.066]	15.77		[56.275	0.059]	7.911	0	0.113
18	[56.6	0.066]	15.77		[56.827	0.063]	8.879	0.001	0.358
19	[56.6	0.066]	15.77		[57.183	0.067]	9.774	0.002	0.042
20	[56.6	0.066]	15.77		[55.701	0.074]	8.707	0.001	0.223
21	[56.6	0.066]	15.77		[56.403	0.06]	7.68	0	0.77
22	[56.6	0.066]	15.77		[55.863	0.064]	8.144	0	0.747
23	[56.6	0.066]	15.77		[56.555	0.062]	8.737	0.001	0.703
24	[56.6	0.066]	15.77		[56.25	0.069]	10.954	0.008	0.197
25	[56.6	0.066]	15.77		[55.255	0.062]	8.594	0.001	0.528
26	[56.6	0.066]	15.77		[56.227	0.059]	7.828	0	0.646
27	[56.6	0.066]	15.77		[57.335	0.057]	7.713	0	0.409
28	[56.6	0.066]	15.77		[57.065	0.069]	8.386	0.001	0.589
29	[56.6	0.066]	15.77		[56.874	0.062]	8.319	0.001	0.838
30	[56.6	0.066]	15.77		[56.488	0.08]	6.553	0	0.421
31	[56.6	0.066]	15.77		[56.759	0.061]	8.131	0	0.366
32	[56.6	0.066]	15.77		[56.439	0.07]	12.812	0.052	0.479
33	[56.6	0.066]	15.77		[56.679	0.069]	8.633	0.001	0.066
34	[56.6	0.066]	15.77		[56.739	0.071]	10.334	0.004	0.648
35	[56.6	0.066]	15.77		[57.092	0.056]	7.505	0	0.458
36	[56.6	0.066]	15.77		[56.479	0.054]	7.498	0	0.008
37	[56.6	0.066]	15.77		[56.825	0.06]	7.976	0	0.358
38	[56.6	0.066]	15.77		[57.58	0.061]	7.109	0	0.167
39	[56.6	0.066]	15.77		[56.741	0.064]	9.092	0.001	0.73
40	[56.6	0.066]	15.77		[56.645	0.063]	8.491	0.001	0.564
41	[56.6	0.066]	15.77		[56.821	0.075]	8.111	0	0.022
42	[56.6	0.066]	15.77		[56.659	0.073]	8.486	0.001	0.161
43	[56.6	0.066]	15.77		[56.092	0.069]	9.268	0.002	0.176
44	[56.6	0.066]	15.77		[56.154	0.075]	7.745	0	0.835
45	[56.6	0.066]	15.77		[56.812	0.067]	9.452	0.002	0.633
46	[56.6	0.066]	15.77		[56.489	0.06]	8.035	0	0.817
47	[56.6	0.066]	15.77		[57.114	0.066]	9.316	0.002	0.886
48	[56.6	0.066]	15.77		[56.477	0.073]	8.401	0.001	0.256
49	[56.6	0.066]	15.77		[57.435	0.056]	7.474	0	0.633
50	[56.6	0.066]	15.77		[56.67	0.067]	11.127	0.01	0.305
51	[56.6	0.066]	15.77		[56.832	0.065]	9.28	0.002	0.406
52	[56.6	0.066]	15.77		[56.236	0.067]	9.981	0.003	0.332
53	[56.6	0.066]	15.77		[55.683	0.069]	11.006	0.009	0.838
54	[56.6	0.066]	15.77		[55.632	0.069]	10.034	0.003	0.302
55	[56.6	0.066]	15.77		[56.579	0.071]	11.416	0.013	0.067
56	[56.6	0.066]	15.77		[56.844	0.074]	8.9	0.001	0.699
57	[56.6	0.066]	15.77		[56.889	0.061]	8.374	0.001	0.158
58	[56.6	0.066]	15.77		[56.574	0.057]	7.558	0	0.116
59	[56.6	0.066]	15.77		[56.933	0.059]	7.798	0	0.517
60	[56.6	0.066]	15.77		[55.752	0.062]	7.865	0	0.714
61	[56.6	0.066]	15.77		[55.95	0.061]	8.267	0.001	0.787
62	[56.6	0.066]	15.77		[56.89	0.064]	8.361	0.001	0.781
63	[56.6	0.066]	15.77		[56.929	0.063]	7.777	0	0.955
64	[56.6	0.066]	15.77		[57.645	0.063]	9.954	0.003	0.555
65	[56.6	0.066]	15.77		[56.46	0.066]	9.709	0.002	0.612
66	[56.6	0.066]	15.77		[55.882	0.07]	10.437	0.005	0.201
67	[56.6	0.066]	15.77		[56.85	0.067]	12.064	0.025	0.41
68	[56.6	0.066]	15.77		[55.875	0.063]	8.338	0.001	0.658
69	[56.6	0.066]	15.77		[55.513	0.067]	9.692	0.002	0.472
70	[56.6	0.066]	15.77		[56.58	0.067]	8.988	0.001	0.275
71	[56.6	0.066]	15.77		[56.349	0.072]	10.055	0.003	0.237
72	[56.6	0.066]	15.77		[55.708	0.065]	9.264	0.001	0.04
73	[56.6	0.066]	15.77		[56.786	0.072]	8.401	0.001	0.242
74	[56.6	0.066]	15.77		[56.696	0.069]	8.68	0.001	0.088
75	[56.6	0.066]	15.77		[56.882	0.073]	7.824	0	0.168
76	[56.6	0.066]	15.77		[57.249	0.069]	11.488	0.014	0.087
77	[56.6	0.066]	15.77		[57.251	0.065]	9.762	0.002	0.128
78	[56.6	0.066]	15.77		[56.754	0.071]	11.221	0.011	0.225
79	[56.6	0.066]	15.77		[56.743	0.064]	9.195	0.001	0.76
80	[56.6	0.066]	15.77		[56.589	0.068]	10.198	0.004	0.957
81	[56.6	0.066]	15.77		[56.33	0.06]	8.004	0	0.728
82	[56.6	0.066]	15.77		[56.278	0.057]	7.746	0	0.068
83	[56.6	0.066]	15.77		[55.713	0.074]	7.811	0	0.181
84	[56.6	0.066]	15.77		[56.733	0.066]	9.809	0.003	0.045
85	[56.6	0.066]	15.77		[57.097	0.067]	9.385	0.002	0.782
86	[56.6	0.066]	15.77		[57.297	0.073]	8.398	0.001	0.984
87	[56.6	0.066]	15.77		[56.869	0.063]	9.175	0.001	0.735
88	[56.6	0.066]	15.77		[56.218	0.069]	11.297	0.011	0.625
89	[56.6	0.066]	15.77		[55.275	0.066]	8.793	0.001	0.153
90	[56.6	0.066]	15.77		[56.324	0.061]	8.345	0.001	0.932
91	[56.6	0.066]	15.77		[57.038	0.07]	10.474	0.005	0.921
92	[56.6	0.066]	15.77		[57.48	0.065]	9.165	0.001	0.18
93	[56.6	0.066]	15.77		[56.044	0.059]	7.754	0	0.348
94	[56.6	0.066]	15.77		[56.746	0.066]	9.745	0.002	0.511
95	[56.6	0.066]	15.77		[57.04	0.059]	7.408	0	0.93
96	[56.6	0.066]	15.77		[57.548	0.067]	11.438	0.013	0.63
97	[56.6	0.066]	15.77		[57.166	0.071]	8.003	0	0.068
98	[56.6	0.066]	15.77		[57.87	0.066]	8.137	0	0.744
99	[56.6	0.066]	15.77		[56.61	0.069]	12.118	0.026	0.945
100	[56.6	0.066]	15.77		[55.736	0.07]	13.026	0.064	0.777
101	[56.6	0.066]	15.77		[56.296	0.063]	8.371	0.001	0.642
102	[56.6	0.066]	15.77		[56.761	0.069]	8.662	0.001	0.427
103	[56.6	0.066]	15.77		[56.413	0.073]	9.41	0.002	0.163
104	[56.6	0.066]	15.77		[56.29	0.061]	8.514	0.001	0.466
105	[56.6	0.066]	15.77		[56.879	0.065]	9.843	0.003	0.848
106	[56.6	0.066]	15.77		[56.459	0.068]	8.97	0.001	0.612
107	[56.6	0.066]	15.77		[56.868	0.073]	7.783	0	0.998
108	[56.6	0.066]	15.77		[57.255	0.061]	8.368	0.001	0.518
109	[56.6	0.066]	15.77		[55.582	0.066]	9.768	0.002	0.069
110	[56.6	0.066]	15.77		[56.812	0.067]	9.778	0.002	0.781
111	[56.6	0.066]	15.77		[56.169	0.06]	8.772	0.001	0.815
112	[56.6	0.066]	15.77		[57.331	0.066]	11.279	0.011	0.484
113	[56.6	0.066]	15.77		[56.398	0.076]	7.826	0	0.598
114	[56.6	0.066]	15.77		[56.449	0.06]	8.368	0.001	0.402
115	[56.6	0.066]	15.77		[56.255	0.071]	9.79	0.003	0.385
116	[56.6	0.066]	15.77		[56.538	0.058]	7.821	0	0.91
117	[56.6	0.066]	15.77		[56.774	0.063]	8.907	0.001	0.251
118	[56.6	0.066]	15.77		[56.223	0.072]	8.826	0.001	0.673
119	[56.6	0.066]	15.77		[56.509	0.059]	7.824	0	0.142
120	[56.6	0.066]	15.77		[56.535	0.073]	8.482	0.001	0.819
121	[56.6	0.066]	15.77		[55.98	0.069]	10.844	0.007	0.141
122	[56.6	0.066]	15.77		[56.837	0.072]	8.751	0.001	0.713
123	[56.6	0.066]	15.77		[55.745	0.064]	8.246	0.001	0.368
124	[56.6	0.066]	15.77		[56.339	0.068]	9.127	0.001	0.278
125	[56.6	0.066]	15.77		[54.939	0.061]	8.601	0.001	0.034
126	[56.6	0.066]	15.77		[56.768	0.074]	8.775	0.001	0.072
127	[56.6	0.066]	15.77		[56.467	0.065]	8.467	0.001	0.508
128	[56.6	0.066]	15.77		[55.815	0.063]	8.38	0.001	0.572
129	[56.6	0.066]	15.77		[56.973	0.068]	9.238	0.001	0.157
130	[56.6	0.066]	15.77		[57.111	0.071]	7.666	0	0.924
131	[56.6	0.066]	15.77		[56.644	0.07]	10.846	0.007	0.694
132	[56.6	0.066]	15.77		[56.125	0.065]	9.146	0.001	0.09
133	[56.6	0.066]	15.77		[55.931	0.066]	9.68	0.002	0.502
134	[56.6	0.066]	15.77		[56.06	0.064]	9.153	0.001	0.925
135	[56.6	0.066]	15.77		[56.943	0.066]	9.221	0.001	0.362
136	[56.6	0.066]	15.77		[56.847	0.074]	8.203	0.001	0.326
137	[56.6	0.066]	15.77		[56.838	0.065]	13.096	0.069	0.907
138	[56.6	0.066]	15.77		[56.373	0.066]	9.667	0.002	0.246
139	[56.6	0.066]	15.77		[57.551	0.065]	10.262	0.004	0.02
140	[56.6	0.066]	15.77		[56.809	0.065]	8.622	0.001	0.687
141	[56.6	0.066]	15.77		[56.844	0.067]	11.4	0.013	0.497
142	[56.6	0.066]	15.77		[56.157	0.068]	8.688	0.001	0.966
143	[56.6	0.066]	15.77		[56.082	0.064]	10.36	0.004	0.25
144	[56.6	0.066]	15.77		[56.482	0.068]	9.53	0.002	0.625
145	[56.6	0.066]	15.77		[55.114	0.076]	8.509	0.001	0.723
146	[56.6	0.066]	15.77		[56.966	0.067]	9.083	0.001	0.154
147	[56.6	0.066]	15.77		[56.496	0.068]	13.927	0.158	0.451
148	[56.6	0.066]	15.77		[56.212	0.056]	7.624	0	0.053
149	[56.6	0.066]	15.77		[56.958	0.063]	9.265	0.001	0.906
150	[56.6	0.066]	15.77		[56.402	0.07]	10.665	0.006	0.815
151	[56.6	0.066]	15.77		[56.655	0.068]	9.708	0.002	0.868
152	[56.6	0.066]	15.77		[55.693	0.065]	8.936	0.001	0.784
153	[56.6	0.066]	15.77		[56.825	0.064]	8.232	0.001	0.876
154	[56.6	0.066]	15.77		[56.717	0.064]	7.625	0	0.436
155	[56.6	0.066]	15.77		[57.209	0.069]	7.818	0	0.566
156	[56.6	0.066]	15.77		[56.156	0.061]	8.561	0.001	0.313
157	[56.6	0.066]	15.77		[56.667	0.064]	8.717	0.001	0.275
158	[56.6	0.066]	15.77		[56.671	0.082]	6.114	0	0.63
159	[56.6	0.066]	15.77		[57.302	0.075]	7.326	0	0.319
160	[56.6	0.066]	15.77		[57.038	0.067]	11.719	0.017	0.234
161	[56.6	0.066]	15.77		[57.03	0.062]	8.02	0	0.591
162	[56.6	0.066]	15.77		[56.613	0.066]	9.255	0.001	0.722
163	[56.6	0.066]	15.77		[57.065	0.071]	9.144	0.001	0.134
164	[56.6	0.066]	15.77		[56.989	0.075]	7.601	0	0.23
165	[56.6	0.066]	15.77		[56.676	0.066]	11.157	0.01	0.282
166	[56.6	0.066]	15.77		[56.802	0.057]	7.666	0	0.47
167	[56.6	0.066]	15.77		[56.243	0.054]	6.868	0	0.211
168	[56.6	0.066]	15.77		[56.902	0.074]	7.933	0	0.675
169	[56.6	0.066]	15.77		[56.949	0.062]	8.364	0.001	0.473
170	[56.6	0.066]	15.77		[57.101	0.076]	7.055	0	0.118
171	[56.6	0.066]	15.77		[56.013	0.073]	8.86	0.001	0.514
172	[56.6	0.066]	15.77		[56.833	0.063]	7.911	0	0.756
173	[56.6	0.066]	15.77		[56.995	0.058]	7.841	0	0.987
174	[56.6	0.066]	15.77		[56.55	0.067]	12.752	0.049	0.379
175	[56.6	0.066]	15.77		[56.893	0.069]	9.327	0.002	0.362
176	[56.6	0.066]	15.77		[57.18	0.065]	7.856	0	0.877
177	[56.6	0.066]	15.77		[56.358	0.067]	9.273	0.002	0.309
178	[56.6	0.066]	15.77		[56.318	0.069]	9.689	0.002	0.669
179	[56.6	0.066]	15.77		[57.751	0.067]	8.526	0.001	0.926
180	[56.6	0.066]	15.77		[57.495	0.065]	9.048	0.001	0.302
181	[56.6	0.066]	15.77		[55.708	0.067]	10.437	0.005	0.592
182	[56.6	0.066]	15.77		[56.077	0.066]	7.943	0	0.93
183	[56.6	0.066]	15.77		[56.664	0.063]	8.755	0.001	0.914
184	[56.6	0.066]	15.77		[56.025	0.071]	8.011	0	0.955
185	[56.6	0.066]	15.77		[56.567	0.066]	8.839	0.001	0.636
186	[56.6	0.066]	15.77		[56.408	0.068]	9.209	0.001	0.007
187	[56.6	0.066]	15.77		[56.597	0.071]	9.143	0.001	0.243
188	[56.6	0.066]	15.77		[56.201	0.066]	9.466	0.002	0.509
189	[56.6	0.066]	15.77		[55.917	0.068]	11.89	0.021	0.695
190	[56.6	0.066]	15.77		[55.616	0.062]	8.364	0.001	0.041
191	[56.6	0.066]	15.77		[56.448	0.081]	6.64	0	0.857
192	[56.6	0.066]	15.77		[57.057	0.066]	9.868	0.003	0.141
193	[56.6	0.066]	15.77		[55.741	0.069]	14.855	0.401	0.796
194	[56.6	0.066]	15.77		[57.46	0.069]	9.57	0.002	0.413
195	[56.6	0.066]	15.77		[55.864	0.065]	9.626	0.002	0.264
196	[56.6	0.066]	15.77		[56.935	0.061]	8.921	0.001	0.945
197	[56.6	0.066]	15.77		[56.908	0.066]	10.437	0.005	0.319
198	[56.6	0.066]	15.77		[56.805	0.059]	8.036	0	0.808
199	[56.6	0.066]	15.77		[56.314	0.067]	10.812	0.007	0.666
200	[56.6	0.066]	15.77		[56.617	0.07]	9.914	0.003	0.04
201	[56.6	0.066]	15.77		[56.976	0.075]	7.694	0	0.385
202	[56.6	0.066]	15.77		[57.1	0.065]	10.317	0.004	0.216
203	[56.6	0.066]	15.77		[56.368	0.072]	8.933	0.001	0.894
204	[56.6	0.066]	15.77		[56.188	0.075]	8.024	0	0.642
205	[56.6	0.066]	15.77		[56.608	0.066]	10.367	0.005	0.248
206	[56.6	0.066]	15.77		[56.486	0.07]	10.102	0.003	0.693
207	[56.6	0.066]	15.77		[56.042	0.064]	8.673	0.001	0.562
208	[56.6	0.066]	15.77		[56.18	0.069]	11.989	0.023	0.715
209	[56.6	0.066]	15.77		[56.39	0.066]	8.169	0	0.009
210	[56.6	0.066]	15.77		[57.324	0.06]	7.979	0	0.952
211	[56.6	0.066]	15.77		[56.069	0.063]	8.865	0.001	0.197
212	[56.6	0.066]	15.77		[56.07	0.061]	8.2	0.001	0.163
213	[56.6	0.066]	15.77		[56.963	0.062]	8.73	0.001	0.692
214	[56.6	0.066]	15.77		[56.698	0.058]	8.28	0.001	0.33
215	[56.6	0.066]	15.77		[56.94	0.072]	8.412	0.001	0.77
216	[56.6	0.066]	15.77		[56.547	0.069]	8.104	0	0.372
217	[56.6	0.066]	15.77		[56.857	0.066]	7.7	0	0.786
218	[56.6	0.066]	15.77		[57.11	0.067]	11.132	0.01	0.108
219	[56.6	0.066]	15.77		[57.153	0.069]	8.355	0.001	0.668
220	[56.6	0.066]	15.77		[56.487	0.058]	7.352	0	0.544
221	[56.6	0.066]	15.77		[56.825	0.066]	9.845	0.003	0.447
222	[56.6	0.066]	15.77		[56.513	0.064]	9.335	0.002	0.814
223	[56.6	0.066]	15.77		[56.399	0.052]	7.185	0	0.508
224	[56.6	0.066]	15.77		[56.828	0.064]	8.903	0.001	0.956
225	[56.6	0.066]	15.77		[57.08	0.069]	8.682	0.001	0.541
226	[56.6	0.066]	15.77		[56.792	0.065]	9.735	0.002	0.019
227	[56.6	0.066]	15.77		[56.459	0.064]	10.055	0.003	0.944
228	[56.6	0.066]	15.77		[56.103	0.06]	7.785	0	0.688
229	[56.6	0.066]	15.77		[56.636	0.064]	9.692	0.002	0.839
230	[56.6	0.066]	15.77		[56.415	0.063]	9.072	0.001	0.852
231	[56.6	0.066]	15.77		[56.539	0.063]	9.088	0.001	0.883
232	[56.6	0.066]	15.77		[57.266	0.064]	8.757	0.001	0.599
233	[56.6	0.066]	15.77		[56.919	0.059]	7.744	0	0.031
234	[56.6	0.066]	15.77		[57.141	0.069]	9.765	0.002	0.968
235	[56.6	0.066]	15.77		[55.654	0.062]	7.719	0	0.908
236	[56.6	0.066]	15.77		[57.507	0.067]	9.345	0.002	0.877
237	[56.6	0.066]	15.77		[56.989	0.064]	8.413	0.001	0.781
238	[56.6	0.066]	15.77		[56.199	0.063]	8.713	0.001	0.025
239	[56.6	0.066]	15.77		[57.309	0.062]	8.356	0.001	0.353
240	[56.6	0.066]	15.77		[57.314	0.071]	9.073	0.001	0.761
241	[56.6	0.066]	15.77		[56.401	0.071]	10.172	0.004	0.414
242	[56.6	0.066]	15.77		[56.446	0.063]	8.745	0.001	0.474
243	[56.6	0.066]	15.77		[57.075	0.063]	7.869	0	0.39
244	[56.6	0.066]	15.77		[56.366	0.059]	8.186	0.001	0.248
245	[56.6	0.066]	15.77		[55.759	0.062]	7.984	0	0.364
246	[56.6	0.066]	15.77		[56.425	0.057]	7.708	0	0.62
247	[56.6	0.066]	15.77		[55.302	0.063]	9.233	0.001	0.279
248	[56.6	0.066]	15.77		[55.815	0.069]	10.601	0.006	0.029
249	[56.6	0.066]	15.77		[56.786	0.067]	8.607	0.001	0.647
250	[56.6	0.066]	15.77		[56.955	0.066]	9.011	0.001	0.382
251	[56.6	0.066]	15.77		[56.437	0.061]	8.475	0.001	0.688
252	[56.6	0.066]	15.77		[56.198	0.06]	7.695	0	0.797
253	[56.6	0.066]	15.77		[56.366	0.065]	9.291	0.002	0.922
254	[56.6	0.066]	15.77		[55.463	0.07]	9.538	0.002	0.601
255	[56.6	0.066]	15.77		[56.219	0.068]	9.871	0.003	0.651
256	[56.6	0.066]	15.77		[57.301	0.064]	7.835	0	0.933
257	[56.6	0.066]	15.77		[56.328	0.064]	8.78	0.001	0.97
258	[56.6	0.066]	15.77		[56.05	0.064]	9.193	0.001	0.735
259	[56.6	0.066]	15.77		[56.772	0.062]	8.014	0	0.724
260	[56.6	0.066]	15.77		[56.093	0.064]	9.09	0.001	0.963
261	[56.6	0.066]	15.77		[55.876	0.074]	8.597	0.001	0.444
262	[56.6	0.066]	15.77		[56.877	0.063]	8.641	0.001	0.28
263	[56.6	0.066]	15.77		[56.729	0.06]	7.894	0	0.592
264	[56.6	0.066]	15.77		[57.369	0.079]	7.29	0	0.25
265	[56.6	0.066]	15.77		[57.333	0.067]	8.65	0.001	0.682
266	[56.6	0.066]	15.77		[56.426	0.071]	8.421	0.001	0.82
267	[56.6	0.066]	15.77		[57.531	0.064]	9.064	0.001	0.074
268	[56.6	0.066]	15.77		[56.436	0.067]	11.079	0.009	0.792
269	[56.6	0.066]	15.77		[56.732	0.07]	9.35	0.002	0.212
270	[56.6	0.066]	15.77		[56.844	0.055]	7.669	0	0.837
271	[56.6	0.066]	15.77		[56.8	0.065]	9.832	0.003	0.299
272	[56.6	0.066]	15.77		[56.572	0.068]	9.585	0.002	0.715
273	[56.6	0.066]	15.77		[56.124	0.059]	7.636	0	0.992
274	[56.6	0.066]	15.77		[56.255	0.068]	10.936	0.008	0.151
275	[56.6	0.066]	15.77		[55.998	0.069]	11.305	0.012	0.747
276	[56.6	0.066]	15.77		[55.635	0.069]	8.662	0.001	0.019
277	[56.6	0.066]	15.77		[56.988	0.071]	7.851	0	0.976
278	[56.6	0.066]	15.77		[56.805	0.066]	11.07	0.009	0.33
279	[56.6	0.066]	15.77		[56.24	0.066]	9.46	0.002	0.166
280	[56.6	0.066]	15.77		[57.073	0.069]	9.632	0.002	0.07
281	[56.6	0.066]	15.77		[55.62	0.055]	7.466	0	0.818
282	[56.6	0.066]	15.77		[56.341	0.069]	9.447	0.002	0.018
283	[56.6	0.066]	15.77		[56.927	0.065]	8.523	0.001	0.38
284	[56.6	0.066]	15.77		[57.316	0.069]	10.541	0.005	0.297
285	[56.6	0.066]	15.77		[57.093	0.086]	5.363	0	0.562
286	[56.6	0.066]	15.77		[56.127	0.064]	9.474	0.002	0.478
287	[56.6	0.066]	15.77		[57.115	0.062]	8.928	0.001	0.714
288	[56.6	0.066]	15.77		[55.791	0.073]	8.45	0.001	0.305
289	[56.6	0.066]	15.77		[57.087	0.054]	7.212	0	0.833
290	[56.6	0.066]	15.77		[56.804	0.067]	9.411	0.002	0.152
291	[56.6	0.066]	15.77		[56.96	0.072]	8.492	0.001	0.943
292	[56.6	0.066]	15.77		[57.308	0.074]	7.488	0	0.258
293	[56.6	0.066]	15.77		[56.093	0.067]	11.865	0.02	0.756
294	[56.6	0.066]	15.77		[56.693	0.068]	11.344	0.012	0.75
295	[56.6	0.066]	15.77		[57.409	0.07]	9.225	0.001	0.777
296	[56.6	0.066]	15.77		[57.65	0.063]	8.755	0.001	0.131
297	[56.6	0.066]	15.77		[56.667	0.068]	9.81	0.003	0.339
