
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_mix <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # The SAR is the average SAR for each individual that was infectious.
+   sar <- mean(results$I_NUM / results$S_NUM, na.rm = T)
+   
+   # The proportion of cases caused by household infections.
+   cases <- results[!is.na(results$TIME), ]
+   prp <- mean((cases$TYPE == 'H') | (cases$TYPE == 'HC') | (cases$TYPE == 'HCE'))
+ 
+   return(c(idc, sar, prp))
+ }
> 
> beta_Hs <- seq(11, 21, 1) # 11
> beta_Cs <- seq(0.01, 0.04, 0.001) # 31
> beta_Es <- seq(0.00001, 0.00010, 0.00001) # 10
> 
> d_H <- length(beta_Hs)
> d_C <- length(beta_Cs)
> d_E <- length(beta_Es)
> 
> reps <- 50
> idcs <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> sars <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> prps <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> t_tot <- 0
> for (i in 1:d_H) {
+   for (j in 1:d_C) {
+     for (k in 1:d_E) {
+       beta_H <- beta_Hs[i]
+       beta_C <- beta_Cs[j]
+       beta_E <- beta_Es[k]
+       
+       params <- c(beta_H, beta_C, beta_E)
+       
+       cat(paste0(format(beta_H, nsmall = 0), '/21\t', 
+                  format(beta_C, nsmall = 3), '/0.040\t',
+                  format(beta_E, nsmall = 5, scientific = F), '/0.00010\t'))
+         
+       t_0 <- Sys.time()
+       vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+         results <- SEIR_mix(params) 
+         metrics(results)
+       }
+       t_1 <- Sys.time()
+       t_tot <- t_tot + (t_1 - t_0)
+         
+       cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+                  format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+       
+       vals <- matrix(vals, reps, byrow = T)
+       idcs[i, j, k, ] <- vals[, 1]
+       sars[i, j, k, ] <- vals[, 2]
+       prps[i, j, k, ] <- vals[, 3]
+         
+       cat(paste0(format(round(mean(vals[, 1]), 3), nsmall = 3), '\t', 
+                  format(round(mean(vals[, 2]), 3), nsmall = 3), '\t', 
+                  format(round(mean(vals[, 3]), 3), nsmall = 3), '\n'))
+     }
+     cat('\n')
+     saveRDS(idcs, file = 'idcs.rds')
+     saveRDS(sars, file = 'sars.rds')
+     saveRDS(prps, file = 'prps.rds')
+     
+     write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
+     write.table(prps, file = 'prps.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
11/21	0.010/0.040	0.00001/0.00010	14.97 secs	(14.97 secs)	0.004	NaN	NaN
11/21	0.010/0.040	0.00002/0.00010	30.45 secs	(15.48 secs)	0.010	0.066	0.198
11/21	0.010/0.040	0.00003/0.00010	46.17 secs	(15.72 secs)	0.013	0.069	0.209
11/21	0.010/0.040	0.00004/0.00010	62.75 secs	(16.58 secs)	0.019	0.070	0.218
11/21	0.010/0.040	0.00005/0.00010	80.07 secs	(17.31 secs)	0.024	0.082	0.242
11/21	0.010/0.040	0.00006/0.00010	97.80 secs	(17.74 secs)	0.026	0.066	0.200
11/21	0.010/0.040	0.00007/0.00010	116.18 secs	(18.38 secs)	0.033	0.072	0.229
11/21	0.010/0.040	0.00008/0.00010	135.15 secs	(18.96 secs)	0.036	0.070	0.214
11/21	0.010/0.040	0.00009/0.00010	155.26 secs	(20.11 secs)	0.041	0.075	0.225
11/21	0.010/0.040	0.00010/0.00010	176.13 secs	(20.87 secs)	0.044	0.070	0.213

11/21	0.011/0.040	0.00001/0.00010	191.89 secs	(15.77 secs)	0.006	NaN	NaN
11/21	0.011/0.040	0.00002/0.00010	207.75 secs	(15.86 secs)	0.009	0.058	0.192
11/21	0.011/0.040	0.00003/0.00010	224.51 secs	(16.76 secs)	0.015	0.080	0.230
11/21	0.011/0.040	0.00004/0.00010	242.57 secs	(18.06 secs)	0.019	0.069	0.199
11/21	0.011/0.040	0.00005/0.00010	261.17 secs	(18.60 secs)	0.025	0.077	0.232
11/21	0.011/0.040	0.00006/0.00010	279.68 secs	(18.51 secs)	0.027	0.072	0.208
11/21	0.011/0.040	0.00007/0.00010	299.04 secs	(19.36 secs)	0.029	0.065	0.200
11/21	0.011/0.040	0.00008/0.00010	319.91 secs	(20.87 secs)	0.037	0.076	0.223
11/21	0.011/0.040	0.00009/0.00010	340.54 secs	(20.63 secs)	0.042	0.073	0.235
11/21	0.011/0.040	0.00010/0.00010	361.53 secs	(20.98 secs)	0.046	0.075	0.229

11/21	0.012/0.040	0.00001/0.00010	376.84 secs	(15.31 secs)	0.004	NaN	NaN
11/21	0.012/0.040	0.00002/0.00010	393.24 secs	(16.40 secs)	0.009	0.075	0.214
11/21	0.012/0.040	0.00003/0.00010	410.73 secs	(17.50 secs)	0.014	0.073	0.229
11/21	0.012/0.040	0.00004/0.00010	427.95 secs	(17.22 secs)	0.019	0.070	0.212
11/21	0.012/0.040	0.00005/0.00010	446.12 secs	(18.16 secs)	0.024	0.074	0.231
11/21	0.012/0.040	0.00006/0.00010	464.99 secs	(18.88 secs)	0.028	0.066	0.209
11/21	0.012/0.040	0.00007/0.00010	484.48 secs	(19.49 secs)	0.034	0.073	0.228
11/21	0.012/0.040	0.00008/0.00010	504.56 secs	(20.08 secs)	0.037	0.073	0.222
11/21	0.012/0.040	0.00009/0.00010	525.04 secs	(20.48 secs)	0.040	0.068	0.212
11/21	0.012/0.040	0.00010/0.00010	547.22 secs	(22.18 secs)	0.048	0.070	0.220

11/21	0.013/0.040	0.00001/0.00010	563.35 secs	(16.13 secs)	0.005	NaN	NaN
11/21	0.013/0.040	0.00002/0.00010	579.96 secs	(16.61 secs)	0.009	0.063	0.198
11/21	0.013/0.040	0.00003/0.00010	596.82 secs	(16.86 secs)	0.014	0.063	0.196
11/21	0.013/0.040	0.00004/0.00010	614.54 secs	(17.72 secs)	0.020	0.077	0.232
11/21	0.013/0.040	0.00005/0.00010	633.07 secs	(18.52 secs)	0.024	0.067	0.222
11/21	0.013/0.040	0.00006/0.00010	652.36 secs	(19.30 secs)	0.029	0.072	0.221
11/21	0.013/0.040	0.00007/0.00010	