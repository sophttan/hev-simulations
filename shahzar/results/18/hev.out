
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> # Use detectCores() to find out how many cores are available.
> message(detectCores())
24
> num_cores <- 18
> registerDoParallel(num_cores)
> 
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> pop <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < pop)]
+   
+   leftover <- pop - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(beta_H, beta_C, inc, inf, verbose = 0) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:pop,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, pop - 1)), 
+                     E = c(1, rep(0, pop - 1)),
+                     E_count = c(1, rep(0, pop - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, pop - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious
+     # period is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation
+     # period is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious 
+       # individual's household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     risk_H <- beta_H * data$S * I_data$I_H / pop
+     risk_C <- beta_C * data$S * I_data$I_C / pop
+     
+     # Each individual is infected from their household or 
+     # community independently with probabilities risk_H
+     # and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious person.
+         # If exactly 1 infectious person in household, assign all new H exposures to infectious person.
+         # If there are multiple infectious people, assign all infections to an infectious person at random.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> beta_Hs <- seq(55, 65, 0.25)
> beta_Cs <- seq(0.05, 0.15, 0.01)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 100
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> sars <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+     
+     idc_list <- rep(NA, reps)
+     sar_list <- rep(NA, reps)
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(beta_H, beta_C, inc, inf, verbose = F) 
+       metrics(results)
+     }
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     sars[i, j, ] <- vals[, 2]
+     message(paste0(beta_H, '/65\t', 
+                    format(beta_C, nsmall = 2), '/0.15\t',  
+                    format(t_tot, nsmall = 2), '\t(', format(t_1 - t_0, nsmall = 2), ')\t', 
+                    format(mean(vals[, 1]), nsmall = 3), '\t', 
+                    format(mean(vals[, 2]), nsmall = 3)))
+     write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
55/65	0.05/0.15	1.201205 mins	(1.201205 mins)	0.02407	0.2269131
55/65	0.06/0.15	2.218123 mins	(1.016919 mins)	0.03566	0.2288506
55/65	0.07/0.15	3.437197 mins	(1.219074 mins)	0.05431	0.239401
55/65	0.08/0.15	4.845307 mins	(1.40811 mins)	0.06971	0.2233016
55/65	0.09/0.15	6.331698 mins	(1.486391 mins)	0.126	0.2675737
55/65	0.10/0.15	7.913943 mins	(1.582245 mins)	0.14093	0.2489952
55/65	0.11/0.15	9.728771 mins	(1.814828 mins)	0.24786	0.2687356
55/65	0.12/0.15	11.64759 mins	(1.918822 mins)	0.30539	0.2757271
55/65	0.13/0.15	13.60955 mins	(1.96196 mins)	0.40477	0.2764361
55/65	0.14/0.15	15.66443 mins	(2.054881 mins)	0.49327	0.2716878
55/65	0.15/0.15	17.7463 mins	(2.081864 mins)	0.5422	0.2692316


55.25/65	0.05/0.15	18.82515 mins	(1.078856 mins)	0.025	0.2599865
55.25/65	0.06/0.15	19.94125 mins	(1.116095 mins)	0.03274	0.2342442
55.25/65	0.07/0.15	21.28418 mins	(1.342927 mins)	0.04478	0.2284825
55.25/65	0.08/0.15	22.75813 mins	(1.473957 mins)	0.09138	0.2672249
55.25/65	0.09/0.15	24.28068 mins	(1.522551 mins)	0.12798	0.228825
55.25/65	0.10/0.15	26.08872 mins	(1.808038 mins)	0.19311	0.2526306
55.25/65	0.11/0.15	27.77095 mins	(1.682231 mins)	0.24607	0.2460317
55.25/65	0.12/0.15	29.52317 mins	(1.752222 mins)	0.29308	0.2505467
55.25/65	0.13/0.15	31.64419 mins	(2.121016 mins)	0.3928	0.2653166
55.25/65	0.14/0.15	33.55679 mins	(1.9126 mins)	0.47629	0.2619387
55.25/65	0.15/0.15	35.86739 mins	(2.310597 mins)	0.48082	0.2504189


55.5/65	0.05/0.15	36.96276 mins	(1.095377 mins)	0.01539	0.2388578
55.5/65	0.06/0.15	38.00221 mins	(1.039449 mins)	0.03216	0.2507174
55.5/65	0.07/0.15	39.21532 mins	(1.213112 mins)	0.04676	0.2459998
55.5/65	0.08/0.15	40.66951 mins	(1.454181 mins)	0.08732	0.2596733
55.5/65	0.09/0.15	42.1642 mins	(1.49469 mins)	0.12074	0.2496354
55.5/65	0.10/0.15	43.79917 mins	(1.634979 mins)	0.17227	0.2450108
55.5/65	0.11/0.15	45.7485 mins	(1.949321 mins)	0.24473	0.2316316
55.5/65	0.12/0.15	47.58949 mins	(1.840996 mins)	0.30569	0.2747293
55.5/65	0.13/0.15	49.63071 mins	(2.041218 mins)	0.38108	0.2610437
55.5/65	0.14/0.15	51.64749 mins	(2.016778 mins)	0.49057	0.2779835
55.5/65	0.15/0.15	53.68806 mins	(2.040574 mins)	0.48913	0.2822474


55.75/65	0.05/0.15	54.70501 mins	(1.016946 mins)	0.02257	0.2770386
55.75/65	0.06/0.15	55.86712 mins	(1.162108 mins)	0.02735	0.244889
55.75/65	0.07/0.15	57.18577 mins	(1.318651 mins)	0.05328	0.2582184
55.75/65	0.08/0.15	58.41609 mins	(1.230322 mins)	0.07011	0.2298596
55.75/65	0.09/0.15	59.98246 mins	(1.566374 mins)	0.13383	0.2574123
55.75/65	0.10/0.15	61.64154 mins	(1.659079 mins)	0.1529	0.2558107
55.75/65	0.11/0.15	63.18411 mins	(1.542567 mins)	0.20918	0.236696
55.75/65	0.12/0.15	65.15671 mins	(1.972605 mins)	0.31615	0.2660023
55.75/65	0.13/0.15	67.11936 mins	(1.962646 mins)	0.39831	0.263864
55.75/65	0.14/0.15	69.089 mins	(1.969638 mins)	0.42781	0.2557714
55.75/65	0.15/0.15	71.2537 mins	(2.164699 mins)	0.52157	0.2563084


56/65	0.05/0.15	72.34301 mins	(1.089316 mins)	0.01567	0.2669656
56/65	0.06/0.15	73.52434 mins	(1.181323 mins)	0.02626	0.2197343
56/65	0.07/0.15	74.7372 mins	(1.21286 mins)	0.04902	0.2402689
56/65	0.08/0.15	76.05538 mins	(1.318184 mins)	0.08278	0.2526252
56/65	0.09/0.15	77.5412 mins	(1.485818 mins)	0.13681	0.2548983
56/65	0.10/0.15	79.30276 mins	(1.761562 mins)	0.18976	0.2520244
56/65	0.11/0.15	81.0593 mins	(1.756544 mins)	0.26964	0.2733531
56/65	0.12/0.15	83.0325 mins	(1.973201 mins)	0.33706	0.260874
56/65	0.13/0.15	84.88435 mins	(1.851844 mins)	0.34465	0.2441068
56/65	0.14/0.15	86.94615 mins	(2.0618 mins)	0.53898	0.2815877
56/65	0.15/0.15	89.07062 mins	(2.124468 mins)	0.57721	0.2828923


56.25/65	0.05/0.15	90.12363 mins	(1.053018 mins)	0.02172	0.2180851
56.25/65	0.06/0.15	91.37873 mins	(1.2551 mins)	0.03045	0.2550991
56.25/65	0.07/0.15	92.68913 mins	(1.310399 mins)	0.04508	0.2520307
56.25/65	0.08/0.15	94.21716 mins	(1.528021 mins)	0.10073	0.2697906
56.25/65	0.09/0.15	95.6077 mins	(1.390547 mins)	0.12931	0.268181
56.25/65	0.10/0.15	97.27633 mins	(1.66863 mins)	0.17566	0.2646414
56.25/65	0.11/0.15	98.84589 mins	(1.569556 mins)	0.23478	0.2663816
56.25/65	0.12/0.15	100.6206 mins	(1.774714 mins)	0.32247	0.2657461
56.25/65	0.13/0.15	102.6475 mins	(2.02685 mins)	0.37858	0.2608984
56.25/65	0.14/0.15	104.6134 mins	(1.965985 mins)	0.5032	0.2785217
56.25/65	0.15/0.15	106.7841 mins	(2.170617 mins)	0.50788	0.2572822


56.5/65	0.05/0.15	6466.454 secs	(59.41056 secs)	0.02655	0.2697674
56.5/65	0.06/0.15	6542.138 secs	(1.2614 mins)	0.03914	0.2879574
56.5/65	0.07/0.15	6619.678 secs	(1.292331 mins)	0.05502	0.2480767
56.5/65	0.08/0.15	6707.829 secs	(1.469197 mins)	0.08565	0.2873646
56.5/65	0.09/0.15	6797.271 secs	(1.490685 mins)	0.12005	0.2392118
56.5/65	0.10/0.15	6899.909 secs	(1.710638 mins)	0.20682	0.2772374
56.5/65	0.11/0.15	7005.918 secs	(1.766814 mins)	0.23501	0.2677141
56.5/65	0.12/0.15	7119.466 secs	(1.892473 mins)	0.34861	0.2619999
56.5/65	0.13/0.15	7238.181 secs	(1.978583 mins)	0.3605	0.2723816
56.5/65	0.14/0.15	7367.095 secs	(2.148574 mins)	0.4525	0.2648991
56.5/65	0.15/0.15	7497.755 secs	(2.177655 mins)	0.55966	0.2781365


56.75/65	0.05/0.15	7555.402 secs	(57.64741 secs)	0.01847	0.212781
56.75/65	0.06/0.15	7629.82 secs	(1.240303 mins)	0.03887	0.2666172
56.75/65	0.07/0.15	7708.791 secs	(1.316178 mins)	0.05326	0.2889105
56.75/65	0.08/0.15	7795.478 secs	(1.444781 mins)	0.10264	0.2559314
56.75/65	0.09/0.15	7887.308 secs	(1.530504 mins)	0.12085	0.2453602
56.75/65	0.10/0.15	7994.84 secs	(1.792198 mins)	0.18684	0.2775109
56.75/65	0.11/0.15	8095.312 secs	(1.674528 mins)	0.24939	0.2673518
56.75/65	0.12/0.15	8211.124 secs	(1.930201 mins)	0.29934	0.2654078
56.75/65	0.13/0.15	8329.065 secs	(1.965686 mins)	0.39943	0.2824248
56.75/65	0.14/0.15	8448.691 secs	(1.993766 mins)	0.44414	0.2764992
56.75/65	0.15/0.15	8574.615 secs	(2.098743 mins)	0.56603	0.287767


57/65	0.05/0.15	8629.004 secs	(54.38819 secs)	0.02397	0.2655771
57/65	0.06/0.15	8700.557 secs	(1.192551 mins)	0.02534	0.2285011
57/65	0.07/0.15	8777.966 secs	(1.290163 mins)	0.05422	0.2518794
57/65	0.08/0.15	8858.37 secs	(1.340064 mins)	0.08269	0.241404
57/65	0.09/0.15	8954.244 secs	(1.597902 mins)	0.14446	0.2342515
57/65	0.10/0.15	9054.645 secs	(1.673345 mins)	0.18005	0.2638479
57/65	0.11/0.15	9159.297 secs	(1.744199 mins)	0.21645	0.2494035
57/65	0.12/0.15	9274.527 secs	(1.920493 mins)	0.30299	0.2553599
57/65	0.13/0.15	9393.128 secs	(1.976696 mins)	0.37992	0.2692639
57/65	0.14/0.15	9512.566 secs	(1.990623 mins)	0.48647	0.2761097
57/65	0.15/0.15	9635.109 secs	(2.042392 mins)	0.55873	0.2718894


57.25/65	0.05/0.15	9690.405 secs	(55.29584 secs)	0.02431	0.2469436
57.25/65	0.06/0.15	9766.229 secs	(1.263731 mins)	0.04543	0.2789022
57.25/65	0.07/0.15	9857.583 secs	(1.522561 mins)	0.06147	0.2765866
57.25/65	0.08/0.15	9930.625 secs	(1.21737 mins)	0.07901	0.2800747
57.25/65	0.09/0.15	10010.67 secs	(1.334074 mins)	0.11195	0.2450819
57.25/65	0.10/0.15	10106.00 secs	(1.588774 mins)	0.14883	0.2351935
57.25/65	0.11/0.15	10200.12 secs	(1.56875 mins)	0.24963	0.2805193
57.25/65	0.12/0.15	10301.60 secs	(1.691309 mins)	0.26655	0.2562861
57.25/65	0.13/0.15	10400.06 secs	(1.641043 mins)	0.39577	0.2588776
57.25/65	0.14/0.15	10521.02 secs	(2.016042 mins)	0.4759	0.2861044
57.25/65	0.15/0.15	10636.61 secs	(1.926451 mins)	0.50908	0.2535363


57.5/65	0.05/0.15	10701.74 secs	(1.085495 mins)	0.02006	0.291701
57.5/65	0.06/0.15	10766.40 secs	(1.077598 mins)	0.03969	0.2559206
57.5/65	0.07/0.15	10831.84 secs	(1.090671 mins)	0.04904	0.2366465
57.5/65	0.08/0.15	10912.18 secs	(1.338999 mins)	0.08918	0.2569617
57.5/65	0.09/0.15	10995.11 secs	(1.382162 mins)	0.12206	0.2559827
57.5/65	0.10/0.15	11086.16 secs	(1.51758 mins)	0.1856	0.2460236
57.5/65	0.11/0.15	11187.88 secs	(1.695291 mins)	0.24299	0.2539024
57.5/65	0.12/0.15	11285.79 secs	(1.631842 mins)	0.31446	0.2569538
57.5/65	0.13/0.15	11398.80 secs	(1.883537 mins)	0.42363	0.2745319
57.5/65	0.14/0.15	11513.62 secs	(1.913595 mins)	0.51514	0.2850716
57.5/65	0.15/0.15	11631.81 secs	(1.969842 mins)	0.60059	0.2933943


57.75/65	0.05/0.15	11689.94 secs	(58.12717 secs)	0.02259	0.2780149
57.75/65	0.06/0.15	11759.45 secs	(1.158577 mins)	0.03329	0.2640202
57.75/65	0.07/0.15	11828.86 secs	(1.156834 mins)	0.05903	0.2626179
57.75/65	0.08/0.15	11901.28 secs	(1.206983 mins)	0.08281	0.2545933
57.75/65	0.09/0.15	11989.24 secs	(1.465978 mins)	0.14643	0.2687247
57.75/65	0.10/0.15	12075.48 secs	(1.437321 mins)	0.16156	0.2527505
57.75/65	0.11/0.15	12177.87 secs	(1.706603 mins)	0.27311	0.265051
57.75/65	0.12/0.15	12280.49 secs	(1.710354 mins)	0.32361	0.2631876
57.75/65	0.13/0.15	12396.04 secs	(1.925777 mins)	0.40042	0.2780084
57.75/65	0.14/0.15	12505.92 secs	(1.831254 mins)	0.46715	0.2750608
57.75/65	0.15/0.15	12629.77 secs	(2.064154 mins)	0.56058	0.2758042


58/65	0.05/0.15	12681.40 secs	(51.63852 secs)	0.02182	0.2763535
58/65	0.06/0.15	12745.38 secs	(1.066196 mins)	0.03918	0.2659262
58/65	0.07/0.15	12813.96 secs	(1.143005 mins)	0.05447	0.2556403
58/65	0.08/0.15	12886.61 secs	(1.210868 mins)	0.0702	0.2604076
58/65	0.09/0.15	12970.36 secs	(1.395849 mins)	0.14636	0.2709767
58/65	0.10/0.15	13061.39 secs	(1.517203 mins)	0.18935	0.2922888
58/65	0.11/0.15	13161.26 secs	(1.664494 mins)	0.24198	0.2671224
58/65	0.12/0.15	13274.59 secs	(1.888819 mins)	0.31902	0.2623565
58/65	0.13/0.15	13383.42 secs	(1.813795 mins)	0.42921	0.2715884
58/65	0.14/0.15	13500.94 secs	(1.958748 mins)	0.52039	0.2906603
58/65	0.15/0.15	13612.39 secs	(1.857406 mins)	0.58552	0.3022548


58.25/65	0.05/0.15	13675.91 secs	(1.058764 mins)	0.02142	0.2338793
58.25/65	0.06/0.15	13733.88 secs	(57.96258 secs)	0.04133	0.2293214
58.25/65	0.07/0.15	13807.85 secs	(1.232953 mins)	0.06554	0.2626843
58.25/65	0.08/0.15	13895.65 secs	(1.463247 mins)	0.08378	0.2600438
58.25/65	0.09/0.15	13971.47 secs	(1.263793 mins)	0.13097	0.249928
58.25/65	0.10/0.15	14077.92 secs	(1.774098 mins)	0.22305	0.2841573
58.25/65	0.11/0.15	14169.93 secs	(1.533536 mins)	0.23621	0.246734
58.25/65	0.12/0.15	14274.16 secs	(1.737042 mins)	0.3115	0.2590232
58.25/65	0.13/0.15	14376.31 secs	(1.702597 mins)	0.39966	0.2654435
58.25/65	0.14/0.15	14496.47 secs	(2.002586 mins)	0.47497	0.2665998
58.25/65	0.15/0.15	14610.80 secs	(1.905617 mins)	0.57144	0.28562


58.5/65	0.05/0.15	14679.74 secs	(1.148957 mins)	0.02279	0.2543403
58.5/65	0.06/0.15	14743.64 secs	(1.065056 mins)	0.03181	0.2661582
58.5/65	0.07/0.15	14812.58 secs	(1.148905 mins)	0.06055	0.2770464
58.5/65	0.08/0.15	14901.19 secs	(1.476942 mins)	0.10983	0.2840463
58.5/65	0.09/0.15	14995.62 secs	(1.573795 mins)	0.16018	0.2697813
58.5/65	0.10/0.15	15099.21 secs	(1.726472 mins)	0.20943	0.2671197
58.5/65	0.11/0.15	15189.55 secs	(1.505711 mins)	0.24032	0.2593011
58.5/65	0.12/0.15	15296.77 secs	(1.786982 mins)	0.34051	0.2745838
58.5/65	0.13/0.15	15416.12 secs	(1.989166 mins)	0.45407	0.2883834
58.5/65	0.14/0.15	15525.82 secs	(1.828298 mins)	0.48367	0.2871143
58.5/65	0.15/0.15	15641.18 secs	(1.922651 mins)	0.55798	0.2735146


58.75/65	0.05/0.15	15703.47 secs	(1.038245 mins)	0.02503	0.3080184
58.75/65	0.06/0.15	15766.55 secs	(1.051256 mins)	0.03225	0.2856737
58.75/65	0.07/0.15	15837.28 secs	(1.178913 mins)	0.05917	0.2794006
58.75/65	0.08/0.15	15908.31 secs	(1.183835 mins)	0.09685	0.2647495
58.75/65	0.09/0.15	16010.50 secs	(1.703012 mins)	0.15603	0.2602775
58.75/65	0.10/0.15	16097.91 secs	(1.456999 mins)	0.21936	0.2923847
58.75/65	0.11/0.15	16208.38 secs	(1.841113 mins)	0.29646	0.2946308
58.75/65	0.12/0.15	16310.16 secs	(1.696383 mins)	0.3836	0.3036841
58.75/65	0.13/0.15	16418.79 secs	(1.81049 mins)	0.39624	0.2615395
58.75/65	0.14/0.15	16532.46 secs	(1.894479 mins)	0.51493	0.3021952
58.75/65	0.15/0.15	16649.66 secs	(1.953244 mins)	0.53946	0.2865879


59/65	0.05/0.15	16708.36 secs	(58.70747 secs)	0.0282	0.2813013
59/65	0.06/0.15	16769.14 secs	(1.012866 mins)	0.04202	0.2763554
59/65	0.07/0.15	16845.42 secs	(1.271362 mins)	0.06105	0.2679158
59/65	0.08/0.15	16925.76 secs	(1.339074 mins)	0.10051	0.2755847
59/65	0.09/0.15	17012.64 secs	(1.447996 mins)	0.14238	0.2627396
59/65	0.10/0.15	17115.98 secs	(1.722261 mins)	0.19887	0.2774377
59/65	0.11/0.15	17213.06 secs	(1.618051 mins)	0.27364	0.2745132
59/65	0.12/0.15	17322.07 secs	(1.816886 mins)	0.30626	0.2477483
59/65	0.13/0.15	17442.44 secs	(2.00603 mins)	0.36996	0.2758206
59/65	0.14/0.15	17553.70 secs	(1.854428 mins)	0.49975	0.2872681
59/65	0.15/0.15	17682.48 secs	(2.146369 mins)	0.63971	0.3026502


59.25/65	0.05/0.15	17744.18 secs	(1.028314 mins)	0.02373	0.2686392
59.25/65	0.06/0.15	17800.94 secs	(56.7599 secs)	0.03856	0.2466986
59.25/65	0.07/0.15	17867.20 secs	(1.104291 mins)	0.05123	0.2626522
59.25/65	0.08/0.15	17948.42 secs	(1.353645 mins)	0.07878	0.2630945
59.25/65	0.09/0.15	18028.49 secs	(1.334547 mins)	0.14237	0.267344
59.25/65	0.10/0.15	18124.25 secs	(1.596034 mins)	0.20698	0.2913968
59.25/65	0.11/0.15	18217.45 secs	(1.553278 mins)	0.26475	0.2750678
59.25/65	0.12/0.15	18324.07 secs	(1.777031 mins)	0.3225	0.2486114
59.25/65	0.13/0.15	18429.05 secs	(1.749663 mins)	0.45464	0.2899733
59.25/65	0.14/0.15	18551.18 secs	(2.035399 mins)	0.55247	0.3018946
59.25/65	0.15/0.15	18670.55 secs	(1.989593 mins)	0.59236	0.2815003


59.5/65	0.05/0.15	18736.26 secs	(1.095053 mins)	0.02207	0.2578086
59.5/65	0.06/0.15	18797.62 secs	(1.022745 mins)	0.0345	0.2717249
59.5/65	0.07/0.15	18859.95 secs	(1.038759 mins)	0.05446	0.2652794
59.5/65	0.08/0.15	18950.10 secs	(1.502644 mins)	0.09523	0.2656736
59.5/65	0.09/0.15	19022.31 secs	(1.203363 mins)	0.11088	0.2833102
59.5/65	0.10/0.15	19119.63 secs	(1.622119 mins)	0.19718	0.269149
59.5/65	0.11/0.15	19219.52 secs	(1.664804 mins)	0.30569	0.3117144
59.5/65	0.12/0.15	19316.82 secs	(1.621717 mins)	0.35929	0.2671402
59.5/65	0.13/0.15	19416.86 secs	(1.66731 mins)	0.42359	0.2605967
59.5/65	0.14/0.15	19525.94 secs	(1.817954 mins)	0.51056	0.2763489
59.5/65	0.15/0.15	19642.73 secs	(1.946502 mins)	0.59283	0.2861783


59.75/65	0.05/0.15	19700.48 secs	(57.74776 secs)	0.02158	0.2915024
59.75/65	0.06/0.15	19763.79 secs	(1.055225 mins)	0.04635	0.2875113
59.75/65	0.07/0.15	19847.79 secs	(1.399969 mins)	0.07775	0.2771243
59.75/65	0.08/0.15	19928.42 secs	(1.343864 mins)	0.11429	0.2579755
59.75/65	0.09/0.15	20012.76 secs	(1.405713 mins)	0.14494	0.2654875
59.75/65	0.10/0.15	20114.60 secs	(1.697283 mins)	0.237	0.2632848
59.75/65	0.11/0.15	20215.39 secs	(1.679841 mins)	0.27775	0.2919015
59.75/65	0.12/0.15	20324.20 secs	(1.813419 mins)	0.31963	0.2740282
59.75/65	0.13/0.15	20435.30 secs	(1.851686 mins)	0.42793	0.2770646
59.75/65	0.14/0.15	20548.30 secs	(1.883289 mins)	0.50431	0.2711214
59.75/65	0.15/0.15	20668.56 secs	(2.004489 mins)	0.58042	0.2870159


60/65	0.05/0.15	20730.87 secs	(1.038378 mins)	0.0254	0.2662466
60/65	0.06/0.15	20792.50 secs	(1.027208 mins)	0.03772	0.2495082
60/65	0.07/0.15	20863.58 secs	(1.184676 mins)	0.06284	0.2719838
60/65	0.08/0.15	20942.51 secs	(1.315457 mins)	0.10277	0.2822333
60/65	0.09/0.15	21029.45 secs	(1.449107 mins)	0.15757	0.2931047
60/65	0.10/0.15	21128.60 secs	(1.652428 mins)	0.21797	0.3075832
60/65	0.11/0.15	21220.77 secs	(1.536242 mins)	0.25713	0.2668423
60/65	0.12/0.15	21335.41 secs	(1.910602 mins)	0.36242	0.2801453
60/65	0.13/0.15	21442.69 secs	(1.787981 mins)	0.40487	0.2790334
60/65	0.14/0.15	21563.89 secs	(2.020013 mins)	0.46542	0.2864437
60/65	0.15/0.15	21680.52 secs	(1.943795 mins)	0.60235	0.2828573


60.25/65	0.05/0.15	21744.28 secs	(1.062651 mins)	0.02389	0.2721192
60.25/65	0.06/0.15	21806.24 secs	(1.032721 mins)	0.03271	0.2948881
60.25/65	0.07/0.15	21876.43 secs	(1.169773 mins)	0.07097	0.2684843
60.25/65	0.08/0.15	21960.46 secs	(1.40059 mins)	0.09731	0.2554238
60.25/65	0.09/0.15	22045.96 secs	(1.425002 mins)	0.14726	0.2596527
60.25/65	0.10/0.15	22141.49 secs	(1.592129 mins)	0.22466	0.3075662
60.25/65	0.11/0.15	22237.23 secs	(1.595654 mins)	0.25622	0.2880121
60.25/65	0.12/0.15	22349.97 secs	(1.879096 mins)	0.38638	0.2769038
60.25/65	0.13/0.15	22458.71 secs	(1.812315 mins)	0.41136	0.265702
60.25/65	0.14/0.15	22580.51 secs	(2.029931 mins)	0.55931	0.3065059
60.25/65	0.15/0.15	22692.17 secs	(1.860971 mins)	0.56401	0.2922434


60.5/65	0.05/0.15	22755.98 secs	(1.063584 mins)	0.02356	0.2883836
60.5/65	0.06/0.15	22827.48 secs	(1.191552 mins)	0.044	0.2785525
60.5/65	0.07/0.15	22894.39 secs	(1.115282 mins)	0.07036	0.2737667
60.5/65	0.08/0.15	22974.08 secs	(1.328141 mins)	0.07624	0.2527149
60.5/65	0.09/0.15	23051.94 secs	(1.297669 mins)	0.1376	0.2999684
60.5/65	0.10/0.15	23145.42 secs	(1.55802 mins)	0.20802	0.2858242
60.5/65	0.11/0.15	23252.69 secs	(1.787718 mins)	0.29137	0.2744576
60.5/65	0.12/0.15	23353.30 secs	(1.676906 mins)	0.31058	0.2730954
60.5/65	0.13/0.15	23473.30 secs	(2.000033 mins)	0.45588	0.3104411
60.5/65	0.14/0.15	23592.01 secs	(1.978424 mins)	0.50982	0.292227
60.5/65	0.15/0.15	23710.87 secs	(1.980983 mins)	0.59432	0.2997613


60.75/65	0.05/0.15	23768.47 secs	(57.60147 secs)	0.02637	0.3015137
60.75/65	0.06/0.15	23837.97 secs	(1.158318 mins)	0.03568	0.2837613
60.75/65	0.07/0.15	23907.32 secs	(1.155813 mins)	0.06284	0.2716638
60.75/65	0.08/0.15	23985.97 secs	(1.310927 mins)	0.09674	0.2549275
60.75/65	0.09/0.15	24076.31 secs	(1.505563 mins)	0.1386	0.2753037
60.75/65	0.10/0.15	24169.12 secs	(1.546956 mins)	0.22254	0.3170557
60.75/65	0.11/0.15	24280.06 secs	(1.848927 mins)	0.26919	0.2763533
60.75/65	0.12/0.15	24371.05 secs	(1.516534 mins)	0.32081	0.282376
60.75/65	0.13/0.15	24490.23 secs	(1.986404 mins)	0.4444	0.2978459
60.75/65	0.14/0.15	24607.82 secs	(1.959786 mins)	0.54496	0.2912381
60.75/65	0.15/0.15	24732.17 secs	(2.072504 mins)	0.57057	0.2796238


61/65	0.05/0.15	24793.31 secs	(1.018891 mins)	0.02568	0.255883
61/65	0.06/0.15	24857.45 secs	(1.069038 mins)	0.03847	0.2585582
61/65	0.07/0.15	24933.49 secs	(1.2673 mins)	0.06463	0.2800264
61/65	0.08/0.15	25008.59 secs	(1.251675 mins)	0.09052	0.2820619
61/65	0.09/0.15	25089.31 secs	(1.345449 mins)	0.13039	0.2912794
61/65	0.10/0.15	25187.68 secs	(1.639435 mins)	0.21482	0.2889775
61/65	0.11/0.15	25292.38 secs	(1.745006 mins)	0.31522	0.2963219
61/65	0.12/0.15	25399.21 secs	(1.780471 mins)	0.36239	0.2978155
61/65	0.13/0.15	25514.92 secs	(1.928551 mins)	0.44796	0.3000161
61/65	0.14/0.15	25626.77 secs	(1.86415 mins)	0.4984	0.2716051
61/65	0.15/0.15	25750.23 secs	(2.057643 mins)	0.59697	0.2992748


61.25/65	0.05/0.15	25807.59 secs	(57.36325 secs)	0.02098	0.2871043
61.25/65	0.06/0.15	25873.28 secs	(1.09484 mins)	0.04174	0.2809191
61.25/65	0.07/0.15	25945.15 secs	(1.197783 mins)	0.05754	0.2897236
61.25/65	0.08/0.15	26028.89 secs	(1.395639 mins)	0.12717	0.2802243
61.25/65	0.09/0.15	26113.64 secs	(1.412523 mins)	0.14905	0.2671338
61.25/65	0.10/0.15	26216.56 secs	(1.715429 mins)	0.23518	0.2769538
61.25/65	0.11/0.15	26313.57 secs	(1.616767 mins)	0.25295	0.2980329
61.25/65	0.12/0.15	26429.11 secs	(1.925661 mins)	0.3528	0.2843826
61.25/65	0.13/0.15	26544.30 secs	(1.919903 mins)	0.47828	0.3100188
61.25/65	0.14/0.15	26659.24 secs	(1.91556 mins)	0.50304	0.2911191
61.25/65	0.15/0.15	26778.32 secs	(1.984733 mins)	0.62451	0.3052911


61.5/65	0.05/0.15	26833.73 secs	(55.41 secs)	0.02533	0.2713547
61.5/65	0.06/0.15	26897.09 secs	(1.055978 mins)	0.0386	0.2813521
61.5/65	0.07/0.15	26968.57 secs	(1.191298 mins)	0.07515	0.2973239
61.5/65	0.08/0.15	27061.99 secs	(1.557002 mins)	0.10329	0.2711727
61.5/65	0.09/0.15	27154.20 secs	(1.536895 mins)	0.14302	0.2781754
61.5/65	0.10/0.15	27264.73 secs	(1.842122 mins)	0.18236	0.2543363
61.5/65	0.11/0.15	27367.95 secs	(1.720266 mins)	0.318	0.3122156
61.5/65	0.12/0.15	27479.70 secs	(1.862618 mins)	0.35491	0.2757141
61.5/65	0.13/0.15	27592.60 secs	(1.881607 mins)	0.48374	0.2986884
61.5/65	0.14/0.15	27703.69 secs	(1.851555 mins)	0.48815	0.2860046
61.5/65	0.15/0.15	27824.75 secs	(2.017682 mins)	0.566	0.2885493


61.75/65	0.05/0.15	27889.82 secs	(1.084426 mins)	0.02437	0.3174721
61.75/65	0.06/0.15	27950.81 secs	(1.016559 mins)	0.03136	0.2583542
61.75/65	0.07/0.15	28023.78 secs	(1.216195 mins)	0.05648	0.262695
61.75/65	0.08/0.15	28102.51 secs	(1.31215 mins)	0.08925	0.2867725
61.75/65	0.09/0.15	28189.45 secs	(1.448925 mins)	0.13282	0.2825986
61.75/65	0.10/0.15	28294.18 secs	(1.745567 mins)	0.18186	0.271377
61.75/65	0.11/0.15	28399.50 secs	(1.755249 mins)	0.31593	0.2853959
61.75/65	0.12/0.15	28515.28 secs	(1.929642 mins)	0.34864	0.2773737
61.75/65	0.13/0.15	28619.04 secs	(1.729446 mins)	0.40131	0.2713042
61.75/65	0.14/0.15	28733.37 secs	(1.90545 mins)	0.50209	0.2943047
61.75/65	0.15/0.15	28849.13 secs	(1.929323 mins)	0.60651	0.3025393


62/65	0.05/0.15	28910.74 secs	(1.026843 mins)	0.02539	0.2806581
62/65	0.06/0.15	28974.27 secs	(1.058815 mins)	0.04302	0.2859636
62/65	0.07/0.15	29050.90 secs	(1.277137 mins)	0.05787	0.2705376
62/65	0.08/0.15	29131.49 secs	(1.343233 mins)	0.11832	0.2868491
62/65	0.09/0.15	29215.81 secs	(1.405256 mins)	0.16153	0.2983184
62/65	0.10/0.15	29317.81 secs	(1.700111 mins)	0.24389	0.2992028
62/65	0.11/0.15	29412.30 secs	(1.574737 mins)	0.3231	0.3056495
62/65	0.12/0.15	29518.07 secs	(1.762888 mins)	0.34714	0.2716405
62/65	0.13/0.15	29622.47 secs	(1.740071 mins)	0.4353	0.2900301
62/65	0.14/0.15	29741.16 secs	(1.978044 mins)	0.53113	0.2978035
62/65	0.15/0.15	29850.43 secs	(1.821236 mins)	0.55852	0.2863957


62.25/65	0.05/0.15	29919.79 secs	(1.155929 mins)	0.03292	0.3007196
62.25/65	0.06/0.15	29986.11 secs	(1.105326 mins)	0.03437	0.3041472
62.25/65	0.07/0.15	30055.22 secs	(1.151906 mins)	0.07301	0.2640145
62.25/65	0.08/0.15	30135.04 secs	(1.330281 mins)	0.10059	0.2730949
62.25/65	0.09/0.15	30222.95 secs	(1.465152 mins)	0.15188	0.2971016
62.25/65	0.10/0.15	30315.26 secs	(1.538478 mins)	0.21397	0.2949371
62.25/65	0.11/0.15	30419.53 secs	(1.737881 mins)	0.30852	0.2829801
62.25/65	0.12/0.15	30523.16 secs	(1.727239 mins)	0.39612	0.2948632
62.25/65	0.13/0.15	30634.66 secs	(1.858235 mins)	0.42964	0.297237
62.25/65	0.14/0.15	30739.72 secs	(1.751027 mins)	0.49713	0.2814613
62.25/65	0.15/0.15	30851.84 secs	(1.868629 mins)	0.61631	0.3142011


62.5/65	0.05/0.15	30911.19 secs	(59.35549 secs)	0.02727	0.2974265
62.5/65	0.06/0.15	30979.11 secs	(1.13203 mins)	0.04667	0.2843662
62.5/65	0.07/0.15	31049.53 secs	(1.173654 mins)	0.06556	0.2466948
62.5/65	0.08/0.15	31121.61 secs	(1.201361 mins)	0.08429	0.2626805
62.5/65	0.09/0.15	31202.46 secs	(1.347486 mins)	0.13886	0.2938108
62.5/65	0.10/0.15	31301.61 secs	(1.652475 mins)	0.26326	0.2892819
62.5/65	0.11/0.15	31402.89 secs	(1.687928 mins)	0.33129	0.3077053
62.5/65	0.12/0.15	31502.01 secs	(1.6521 mins)	0.33522	0.2766014
62.5/65	0.13/0.15	31609.62 secs	(1.793367 mins)	0.43816	0.2815536
62.5/65	0.14/0.15	31713.76 secs	(1.735741 mins)	0.52008	0.3097468
62.5/65	0.15/0.15	31831.50 secs	(1.962266 mins)	0.61626	0.3040577


62.75/65	0.05/0.15	31890.91 secs	(59.41747 secs)	0.02402	0.2680522
62.75/65	0.06/0.15	31947.42 secs	(56.5074 secs)	0.04204	0.2660445
62.75/65	0.07/0.15	32025.88 secs	(1.307623 mins)	0.0641	0.2642652
62.75/65	0.08/0.15	32102.96 secs	(1.284709 mins)	0.11188	0.2777782
62.75/65	0.09/0.15	32194.51 secs	(1.525878 mins)	0.17527	0.2928942
62.75/65	0.10/0.15	32293.01 secs	(1.641567 mins)	0.24797	0.2980961
62.75/65	0.11/0.15	32390.19 secs	(1.619661 mins)	0.2944	0.2994585
62.75/65	0.12/0.15	32492.39 secs	(1.703422 mins)	0.3244	0.2907082
62.75/65	0.13/0.15	32593.89 secs	(1.691596 mins)	0.45925	0.3147136
62.75/65	0.14/0.15	32717.48 secs	(2.059941 mins)	0.52127	0.2975144
62.75/65	0.15/0.15	32827.26 secs	(1.82959 mins)	0.63239	0.3213538


63/65	0.05/0.15	32891.01 secs	(1.062439 mins)	0.02463	0.2813605
63/65	0.06/0.15	32952.99 secs	(1.032993 mins)	0.04125	0.2676789
63/65	0.07/0.15	33022.75 secs	(1.162698 mins)	0.07163	0.281952
63/65	0.08/0.15	33102.68 secs	(1.332281 mins)	0.09577	0.2889856
63/65	0.09/0.15	33190.82 secs	(1.468965 mins)	0.16335	0.2811635
63/65	0.10/0.15	33284.64 secs	(1.563556 mins)	0.23483	0.2821716
63/65	0.11/0.15	33380.37 secs	(1.595509 mins)	0.28286	0.2881465
63/65	0.12/0.15	33480.23 secs	(1.664406 mins)	0.34911	0.2595067
63/65	0.13/0.15	33584.32 secs	(1.734893 mins)	0.41074	0.302441
63/65	0.14/0.15	33704.24 secs	(1.998611 mins)	0.56982	0.3337382
63/65	0.15/0.15	33817.18 secs	(1.882322 mins)	0.61716	0.3083749


63.25/65	0.05/0.15	33878.03 secs	(1.014088 mins)	0.03135	0.3024319
63.25/65	0.06/0.15	33950.45 secs	(1.20706 mins)	0.0428	0.2793753
63.25/65	0.07/0.15	34017.00 secs	(1.109096 mins)	0.06277	0.2623792
63.25/65	0.08/0.15	34092.90 secs	(1.265037 mins)	0.10306	0.2943864
63.25/65	0.09/0.15	34191.98 secs	(1.651436 mins)	0.16439	0.2882491
63.25/65	0.10/0.15	34277.87 secs	(1.431515 mins)	0.22314	0.2853404
63.25/65	0.11/0.15	34381.37 secs	(1.724993 mins)	0.2978	0.3110775
63.25/65	0.12/0.15	34482.90 secs	(1.69209 mins)	0.39246	0.3251937
63.25/65	0.13/0.15	34598.38 secs	(1.924725 mins)	0.44685	0.2918052
63.25/65	0.14/0.15	34708.14 secs	(1.82935 mins)	0.59105	0.313474
63.25/65	0.15/0.15	34829.28 secs	(2.018944 mins)	0.61112	0.3118177


63.5/65	0.05/0.15	34881.09 secs	(51.80853 secs)	0.02581	0.3121186
63.5/65	0.06/0.15	34945.22 secs	(1.068875 mins)	0.04562	0.2691125
63.5/65	0.07/0.15	35025.37 secs	(1.335725 mins)	0.05264	0.2478882
63.5/65	0.08/0.15	35093.69 secs	(1.138764 mins)	0.10497	0.259768
63.5/65	0.09/0.15	35191.23 secs	(1.625599 mins)	0.17441	0.3075547
63.5/65	0.10/0.15	35279.78 secs	(1.475843 mins)	0.19849	0.2709472
63.5/65	0.11/0.15	35378.07 secs	(1.638186 mins)	0.31295	0.2925353
63.5/65	0.12/0.15	35477.72 secs	(1.660781 mins)	0.34172	0.2997127
63.5/65	0.13/0.15	35586.94 secs	(1.82046 mins)	0.49972	0.3126736
63.5/65	0.14/0.15	35704.32 secs	(1.956216 mins)	0.56568	0.3083431
63.5/65	0.15/0.15	35818.70 secs	(1.906323 mins)	0.61527	0.3235524


63.75/65	0.05/0.15	35883.89 secs	(1.086533 mins)	0.02375	0.2913481
63.75/65	0.06/0.15	35946.07 secs	(1.036432 mins)	0.03945	0.3137127
63.75/65	0.07/0.15	36018.66 secs	(1.209849 mins)	0.07623	0.2944505
63.75/65	0.08/0.15	36109.03 secs	(1.506026 mins)	0.10386	0.2761411
63.75/65	0.09/0.15	36188.24 secs	(1.320228 mins)	0.16843	0.3183626
63.75/65	0.10/0.15	36290.13 secs	(1.698191 mins)	0.21918	0.2793495
63.75/65	0.11/0.15	36389.01 secs	(1.647943 mins)	0.27187	0.2733168
63.75/65	0.12/0.15	36493.36 secs	(1.739153 mins)	0.38937	0.2917112
63.75/65	0.13/0.15	36605.04 secs	(1.861309 mins)	0.46895	0.3042796
63.75/65	0.14/0.15	36723.17 secs	(1.968917 mins)	0.5073	0.2799805
63.75/65	0.15/0.15	36828.24 secs	(1.751194 mins)	0.53306	0.2693904


64/65	0.05/0.15	36891.12 secs	(1.047886 mins)	0.02313	0.2745678
64/65	0.06/0.15	36965.66 secs	(1.242474 mins)	0.04219	0.2747872
64/65	0.07/0.15	37029.50 secs	(1.063942 mins)	0.05548	0.2488498
64/65	0.08/0.15	37111.94 secs	(1.374064 mins)	0.12526	0.3075187
64/65	0.09/0.15	37193.65 secs	(1.361781 mins)	0.1523	0.2746566
64/65	0.10/0.15	37283.37 secs	(1.495376 mins)	0.19919	0.3060637
64/65	0.11/0.15	37385.93 secs	(1.709231 mins)	0.33683	0.303837
64/65	0.12/0.15	37490.66 secs	(1.745619 mins)	0.36455	0.3051276
64/65	0.13/0.15	37600.00 secs	(1.822225 mins)	0.48382	0.3067422
64/65	0.14/0.15	37708.00 secs	(1.800101 mins)	0.56051	0.3138789
64/65	0.15/0.15	37825.79 secs	(1.963088 mins)	0.61678	0.3088784


64.25/65	0.05/0.15	37875.71 secs	(49.92065 secs)	0.02159	0.2934832
64.25/65	0.06/0.15	37952.67 secs	(1.282587 mins)	0.05156	0.2781212
64.25/65	0.07/0.15	38028.59 secs	(1.265424 mins)	0.06467	0.3024681
64.25/65	0.08/0.15	38097.14 secs	(1.142524 mins)	0.10511	0.2988032
64.25/65	0.09/0.15	38194.45 secs	(1.621835 mins)	0.15399	0.2942334
64.25/65	0.10/0.15	38281.74 secs	(1.454775 mins)	0.22546	0.3126339
64.25/65	0.11/0.15	38387.77 secs	(1.767151 mins)	0.30572	0.276877
64.25/65	0.12/0.15	38495.37 secs	(1.793416 mins)	0.39828	0.3023041
64.25/65	0.13/0.15	38605.95 secs	(1.842909 mins)	0.47176	0.294658
64.25/65	0.14/0.15	38719.99 secs	(1.900632 mins)	0.49718	0.3026464
64.25/65	0.15/0.15	38836.37 secs	(1.939759 mins)	0.58687	0.2957628


64.5/65	0.05/0.15	38894.08 secs	(57.70468 secs)	0.02561	0.2509304
64.5/65	0.06/0.15	38950.64 secs	(56.56883 secs)	0.04311	0.3073001
64.5/65	0.07/0.15	39031.20 secs	(1.342607 mins)	0.06712	0.2757193
64.5/65	0.08/0.15	39113.61 secs	(1.373467 mins)	0.11861	0.297903
64.5/65	0.09/0.15	39202.86 secs	(1.487566 mins)	0.20643	0.296975
64.5/65	0.10/0.15	39301.33 secs	(1.641171 mins)	0.22552	0.3029746
64.5/65	0.11/0.15	39394.78 secs	(1.557404 mins)	0.3097	0.3132285
64.5/65	0.12/0.15	39500.04 secs	(1.75436 mins)	0.39078	0.3034272
64.5/65	0.13/0.15	39610.02 secs	(1.832998 mins)	0.45427	0.300373
64.5/65	0.14/0.15	39725.75 secs	(1.92891 mins)	0.52364	0.3039423
64.5/65	0.15/0.15	39832.57 secs	(1.780213 mins)	0.55932	0.2960288


64.75/65	0.05/0.15	39895.12 secs	(1.042571 mins)	0.02267	0.2779925
64.75/65	0.06/0.15	39956.78 secs	(1.027735 mins)	0.04016	0.2663398
64.75/65	0.07/0.15	40020.81 secs	(1.067098 mins)	0.0823	0.3035205
64.75/65	0.08/0.15	40105.18 secs	(1.406111 mins)	0.11037	0.2922236
64.75/65	0.09/0.15	40203.63 secs	(1.640873 mins)	0.18307	0.2914437
64.75/65	0.10/0.15	40305.37 secs	(1.695628 mins)	0.25811	0.3082722
64.75/65	0.11/0.15	40400.72 secs	(1.58928 mins)	0.30206	0.3074744
64.75/65	0.12/0.15	40512.25 secs	(1.858781 mins)	0.42151	0.2945666
64.75/65	0.13/0.15	40624.46 secs	(1.870151 mins)	0.51472	0.318244
64.75/65	0.14/0.15	40737.75 secs	(1.888221 mins)	0.53524	0.2977241
64.75/65	0.15/0.15	40849.81 secs	(1.867679 mins)	0.6313	0.3283473


65/65	0.05/0.15	40904.04 secs	(54.22612 secs)	0.02328	0.283802
65/65	0.06/0.15	40974.32 secs	(1.171354 mins)	0.04376	0.3006739
65/65	0.07/0.15	41045.41 secs	(1.18483 mins)	0.06556	0.2897858
65/65	0.08/0.15	41126.79 secs	(1.356267 mins)	0.12048	0.270536
65/65	0.09/0.15	41220.06 secs	(1.554529 mins)	0.16868	0.2985811
65/65	0.10/0.15	41319.45 secs	(1.656597 mins)	0.26525	0.3005247
65/65	0.11/0.15	41430.10 secs	(1.84414 mins)	0.31739	0.2965212
65/65	0.12/0.15	41534.82 secs	(1.745227 mins)	0.38795	0.3074625
65/65	0.13/0.15	41646.77 secs	(1.865958 mins)	0.4923	0.3068575
65/65	0.14/0.15	41756.07 secs	(1.821654 mins)	0.52164	0.3293869
65/65	0.15/0.15	41867.22 secs	(1.852482 mins)	0.59902	0.305198


> write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
> write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
> 
> proc.time()
     user    system   elapsed 
507110.17  10393.83  41949.20 
