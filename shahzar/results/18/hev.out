
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> # Use detectCores() to find out how many cores are available.
> message(detectCores())
24
> num_cores <- 18
> registerDoParallel(num_cores)
> 
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> pop <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < pop)]
+   
+   leftover <- pop - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(beta_H, beta_C, inc, inf, verbose = 0) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:pop,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, pop - 1)), 
+                     E = c(1, rep(0, pop - 1)),
+                     E_count = c(1, rep(0, pop - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, pop - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious
+     # period is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation
+     # period is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious 
+       # individual's household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     risk_H <- beta_H * data$S * I_data$I_H / pop
+     risk_C <- beta_C * data$S * I_data$I_C / pop
+     
+     # Each individual is infected from their household or 
+     # community independently with probabilities risk_H
+     # and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious person.
+         # If exactly 1 infectious person in household, assign all new H exposures to infectious person.
+         # If there are multiple infectious people, assign all infections to an infectious person at random.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> beta_Hs <- seq(55, 65, 0.25)
> beta_Cs <- seq(0.05, 0.15, 0.01)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 100
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> sars <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+     
+     idc_list <- rep(NA, reps)
+     sar_list <- rep(NA, reps)
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(beta_H, beta_C, inc, inf, verbose = F) 
+       metrics(results)
+     }
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     sars[i, j, ] <- vals[, 2]
+     message(paste0(beta_H, '/65\t', 
+                    format(beta_C, nsmall = 2), '/0.15\t',  
+                    format(t_tot, nsmall = 2), '\t(', format(t_1 - t_0, nsmall = 2), ')\t', 
+                    format(mean(vals[, 1]), nsmall = 3), '\t', 
+                    format(mean(vals[, 2]), nsmall = 3)))
+     write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
55/65	0.05/0.15	1.201205 mins	(1.201205 mins)	0.02407	0.2269131
55/65	0.06/0.15	2.218123 mins	(1.016919 mins)	0.03566	0.2288506
55/65	0.07/0.15	3.437197 mins	(1.219074 mins)	0.05431	0.239401
55/65	0.08/0.15	4.845307 mins	(1.40811 mins)	0.06971	0.2233016
55/65	0.09/0.15	6.331698 mins	(1.486391 mins)	0.126	0.2675737
55/65	0.10/0.15	7.913943 mins	(1.582245 mins)	0.14093	0.2489952
55/65	0.11/0.15	9.728771 mins	(1.814828 mins)	0.24786	0.2687356
55/65	0.12/0.15	11.64759 mins	(1.918822 mins)	0.30539	0.2757271
55/65	0.13/0.15	13.60955 mins	(1.96196 mins)	0.40477	0.2764361
55/65	0.14/0.15	15.66443 mins	(2.054881 mins)	0.49327	0.2716878
55/65	0.15/0.15	17.7463 mins	(2.081864 mins)	0.5422	0.2692316


55.25/65	0.05/0.15	18.82515 mins	(1.078856 mins)	0.025	0.2599865
55.25/65	0.06/0.15	19.94125 mins	(1.116095 mins)	0.03274	0.2342442
55.25/65	0.07/0.15	21.28418 mins	(1.342927 mins)	0.04478	0.2284825
55.25/65	0.08/0.15	22.75813 mins	(1.473957 mins)	0.09138	0.2672249
55.25/65	0.09/0.15	24.28068 mins	(1.522551 mins)	0.12798	0.228825
55.25/65	0.10/0.15	26.08872 mins	(1.808038 mins)	0.19311	0.2526306
55.25/65	0.11/0.15	27.77095 mins	(1.682231 mins)	0.24607	0.2460317
55.25/65	0.12/0.15	29.52317 mins	(1.752222 mins)	0.29308	0.2505467
55.25/65	0.13/0.15	31.64419 mins	(2.121016 mins)	0.3928	0.2653166
55.25/65	0.14/0.15	33.55679 mins	(1.9126 mins)	0.47629	0.2619387
55.25/65	0.15/0.15	35.86739 mins	(2.310597 mins)	0.48082	0.2504189


55.5/65	0.05/0.15	36.96276 mins	(1.095377 mins)	0.01539	0.2388578
55.5/65	0.06/0.15	38.00221 mins	(1.039449 mins)	0.03216	0.2507174
55.5/65	0.07/0.15	39.21532 mins	(1.213112 mins)	0.04676	0.2459998
55.5/65	0.08/0.15	40.66951 mins	(1.454181 mins)	0.08732	0.2596733
55.5/65	0.09/0.15	42.1642 mins	(1.49469 mins)	0.12074	0.2496354
55.5/65	0.10/0.15	43.79917 mins	(1.634979 mins)	0.17227	0.2450108
55.5/65	0.11/0.15	45.7485 mins	(1.949321 mins)	0.24473	0.2316316
55.5/65	0.12/0.15	47.58949 mins	(1.840996 mins)	0.30569	0.2747293
55.5/65	0.13/0.15	49.63071 mins	(2.041218 mins)	0.38108	0.2610437
55.5/65	0.14/0.15	51.64749 mins	(2.016778 mins)	0.49057	0.2779835
55.5/65	0.15/0.15	53.68806 mins	(2.040574 mins)	0.48913	0.2822474


55.75/65	0.05/0.15	54.70501 mins	(1.016946 mins)	0.02257	0.2770386
55.75/65	0.06/0.15	55.86712 mins	(1.162108 mins)	0.02735	0.244889
55.75/65	0.07/0.15	57.18577 mins	(1.318651 mins)	0.05328	0.2582184
55.75/65	0.08/0.15	58.41609 mins	(1.230322 mins)	0.07011	0.2298596
55.75/65	0.09/0.15	59.98246 mins	(1.566374 mins)	0.13383	0.2574123
55.75/65	0.10/0.15	61.64154 mins	(1.659079 mins)	0.1529	0.2558107
55.75/65	0.11/0.15	63.18411 mins	(1.542567 mins)	0.20918	0.236696
55.75/65	0.12/0.15	65.15671 mins	(1.972605 mins)	0.31615	0.2660023
55.75/65	0.13/0.15	67.11936 mins	(1.962646 mins)	0.39831	0.263864
55.75/65	0.14/0.15	69.089 mins	(1.969638 mins)	0.42781	0.2557714
55.75/65	0.15/0.15	71.2537 mins	(2.164699 mins)	0.52157	0.2563084


56/65	0.05/0.15	72.34301 mins	(1.089316 mins)	0.01567	0.2669656
56/65	0.06/0.15	73.52434 mins	(1.181323 mins)	0.02626	0.2197343
56/65	0.07/0.15	74.7372 mins	(1.21286 mins)	0.04902	0.2402689
56/65	0.08/0.15	76.05538 mins	(1.318184 mins)	0.08278	0.2526252
56/65	0.09/0.15	77.5412 mins	(1.485818 mins)	0.13681	0.2548983
56/65	0.10/0.15	79.30276 mins	(1.761562 mins)	0.18976	0.2520244
56/65	0.11/0.15	81.0593 mins	(1.756544 mins)	0.26964	0.2733531
56/65	0.12/0.15	83.0325 mins	(1.973201 mins)	0.33706	0.260874
56/65	0.13/0.15	84.88435 mins	(1.851844 mins)	0.34465	0.2441068
56/65	0.14/0.15	86.94615 mins	(2.0618 mins)	0.53898	0.2815877
56/65	0.15/0.15	89.07062 mins	(2.124468 mins)	0.57721	0.2828923


56.25/65	0.05/0.15	90.12363 mins	(1.053018 mins)	0.02172	0.2180851
56.25/65	0.06/0.15	91.37873 mins	(1.2551 mins)	0.03045	0.2550991
56.25/65	0.07/0.15	92.68913 mins	(1.310399 mins)	0.04508	0.2520307
56.25/65	0.08/0.15	94.21716 mins	(1.528021 mins)	0.10073	0.2697906
56.25/65	0.09/0.15	95.6077 mins	(1.390547 mins)	0.12931	0.268181
56.25/65	0.10/0.15	97.27633 mins	(1.66863 mins)	0.17566	0.2646414
56.25/65	0.11/0.15	98.84589 mins	(1.569556 mins)	0.23478	0.2663816
56.25/65	0.12/0.15	100.6206 mins	(1.774714 mins)	0.32247	0.2657461
56.25/65	0.13/0.15	102.6475 mins	(2.02685 mins)	0.37858	0.2608984
56.25/65	0.14/0.15	104.6134 mins	(1.965985 mins)	0.5032	0.2785217
56.25/65	0.15/0.15	106.7841 mins	(2.170617 mins)	0.50788	0.2572822


56.5/65	0.05/0.15	6466.454 secs	(59.41056 secs)	0.02655	0.2697674
56.5/65	0.06/0.15	6542.138 secs	(1.2614 mins)	0.03914	0.2879574
56.5/65	0.07/0.15	6619.678 secs	(1.292331 mins)	0.05502	0.2480767
56.5/65	0.08/0.15	6707.829 secs	(1.469197 mins)	0.08565	0.2873646
56.5/65	0.09/0.15	6797.271 secs	(1.490685 mins)	0.12005	0.2392118
56.5/65	0.10/0.15	6899.909 secs	(1.710638 mins)	0.20682	0.2772374
56.5/65	0.11/0.15	7005.918 secs	(1.766814 mins)	0.23501	0.2677141
56.5/65	0.12/0.15	7119.466 secs	(1.892473 mins)	0.34861	0.2619999
56.5/65	0.13/0.15	7238.181 secs	(1.978583 mins)	0.3605	0.2723816
56.5/65	0.14/0.15	7367.095 secs	(2.148574 mins)	0.4525	0.2648991
56.5/65	0.15/0.15	7497.755 secs	(2.177655 mins)	0.55966	0.2781365


56.75/65	0.05/0.15	7555.402 secs	(57.64741 secs)	0.01847	0.212781
56.75/65	0.06/0.15	7629.82 secs	(1.240303 mins)	0.03887	0.2666172
56.75/65	0.07/0.15	7708.791 secs	(1.316178 mins)	0.05326	0.2889105
56.75/65	0.08/0.15	7795.478 secs	(1.444781 mins)	0.10264	0.2559314
56.75/65	0.09/0.15	7887.308 secs	(1.530504 mins)	0.12085	0.2453602
56.75/65	0.10/0.15	7994.84 secs	(1.792198 mins)	0.18684	0.2775109
56.75/65	0.11/0.15	8095.312 secs	(1.674528 mins)	0.24939	0.2673518
56.75/65	0.12/0.15	8211.124 secs	(1.930201 mins)	0.29934	0.2654078
56.75/65	0.13/0.15	8329.065 secs	(1.965686 mins)	0.39943	0.2824248
56.75/65	0.14/0.15	8448.691 secs	(1.993766 mins)	0.44414	0.2764992
56.75/65	0.15/0.15	8574.615 secs	(2.098743 mins)	0.56603	0.287767


57/65	0.05/0.15	8629.004 secs	(54.38819 secs)	0.02397	0.2655771
57/65	0.06/0.15	8700.557 secs	(1.192551 mins)	0.02534	0.2285011
57/65	0.07/0.15	8777.966 secs	(1.290163 mins)	0.05422	0.2518794
57/65	0.08/0.15	8858.37 secs	(1.340064 mins)	0.08269	0.241404
57/65	0.09/0.15	8954.244 secs	(1.597902 mins)	0.14446	0.2342515
57/65	0.10/0.15	9054.645 secs	(1.673345 mins)	0.18005	0.2638479
57/65	0.11/0.15	9159.297 secs	(1.744199 mins)	0.21645	0.2494035
57/65	0.12/0.15	9274.527 secs	(1.920493 mins)	0.30299	0.2553599
57/65	0.13/0.15	9393.128 secs	(1.976696 mins)	0.37992	0.2692639
57/65	0.14/0.15	9512.566 secs	(1.990623 mins)	0.48647	0.2761097
57/65	0.15/0.15	9635.109 secs	(2.042392 mins)	0.55873	0.2718894


57.25/65	0.05/0.15	9690.405 secs	(55.29584 secs)	0.02431	0.2469436
57.25/65	0.06/0.15	9766.229 secs	(1.263731 mins)	0.04543	0.2789022
57.25/65	0.07/0.15	9857.583 secs	(1.522561 mins)	0.06147	0.2765866
57.25/65	0.08/0.15	9930.625 secs	(1.21737 mins)	0.07901	0.2800747
57.25/65	0.09/0.15	10010.67 secs	(1.334074 mins)	0.11195	0.2450819
57.25/65	0.10/0.15	10106.00 secs	(1.588774 mins)	0.14883	0.2351935
57.25/65	0.11/0.15	10200.12 secs	(1.56875 mins)	0.24963	0.2805193
57.25/65	0.12/0.15	10301.60 secs	(1.691309 mins)	0.26655	0.2562861
57.25/65	0.13/0.15	10400.06 secs	(1.641043 mins)	0.39577	0.2588776
57.25/65	0.14/0.15	10521.02 secs	(2.016042 mins)	0.4759	0.2861044
57.25/65	0.15/0.15	10636.61 secs	(1.926451 mins)	0.50908	0.2535363


57.5/65	0.05/0.15	10701.74 secs	(1.085495 mins)	0.02006	0.291701
57.5/65	0.06/0.15	10766.40 secs	(1.077598 mins)	0.03969	0.2559206
57.5/65	0.07/0.15	10831.84 secs	(1.090671 mins)	0.04904	0.2366465
57.5/65	0.08/0.15	10912.18 secs	(1.338999 mins)	0.08918	0.2569617
57.5/65	0.09/0.15	10995.11 secs	(1.382162 mins)	0.12206	0.2559827
