
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_env <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = rep(1, N), 
+                      E = rep(0, N),
+                      E_count = rep(0, N), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = rep(0, N),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+     
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       results$TIME[new_inf] <- t
+     }
+     
+     beta_E <- params[1]
+     risk_E <- pmin(beta_E * data$S, 1)
+     
+     new_exposed <- rbinom(N, 1, risk_E)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if(num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed == 1] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed == 1] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed == 1] <- 0
+         
+       # Label infection types.
+       results$TYPE[new_exposed == 1] <- 'E'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(c(idc))
+ }
> 
> beta_Es <- seq(0.00010, 0.00115, 0.00001) #106
> 
> d_E <- length(beta_Es)
> 
> reps <- 1000
> idcs <- array(rep(NA, d_E * reps), dim = c(d_E, reps))
> t_tot <- 0
> for (i in 1:d_E) {
+   beta_E <- beta_Es[i]
+   params <- c(beta_E)
+ 
+   cat(paste0(format(beta_E, nsmall = 5, digits = 5, scientific = F), '/0.00115\t'))
+ 
+   t_0 <- Sys.time()
+   vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+     results <- SEIR_env(params) 
+     metrics(results)
+   }
+   t_1 <- Sys.time()
+   t_tot <- t_tot + (t_1 - t_0)
+ 
+   cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+              format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+ 
+   vals <- matrix(vals, reps, byrow = T)
+   idcs[i, ] <- vals[, 1]
+ 
+       cat(paste0(format(round(mean(idcs[i, ]), 3), nsmall = 3), '\t',
+                  format(round(mean(idcs[i, idcs[i, ] > 0.01]), 3), nsmall = 3), '\t',
+                  format(round(sd(idcs[i, ]), 3), nsmall = 3), '\t',
+                  format(round(sd(idcs[i, idcs[i, ] > 0.01]), 3), nsmall = 3), '\n'))
+ 
+   saveRDS(idcs, file = 'idcs.rds')
+   write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+ }
0.00010/0.00115	4.951 secs	(4.951 secs)	0.032	0.032	0.005	0.005
0.00011/0.00115	10.22 secs	(5.267 secs)	0.036	0.036	0.006	0.006
0.00012/0.00115	15.29 secs	(5.07 secs)	0.039	0.039	0.006	0.006
0.00013/0.00115	20.42 secs	(5.127 secs)	0.042	0.042	0.006	0.006
0.00014/0.00115	25.89 secs	(5.471 secs)	0.046	0.046	0.007	0.007
0.00015/0.00115	31.12 secs	(5.235 secs)	0.048	0.048	0.007	0.007
0.00016/0.00115	36.39 secs	(5.271 secs)	0.052	0.052	0.007	0.007
0.00017/0.00115	41.88 secs	(5.492 secs)	0.055	0.055	0.007	0.007
0.00018/0.00115	47.22 secs	(5.338 secs)	0.058	0.058	0.007	0.007
0.00019/0.00115	52.78 secs	(5.553 secs)	0.061	0.061	0.007	0.007
0.00020/0.00115	58.43 secs	(5.655 secs)	0.064	0.064	0.008	0.008
0.00021/0.00115	64.09 secs	(5.661 secs)	0.067	0.067	0.008	0.008
0.00022/0.00115	69.82 secs	(5.73 secs)	0.070	0.070	0.008	0.008
0.00023/0.00115	75.66 secs	(5.836 secs)	0.074	0.074	0.008	0.008
0.00024/0.00115	81.30 secs	(5.64 secs)	0.077	0.077	0.008	0.008
0.00025/0.00115	86.95 secs	(5.654 secs)	0.079	0.079	0.008	0.008
0.00026/0.00115	92.73 secs	(5.78 secs)	0.083	0.083	0.009	0.009
0.00027/0.00115	98.47 secs	(5.743 secs)	0.086	0.086	0.009	0.009
0.00028/0.00115	104.30 secs	(5.828 secs)	0.089	0.089	0.009	0.009
0.00029/0.00115	110.16 secs	(5.86 secs)	0.092	0.092	0.009	0.009
0.00030/0.00115	116.21 secs	(6.05 secs)	0.095	0.095	0.009	0.009
0.00031/0.00115	122.18 secs	(5.965 secs)	0.097	0.097	0.010	0.010
0.00032/0.00115	128.22 secs	(6.038 secs)	0.101	0.101	0.009	0.009
0.00033/0.00115	134.37 secs	(6.158 secs)	0.105	0.105	0.010	0.010
0.00034/0.00115	140.41 secs	(6.041 secs)	0.107	0.107	0.009	0.009
0.00035/0.00115	146.55 secs	(6.132 secs)	0.109	0.109	0.010	0.010
0.00036/0.00115	153.07 secs	(6.52 secs)	0.112	0.112	0.010	0.010
0.00037/0.00115	159.50 secs	(6.439 secs)	0.116	0.116	0.010	0.010
0.00038/0.00115	165.80 secs	(6.298 secs)	0.119	0.119	0.010	0.010
0.00039/0.00115	172.57 secs	(6.77 secs)	0.121	0.121	0.010	0.010
0.00040/0.00115	178.90 secs	(6.33 secs)	0.124	0.124	0.011	0.011
0.00041/0.00115	185.29 secs	(6.384 secs)	0.127	0.127	0.011	0.011
0.00042/0.00115	191.93 secs	(6.644 secs)	0.130	0.130	0.011	0.011
0.00043/0.00115	198.36 secs	(6.425 secs)	0.133	0.133	0.011	0.011
0.00044/0.00115	204.88 secs	(6.525 secs)	0.136	0.136	0.011	0.011
0.00045/0.00115	211.49 secs	(6.606 secs)	0.139	0.139	0.011	0.011
0.00046/0.00115	218.25 secs	(6.761 secs)	0.141	0.141	0.011	0.011
0.00047/0.00115	224.92 secs	(6.669 secs)	0.144	0.144	0.011	0.011
0.00048/0.00115	231.58 secs	(6.662 secs)	0.148	0.148	0.011	0.011
0.00049/0.00115	238.27 secs	(6.696 secs)	0.150	0.150	0.011	0.011
0.00050/0.00115	245.01 secs	(6.74 secs)	0.153	0.153	0.012	0.012
0.00051/0.00115	251.73 secs	(6.72 secs)	0.156	0.156	0.012	0.012
0.00052/0.00115	258.46 secs	(6.726 secs)	0.159	0.159	0.011	0.011
0.00053/0.00115	265.64 secs	(7.184 secs)	0.162	0.162	0.011	0.011
0.00054/0.00115	272.49 secs	(6.847 secs)	0.164	0.164	0.011	0.011
0.00055/0.00115	279.39 secs	(6.90 secs)	0.166	0.166	0.011	0.011
0.00056/0.00115	286.43 secs	(7.044 secs)	0.169	0.169	0.012	0.012
0.00057/0.00115	293.25 secs	(6.818 secs)	0.172	0.172	0.012	0.012
0.00058/0.00115	300.56 secs	(7.311 secs)	0.174	0.174	0.012	0.012
0.00059/0.00115	307.43 secs	(6.87 secs)	0.178	0.178	0.012	0.012
0.00060/0.00115	314.42 secs	(6.988 secs)	0.181	0.181	0.012	0.012
0.00061/0.00115	321.49 secs	(7.073 secs)	0.183	0.183	0.012	0.012
0.00062/0.00115	328.48 secs	(6.988 secs)	0.186	0.186	0.013	0.013
0.00063/0.00115	335.58 secs	(7.098 secs)	0.189	0.189	0.012	0.012
0.00064/0.00115	342.50 secs	(6.918 secs)	0.191	0.191	0.013	0.013
0.00065/0.00115	349.62 secs	(7.126 secs)	0.194	0.194	0.012	0.012
0.00066/0.00115	356.66 secs	(7.035 secs)	0.197	0.197	0.012	0.012
0.00067/0.00115	363.66 secs	(6.996 secs)	0.199	0.199	0.013	0.013
0.00068/0.00115	370.73 secs	(7.076 secs)	0.201	0.201	0.013	0.013
0.00069/0.00115	377.75 secs	(7.016 secs)	0.205	0.205	0.012	0.012
0.00070/0.00115	384.72 secs	(6.975 secs)	0.208	0.208	0.013	0.013
0.00071/0.00115	391.86 secs	(7.14 secs)	0.210	0.210	0.013	0.013
0.00072/0.00115	398.87 secs	(7.003 secs)	0.213	0.213	0.013	0.013
0.00073/0.00115	405.93 secs	(7.066 secs)	0.215	0.215	0.013	0.013
0.00074/0.00115	412.96 secs	(7.03 secs)	0.218	0.218	0.013	0.013
0.00075/0.00115	420.06 secs	(7.098 secs)	0.221	0.221	0.013	0.013
0.00076/0.00115	427.17 secs	(7.107 secs)	0.222	0.222	0.013	0.013
0.00077/0.00115	434.33 secs	(7.165 secs)	0.226	0.226	0.013	0.013
0.00078/0.00115	441.53 secs	(7.197 secs)	0.228	0.228	0.013	0.013
0.00079/0.00115	448.76 secs	(7.232 secs)	0.231	0.231	0.014	0.014
0.00080/0.00115	456.10 secs	(7.34 secs)	0.233	0.233	0.013	0.013
0.00081/0.00115	463.40 secs	(7.302 secs)	0.236	0.236	0.013	0.013
0.00082/0.00115	471.06 secs	(7.66 secs)	0.239	0.239	0.014	0.014
0.00083/0.00115	478.43 secs	(7.368 secs)	0.241	0.241	0.014	0.014
0.00084/0.00115	485.97 secs	(7.538 secs)	0.243	0.243	0.014	0.014
0.00085/0.00115	493.60 secs	(7.636 secs)	0.245	0.245	0.014	0.014
0.00086/0.00115	501.03 secs	(7.421 secs)	0.249	0.249	0.013	0.013
0.00087/0.00115	508.76 secs	(7.733 secs)	0.250	0.250	0.014	0.014
0.00088/0.00115	516.24 secs	(7.485 secs)	0.253	0.253	0.014	0.014
0.00089/0.00115	523.81 secs	(7.567 secs)	0.256	0.256	0.014	0.014
0.00090/0.00115	531.40 secs	(7.586 secs)	0.258	0.258	0.014	0.014
0.00091/0.00115	539.06 secs	(7.659 secs)	0.261	0.261	0.014	0.014
0.00092/0.00115	546.93 secs	(7.87 secs)	0.263	0.263	0.015	0.015
0.00093/0.00115	554.54 secs	(7.616 secs)	0.266	0.266	0.014	0.014
0.00094/0.00115	562.27 secs	(7.729 secs)	0.268	0.268	0.013	0.013
0.00095/0.00115	570.00 secs	(7.726 secs)	0.272	0.272	0.015	0.015
0.00096/0.00115	577.69 secs	(7.69 secs)	0.273	0.273	0.014	0.014
0.00097/0.00115	585.55 secs	(7.865 secs)	0.275	0.275	0.014	0.014
0.00098/0.00115	593.36 secs	(7.811 secs)	0.278	0.278	0.014	0.014
0.00099/0.00115	601.61 secs	(8.244 secs)	0.281	0.281	0.014	0.014
0.00100/0.00115	609.50 secs	(7.896 secs)	0.283	0.283	0.014	0.014
0.00101/0.00115	617.56 secs	(8.058 secs)	0.285	0.285	0.014	0.014
0.00102/0.00115	625.44 secs	(7.876 secs)	0.287	0.287	0.014	0.014
0.00103/0.00115	633.28 secs	(7.846 secs)	0.290	0.290	0.014	0.014
0.00104/0.00115	641.44 secs	(8.156 secs)	0.292	0.292	0.015	0.015
0.00105/0.00115	649.34 secs	(7.901 secs)	0.295	0.295	0.015	0.015
0.00106/0.00115	657.59 secs	(8.245 secs)	0.298	0.298	0.014	0.014
0.00107/0.00115	665.71 secs	(8.121 secs)	0.299	0.299	0.014	0.014
0.00108/0.00115	673.68 secs	(7.97 secs)	0.302	0.302	0.014	0.014
0.00109/0.00115	681.89 secs	(8.217 secs)	0.304	0.304	0.015	0.015
0.00110/0.00115	689.93 secs	(8.036 secs)	0.306	0.306	0.014	0.014
0.00111/0.00115	698.19 secs	(8.257 secs)	0.309	0.309	0.015	0.015
0.00112/0.00115	706.25 secs	(8.063 secs)	0.311	0.311	0.015	0.015
0.00113/0.00115	714.34 secs	(8.095 secs)	0.313	0.313	0.014	0.014
0.00114/0.00115	722.55 secs	(8.204 secs)	0.315	0.315	0.015	0.015
0.00115/0.00115	730.72 secs	(8.17 secs)	0.317	0.317	0.015	0.015
> 
> proc.time()
     user    system   elapsed 
16276.778   302.555   743.120 
