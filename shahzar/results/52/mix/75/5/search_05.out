
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_mix <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # The SAR is the average SAR for each individual that was infectious.
+   sar <- mean(results$I_NUM / results$S_NUM, na.rm = T)
+   
+   # The proportion of cases caused by household infections.
+   cases <- results[!is.na(results$TIME), ]
+   prp <- mean((cases$TYPE != 'E') & (cases$TYPE != '0'))
+ 
+   return(c(idc, sar, prp))
+ }
> 
> beta_Hs <- seq(40, 44, 1) # 5
> beta_Cs <- seq(0.02, 0.04, 0.001) # 21
> beta_Es <- seq(0.00001, 0.00006, 0.00001) # 6
> 
> d_H <- length(beta_Hs)
> d_C <- length(beta_Cs)
> d_E <- length(beta_Es)
> 
> reps <- 200
> idcs <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> sars <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> prps <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> t_tot <- 0
> for (i in 1:d_H) {
+   for (j in 1:d_C) {
+     for (k in 1:d_E) {
+       beta_H <- beta_Hs[i]
+       beta_C <- beta_Cs[j]
+       beta_E <- beta_Es[k]
+       
+       params <- c(beta_H, beta_C, beta_E)
+       
+       cat(paste0(format(beta_H, nsmall = 0), '/30\t', 
+                  format(beta_C, nsmall = 3), '/0.065\t',
+                  format(beta_E, nsmall = 5, scientific = F), '/0.00010\t'))
+         
+       t_0 <- Sys.time()
+       vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+         results <- SEIR_mix(params) 
+         metrics(results)
+       }
+       t_1 <- Sys.time()
+       t_tot <- t_tot + (t_1 - t_0)
+         
+       cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+                  format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+       
+       vals <- matrix(vals, reps, byrow = T)
+       idcs[i, j, k, ] <- vals[, 1]
+       sars[i, j, k, ] <- vals[, 2]
+       prps[i, j, k, ] <- vals[, 3]
+         
+       cat(paste0(format(round(mean(vals[, 1]), 3), nsmall = 3), '\t', 
+                  format(round(mean(vals[, 2]), 3), nsmall = 3), '\t', 
+                  format(round(mean(vals[, 3]), 3), nsmall = 3), '\n'))
+     }
+     cat('\n')
+     saveRDS(idcs, file = 'idcs.rds')
+     saveRDS(sars, file = 'sars.rds')
+     saveRDS(prps, file = 'prps.rds')
+     
+     write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
+     write.table(prps, file = 'prps.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
40/30	0.020/0.065	0.00001/0.00010	46.55 secs	(46.55 secs)	0.011	NaN	NaN
40/30	0.020/0.065	0.00002/0.00010	99.81 secs	(53.27 secs)	0.020	0.227	0.622
40/30	0.020/0.065	0.00003/0.00010	157.36 secs	(57.54 secs)	0.032	0.242	0.658
40/30	0.020/0.065	0.00004/0.00010	217.08 secs	(59.72 secs)	0.038	0.236	0.652
40/30	0.020/0.065	0.00005/0.00010	280.72 secs	(1.061 mins)	0.051	0.240	0.665
40/30	0.020/0.065	0.00006/0.00010	350.21 secs	(1.158 mins)	0.060	0.243	0.665

40/30	0.021/0.065	0.00001/0.00010	398.28 secs	(48.07 secs)	0.011	NaN	NaN
40/30	0.021/0.065	0.00002/0.00010	451.74 secs	(53.46 secs)	0.021	0.243	0.642
40/30	0.021/0.065	0.00003/0.00010	508.42 secs	(56.68 secs)	0.032	0.243	0.662
40/30	0.021/0.065	0.00004/0.00010	572.33 secs	(1.065 mins)	0.043	0.240	0.666
40/30	0.021/0.065	0.00005/0.00010	638.08 secs	(1.096 mins)	0.054	0.246	0.674
40/30	0.021/0.065	0.00006/0.00010	707.29 secs	(1.154 mins)	0.062	0.237	0.672

40/30	0.022/0.065	0.00001/0.00010	755.02 secs	(47.73 secs)	0.010	NaN	NaN
40/30	0.022/0.065	0.00002/0.00010	809.41 secs	(54.39 secs)	0.022	0.231	0.638
40/30	0.022/0.065	0.00003/0.00010	868.26 secs	(58.85 secs)	0.033	0.247	0.675
40/30	0.022/0.065	0.00004/0.00010	932.98 secs	(1.079 mins)	0.045	0.246	0.674
40/30	0.022/0.065	0.00005/0.00010	998.72 secs	(1.096 mins)	0.053	0.239	0.674
40/30	0.022/0.065	0.00006/0.00010	1069.00 secs	(1.171 mins)	0.064	0.238	0.674

40/30	0.023/0.065	0.00001/0.00010	1118.61 secs	(49.61 secs)	0.011	NaN	NaN
40/30	0.023/0.065	0.00002/0.00010	1172.39 secs	(53.78 secs)	0.021	0.220	0.613
40/30	0.023/0.065	0.00003/0.00010	1231.82 secs	(59.43 secs)	0.031	0.233	0.652
40/30	0.023/0.065	0.00004/0.00010	1294.18 secs	(1.039 mins)	0.044	0.239	0.679
40/30	0.023/0.065	0.00005/0.00010	1361.10 secs	(1.115 mins)	0.055	0.247	0.680
40/30	0.023/0.065	0.00006/0.00010	1428.92 secs	(1.13 mins)	0.064	0.238	0.684

40/30	0.024/0.065	0.00001/0.00010	1476.90 secs	(47.99 secs)	0.012	NaN	NaN
40/30	0.024/0.065	0.00002/0.00010	1531.93 secs	(55.02 secs)	0.023	0.236	0.662
40/30	0.024/0.065	0.00003/0.00010	1590.71 secs	(58.78 secs)	0.035	0.240	0.676
40/30	0.024/0.065	0.00004/0.00010	1652.81 secs	(1.035 mins)	0.044	0.245	0.686
40/30	0.024/0.065	0.00005/0.00010	1718.87 secs	(1.101 mins)	0.055	0.241	0.688
40/30	0.024/0.065	0.00006/0.00010	1790.27 secs	(1.19 mins)	0.064	0.241	0.683

40/30	0.025/0.065	0.00001/0.00010	1840.38 secs	(50.11 secs)	0.012	NaN	NaN
40/30	0.025/0.065	0.00002/0.00010	1894.62 secs	(54.24 secs)	0.022	NaN	NaN
40/30	0.025/0.065	0.00003/0.00010	1951.25 secs	(56.63 secs)	0.033	0.237	0.675
40/30	0.025/0.065	0.00004/0.00010	2012.16 secs	(1.015 mins)	0.044	0.241	0.686
40/30	0.025/0.065	0.00005/0.00010	2080.28 secs	(1.135 mins)	0.057	0.238	0.692
40/30	0.025/0.065	0.00006/0.00010	2154.26 secs	(1.233 mins)	0.067	0.240	0.689

40/30	0.026/0.065	0.00001/0.00010	2203.00 secs	(48.74 secs)	0.012	NaN	NaN
40/30	0.026/0.065	0.00002/0.00010	2257.18 secs	(54.19 secs)	0.022	0.234	0.664
40/30	0.026/0.065	0.00003/0.00010	2315.52 secs	(58.34 secs)	0.034	0.241	0.678
40/30	0.026/0.065	0.00004/0.00010	2378.84 secs	(1.055 mins)	0.046	0.234	0.679
40/30	0.026/0.065	0.00005/0.00010	2448.30 secs	(1.158 mins)	0.056	0.239	0.697
40/30	0.026/0.065	0.00006/0.00010	2519.36 secs	(1.184 mins)	0.066	0.236	0.689

40/30	0.027/0.065	0.00001/0.00010	2567.24 secs	(47.88 secs)	0.011	NaN	NaN
40/30	0.027/0.065	0.00002/0.00010	2623.21 secs	(55.97 secs)	0.025	NaN	NaN
40/30	0.027/0.065	0.00003/0.00010	2682.88 secs	(59.67 secs)	0.036	0.242	0.686
40/30	0.027/0.065	0.00004/0.00010	2747.75 secs	(1.081 mins)	0.046	0.235	0.684
40/30	0.027/0.065	0.00005/0.00010	2814.75 secs	(1.117 mins)	0.056	0.241	0.696
40/30	0.027/0.065	0.00006/0.00010	2885.50 secs	(1.179 mins)	0.067	0.239	0.700

40/30	0.028/0.065	0.00001/0.00010	2933.13 secs	(47.63 secs)	0.012	NaN	NaN
40/30	0.028/0.065	0.00002/0.00010	2988.87 secs	(55.74 secs)	0.025	0.242	0.690
40/30	0.028/0.065	0.00003/0.00010	3047.95 secs	(59.08 secs)	0.036	0.249	0.703
40/30	0.028/0.065	0.00004/0.00010	3111.29 secs	(1.056 mins)	0.046	0.241	0.700
40/30	0.028/0.065	0.00005/0.00010	3181.60 secs	(1.172 mins)	0.059	0.247	0.705
40/30	0.028/0.065	0.00006/0.00010	3255.12 secs	(1.225 mins)	0.069	0.239	0.705

40/30	0.029/0.065	0.00001/0.00010	3304.61 secs	(49.49 secs)	0.012	NaN	NaN
40/30	0.029/0.065	0.00002/0.00010	3359.16 secs	(54.55 secs)	0.026	0.236	0.676
40/30	0.029/0.065	0.00003/0.00010	3418.86 secs	(59.70 secs)	0.037	0.234	0.693
40/30	0.029/0.065	0.00004/0.00010	3486.00 secs	(1.119 mins)	0.050	0.244	0.707
40/30	0.029/0.065	0.00005/0.00010	3556.42 secs	(1.174 mins)	0.057	0.237	0.697
40/30	0.029/0.065	0.00006/0.00010	3630.23 secs	(1.23 mins)	0.068	0.242	0.712

40/30	0.030/0.065	0.00001/0.00010	3679.75 secs	(49.52 secs)	0.013	NaN	NaN
40/30	0.030/0.065	0.00002/0.00010	3734.25 secs	(54.50 secs)	0.024	0.231	0.664
40/30	0.030/0.065	0.00003/0.00010	3793.60 secs	(59.35 secs)	0.037	0.232	0.695
40/30	0.030/0.065	0.00004/0.00010	3861.69 secs	(1.135 mins)	0.051	0.238	0.717
40/30	0.030/0.065	0.00005/0.00010	