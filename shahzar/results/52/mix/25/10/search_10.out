
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_mix <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # The SAR is the average SAR for each individual that was infectious.
+   sar <- mean(results$I_NUM / results$S_NUM, na.rm = T)
+   
+   # The proportion of cases caused by household infections.
+   cases <- results[!is.na(results$TIME), ]
+   prp <- mean((cases$TYPE == 'H') | (cases$TYPE == 'HC') | (cases$TYPE == 'HCE'))
+ 
+   return(c(idc, sar, prp))
+ }
> 
> beta_Hs <- seq(10, 13, 1) # 4
> beta_Cs <- seq(0, 0.005, 0.001) # 6
> beta_Es <- seq(0.00015, 0.00035, 0.00001) # 21
> 
> d_H <- length(beta_Hs)
> d_C <- length(beta_Cs)
> d_E <- length(beta_Es)
> 
> reps <- 50
> idcs <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> sars <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> prps <- array(rep(NA, d_H * d_C * d_E * reps), dim = c(d_H, d_C, d_E, reps))
> t_tot <- 0
> for (i in 1:d_H) {
+   for (j in 1:d_C) {
+     for (k in 1:d_E) {
+       beta_H <- beta_Hs[i]
+       beta_C <- beta_Cs[j]
+       beta_E <- beta_Es[k]
+       
+       params <- c(beta_H, beta_C, beta_E)
+       
+       cat(paste0(format(beta_H, nsmall = 0), '/13\t', 
+                  format(beta_C, nsmall = 3), '/0.005\t',
+                  format(beta_E, nsmall = 5, scientific = F), '/0.00035\t'))
+         
+       t_0 <- Sys.time()
+       vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+         results <- SEIR_mix(params) 
+         metrics(results)
+       }
+       t_1 <- Sys.time()
+       t_tot <- t_tot + (t_1 - t_0)
+         
+       cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+                  format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+       
+       vals <- matrix(vals, reps, byrow = T)
+       idcs[i, j, k, ] <- vals[, 1]
+       sars[i, j, k, ] <- vals[, 2]
+       prps[i, j, k, ] <- vals[, 3]
+         
+       cat(paste0(format(round(mean(vals[, 1]), 3), nsmall = 3), '\t', 
+                  format(round(mean(vals[, 2]), 3), nsmall = 3), '\t', 
+                  format(round(mean(vals[, 3]), 3), nsmall = 3), '\n'))
+     }
+     cat('\n')
+     saveRDS(idcs, file = 'idcs.rds')
+     saveRDS(sars, file = 'sars.rds')
+     saveRDS(prps, file = 'prps.rds')
+     
+     write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars.txt', row.names = F, col.names = F)
+     write.table(prps, file = 'prps.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
10/13	0.000/0.005	0.00015/0.00035	26.76 secs	(26.76 secs)	0.061	0.069	0.214
10/13	0.000/0.005	0.00016/0.00035	52.75 secs	(25.99 secs)	0.066	0.074	0.219
10/13	0.000/0.005	0.00017/0.00035	78.11 secs	(25.36 secs)	0.066	0.067	0.206
10/13	0.000/0.005	0.00018/0.00035	105.30 secs	(27.19 secs)	0.073	0.066	0.207
10/13	0.000/0.005	0.00019/0.00035	131.44 secs	(26.14 secs)	0.077	0.062	0.193
10/13	0.000/0.005	0.00020/0.00035	158.09 secs	(26.65 secs)	0.082	0.070	0.215
10/13	0.000/0.005	0.00021/0.00035	186.58 secs	(28.49 secs)	0.083	0.072	0.221
10/13	0.000/0.005	0.00022/0.00035	216.78 secs	(30.20 secs)	0.089	0.068	0.208
10/13	0.000/0.005	0.00023/0.00035	246.58 secs	(29.80 secs)	0.091	0.063	0.195
10/13	0.000/0.005	0.00024/0.00035	276.13 secs	(29.55 secs)	0.095	0.063	0.193
10/13	0.000/0.005	0.00025/0.00035	306.01 secs	(29.88 secs)	0.097	0.065	0.200
10/13	0.000/0.005	0.00026/0.00035	337.83 secs	(31.82 secs)	0.104	0.067	0.210
10/13	0.000/0.005	0.00027/0.00035	369.39 secs	(31.56 secs)	0.108	0.070	0.210
10/13	0.000/0.005	0.00028/0.00035	401.04 secs	(31.65 secs)	0.108	0.064	0.194
10/13	0.000/0.005	0.00029/0.00035	433.03 secs	(31.98 secs)	0.112	0.069	0.206
10/13	0.000/0.005	0.00030/0.00035	466.79 secs	(33.76 secs)	0.117	0.067	0.206
10/13	0.000/0.005	0.00031/0.00035	500.13 secs	(33.34 secs)	0.121	0.066	0.199
10/13	0.000/0.005	0.00032/0.00035	534.06 secs	(33.93 secs)	0.126	0.068	0.208
10/13	0.000/0.005	0.00033/0.00035	568.36 secs	(34.31 secs)	0.130	0.068	0.208
10/13	0.000/0.005	0.00034/0.00035	603.68 secs	(35.32 secs)	0.135	0.069	0.207
10/13	0.000/0.005	0.00035/0.00035	639.33 secs	(35.65 secs)	0.136	0.067	0.198

10/13	0.001/0.005	0.00015/0.00035	665.46 secs	(26.12 secs)	0.061	0.065	0.198
10/13	0.001/0.005	0.00016/0.00035	691.99 secs	(26.54 secs)	0.067	0.068	0.213
10/13	0.001/0.005	0.00017/0.00035	720.09 secs	(28.10 secs)	0.070	0.066	0.206
10/13	0.001/0.005	0.00018/0.00035	746.95 secs	(26.86 secs)	0.071	0.062	0.192
10/13	0.001/0.005	0.00019/0.00035	775.43 secs	(28.49 secs)	0.076	0.070	0.212
10/13	0.001/0.005	0.00020/0.00035	804.36 secs	(28.93 secs)	0.083	0.066	0.208
10/13	0.001/0.005	0.00021/0.00035	833.58 secs	(29.21 secs)	0.088	0.065	0.200
10/13	0.001/0.005	0.00022/0.00035	864.61 secs	(31.03 secs)	0.086	0.066	0.196
10/13	0.001/0.005	0.00023/0.00035	895.66 secs	(31.05 secs)	0.095	0.072	0.218
10/13	0.001/0.005	0.00024/0.00035	925.34 secs	(29.68 secs)	0.096	0.065	0.196
10/13	0.001/0.005	0.00025/0.00035	957.02 secs	(31.67 secs)	0.100	0.063	0.193
10/13	0.001/0.005	0.00026/0.00035	989.83 secs	(32.81 secs)	0.105	0.071	0.206
10/13	0.001/0.005	0.00027/0.00035	1021.83 secs	(32.00 secs)	0.107	0.064	0.197
10/13	0.001/0.005	0.00028/0.00035	1053.37 secs	(31.54 secs)	0.110	0.069	0.206
10/13	0.001/0.005	0.00029/0.00035	1084.68 secs	(31.31 secs)	0.113	0.067	0.203
10/13	0.001/0.005	0.00030/0.00035	1118.16 secs	(33.48 secs)	0.118	0.064	0.197
10/13	0.001/0.005	0.00031/0.00035	1151.78 secs	(33.62 secs)	0.121	0.066	0.198
10/13	0.001/0.005	0.00032/0.00035	1186.09 secs	(34.31 secs)	0.126	0.064	0.191
10/13	0.001/0.005	0.00033/0.00035	1220.21 secs	(34.12 secs)	0.127	0.063	0.191
10/13	0.001/0.005	0.00034/0.00035	1256.41 secs	(36.20 secs)	0.135	0.068	0.206
10/13	0.001/0.005	0.00035/0.00035	1293.20 secs	(36.79 secs)	0.136	0.068	0.201

10/13	0.002/0.005	0.00015/0.00035	1320.37 secs	(27.17 secs)	0.062	0.066	0.204
10/13	0.002/0.005	0.00016/0.00035	1346.68 secs	(26.31 secs)	0.066	0.067	0.203
10/13	0.002/0.005	0.00017/0.00035	1373.21 secs	(26.53 secs)	0.070	0.065	0.202
10/13	0.002/0.005	0.00018/0.00035	1400.73 secs	(27.52 secs)	0.074	0.062	0.191
10/13	0.002/0.005	0.00019/0.00035	1430.71 secs	(29.99 secs)	0.078	0.066	0.203
10/13	0.002/0.005	0.00020/0.00035	1458.88 secs	(28.17 secs)	0.082	0.068	0.213
10/13	0.002/0.005	0.00021/0.00035	1488.23 secs	(29.35 secs)	0.083	0.067	0.203
10/13	0.002/0.005	0.00022/0.00035	1519.11 secs	(30.88 secs)	0.089	0.067	0.203
10/13	0.002/0.005	0.00023/0.00035	1548.92 secs	(29.81 secs)	0.091	0.071	0.218
10/13	0.002/0.005	0.00024/0.00035	1579.97 secs	(31.06 secs)	0.093	0.068	0.206
10/13	0.002/0.005	0.00025/0.00035	1611.83 secs	(31.86 secs)	0.099	0.067	0.200
10/13	0.002/0.005	0.00026/0.00035	1643.97 secs	(32.14 secs)	0.104	0.069	0.208
10/13	0.002/0.005	0.00027/0.00035	1675.89 secs	(31.92 secs)	0.106	0.067	0.207
10/13	0.002/0.005	0.00028/0.00035	1708.45 secs	(32.56 secs)	0.112	0.069	0.207
10/13	0.002/0.005	0.00029/0.00035	1741.89 secs	(33.43 secs)	0.118	0.070	0.211
10/13	0.002/0.005	0.00030/0.00035	1774.31 secs	(32.43 secs)	0.117	0.066	0.199
10/13	0.002/0.005	0.00031/0.00035	1807.40 secs	(33.08 secs)	0.122	0.069	0.208
10/13	0.002/0.005	0.00032/0.00035	1840.91 secs	(33.52 secs)	0.126	0.068	0.207
10/13	0.002/0.005	0.00033/0.00035	1874.90 secs	(33.98 secs)	0.132	0.067	0.201
10/13	0.002/0.005	0.00034/0.00035	1909.94 secs	(35.04 secs)	0.138	0.069	0.207
10/13	0.002/0.005	0.00035/0.00035	1943.88 secs	(33.94 secs)	0.140	0.068	0.203

10/13	0.003/0.005	0.00015/0.00035	1968.94 secs	(25.06 secs)	0.062	0.065	0.200
10/13	0.003/0.005	0.00016/0.00035	1995.16 secs	(26.22 secs)	0.068	0.066	0.211
10/13	0.003/0.005	0.00017/0.00035	2020.85 secs	(25.69 secs)	0.070	0.060	0.194
10/13	0.003/0.005	0.00018/0.00035	2047.58 secs	(26.73 secs)	0.076	0.065	0.202
10/13	0.003/0.005	0.00019/0.00035	2075.52 secs	(27.94 secs)	0.076	0.066	0.202
10/13	0.003/0.005	0.00020/0.00035	2103.79 secs	(28.27 secs)	0.082	0.068	0.203
10/13	0.003/0.005	0.00021/0.00035	2132.48 secs	(28.69 secs)	0.087	0.067	0.208
10/13	0.003/0.005	0.00022/0.00035	2161.04 secs	(28.56 secs)	0.086	0.067	0.205
10/13	0.003/0.005	0.00023/0.00035	