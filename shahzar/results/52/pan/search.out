
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR_pan <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(round(rlnorm(1, meanlog = log(29.8), sdlog = 0.45)), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+     
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       results$TIME[new_inf] <- t
+     }
+     
+     # risk is proportional to number infected, leading to exponential growth.
+     beta_E <- params[1] 
+     risk_E <- pmin(beta_E * data$S  * sum(data$I) / N, 1)
+     
+     new_exposed <- rbinom(N, 1, risk_E)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if(num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed == 1] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed == 1] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed == 1] <- 0
+         
+       # Label infection types.
+       results$TYPE[new_exposed == 1] <- 'E'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   return(c(idc))
+ }
> 
> beta_Es <- c(seq(0.164, 0.168, 0.0001), seq(0.196, 0.200, 0.0001), seq(0.250, 0.254, 0.0001)) # 123
> 
> d_E <- length(beta_Es)
> 
> reps <- 5000
> idcs <- array(rep(NA, d_E * reps), dim = c(d_E, reps))
> t_tot <- 0
> for (i in 1:d_E) {
+   beta_E <- beta_Es[i]
+   params <- c(beta_E)
+ 
+   cat(paste0(format(beta_E, nsmall = 4, digits = 4, scientific = F), '/0.254\t'))
+ 
+   t_0 <- Sys.time()
+   vals <- foreach (l = 1:reps, .combine = 'c') %dopar% {
+     results <- SEIR_pan(params) 
+     metrics(results)
+   }
+   t_1 <- Sys.time()
+   t_tot <- t_tot + (t_1 - t_0)
+ 
+   cat(paste0(format(t_tot, nsmall = 2, digits = 4), '\t(', 
+              format(t_1 - t_0, nsmall = 2, digits = 4), ')\t'))
+ 
+   vals <- matrix(vals, reps, byrow = T)
+   idcs[i, ] <- vals[, 1]
+ 
+       cat(paste0(format(round(mean(idcs[i, ]), 3), nsmall = 3), '\t',
+                  format(round(sd(idcs[i, ]), 3), nsmall = 3), '\t',
+                  format(round(mean(idcs[i, idcs[i, ] > 0.01]), 3), nsmall = 3), '\t',
+                  format(round(sd(idcs[i, idcs[i, ] > 0.01]), 3), nsmall = 3), '\t', 
+                  length(idcs[i, idcs[i, ] > 0.01])/reps, '\n'))
+ 
+   saveRDS(idcs, file = 'idcs.rds')
+   write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+ }
0.1640/0.254	22.15 secs	(22.15 secs)	0.017	0.028	0.046	0.032	0.3454
0.1641/0.254	44.15 secs	(22.00 secs)	0.018	0.028	0.047	0.032	0.3506
0.1642/0.254	66.19 secs	(22.04 secs)	0.018	0.029	0.047	0.033	0.3564
0.1643/0.254	88.62 secs	(22.43 secs)	0.019	0.030	0.048	0.034	0.3534
0.1644/0.254	111.04 secs	(22.42 secs)	0.019	0.029	0.047	0.033	0.3614
0.1645/0.254	133.42 secs	(22.38 secs)	0.018	0.029	0.048	0.033	0.3514
0.1646/0.254	155.76 secs	(22.34 secs)	0.019	0.029	0.048	0.033	0.3514
0.1647/0.254	178.42 secs	(22.67 secs)	0.019	0.029	0.048	0.033	0.353
0.1648/0.254	200.66 secs	(22.23 secs)	0.018	0.028	0.046	0.032	0.3542
0.1649/0.254	222.95 secs	(22.30 secs)	0.019	0.029	0.048	0.033	0.3574
0.1650/0.254	245.32 secs	(22.37 secs)	0.019	0.030	0.048	0.034	0.36
0.1651/0.254	267.26 secs	(21.94 secs)	0.019	0.029	0.048	0.033	0.3524
0.1652/0.254	289.42 secs	(22.16 secs)	0.019	0.030	0.048	0.033	0.363
0.1653/0.254	311.75 secs	(22.33 secs)	0.019	0.030	0.048	0.033	0.3668
0.1654/0.254	334.25 secs	(22.49 secs)	0.019	0.029	0.047	0.033	0.3696
0.1655/0.254	357.00 secs	(22.76 secs)	0.019	0.030	0.048	0.034	0.3562
0.1656/0.254	379.96 secs	(22.96 secs)	0.019	0.029	0.048	0.033	0.3544
0.1657/0.254	402.29 secs	(22.33 secs)	0.019	0.030	0.048	0.035	0.3586
0.1658/0.254	424.98 secs	(22.68 secs)	0.019	0.030	0.049	0.034	0.3522
0.1659/0.254	447.55 secs	(22.58 secs)	0.020	0.031	0.050	0.034	0.3634
0.1660/0.254	469.89 secs	(22.33 secs)	0.019	0.030	0.048	0.034	0.3596
0.1661/0.254	492.30 secs	(22.41 secs)	0.019	0.029	0.048	0.033	0.356
0.1662/0.254	514.65 secs	(22.35 secs)	0.019	0.030	0.049	0.035	0.3614
0.1663/0.254	537.15 secs	(22.50 secs)	0.019	0.031	0.049	0.036	0.3624
0.1664/0.254	559.63 secs	(22.48 secs)	0.019	0.030	0.049	0.034	0.366
0.1665/0.254	581.70 secs	(22.07 secs)	0.020	0.031	0.051	0.036	0.352
0.1666/0.254	603.79 secs	(22.09 secs)	0.019	0.030	0.048	0.033	0.3664
0.1667/0.254	626.13 secs	(22.35 secs)	0.019	0.030	0.048	0.033	0.3686
0.1668/0.254	648.55 secs	(22.41 secs)	0.020	0.032	0.050	0.036	0.3694
0.1669/0.254	671.17 secs	(22.62 secs)	0.020	0.031	0.050	0.035	0.372
0.1670/0.254	693.53 secs	(22.36 secs)	0.020	0.032	0.050	0.037	0.3766
0.1671/0.254	716.35 secs	(22.83 secs)	0.020	0.031	0.049	0.035	0.3654
0.1672/0.254	738.74 secs	(22.39 secs)	0.020	0.031	0.049	0.034	0.3738
0.1673/0.254	761.38 secs	(22.64 secs)	0.019	0.030	0.049	0.034	0.3602
0.1674/0.254	783.93 secs	(22.55 secs)	0.020	0.032	0.050	0.036	0.3688
0.1675/0.254	806.36 secs	(22.43 secs)	0.020	0.032	0.051	0.037	0.3648
0.1676/0.254	828.62 secs	(22.25 secs)	0.019	0.031	0.049	0.035	0.3644
0.1677/0.254	851.23 secs	(22.61 secs)	0.020	0.032	0.051	0.036	0.359
0.1678/0.254	873.86 secs	(22.63 secs)	0.020	0.031	0.050	0.035	0.3572
0.1679/0.254	896.57 secs	(22.71 secs)	0.021	0.033	0.051	0.036	0.3842
0.1680/0.254	918.74 secs	(22.17 secs)	0.021	0.033	0.052	0.037	0.3676
0.1960/0.254	942.91 secs	(24.17 secs)	0.049	0.066	0.095	0.066	0.4974
0.1961/0.254	967.53 secs	(24.62 secs)	0.051	0.068	0.096	0.068	0.5144
0.1962/0.254	992.12 secs	(24.58 secs)	0.050	0.068	0.096	0.070	0.511
0.1963/0.254	1016.59 secs	(24.47 secs)	0.049	0.067	0.095	0.067	0.5056
0.1964/0.254	1040.97 secs	(24.38 secs)	0.049	0.067	0.095	0.068	0.5018
0.1965/0.254	1065.30 secs	(24.33 secs)	0.050	0.068	0.097	0.070	0.504
0.1966/0.254	1089.97 secs	(24.67 secs)	0.050	0.067	0.095	0.067	0.5148
0.1967/0.254	1114.63 secs	(24.66 secs)	0.051	0.068	0.096	0.068	0.518
0.1968/0.254	1139.12 secs	(24.49 secs)	0.050	0.068	0.098	0.068	0.494
0.1969/0.254	1163.18 secs	(24.07 secs)	0.049	0.067	0.095	0.069	0.5
0.1970/0.254	1187.60 secs	(24.42 secs)	0.051	0.070	0.100	0.072	0.5006
0.1971/0.254	1212.22 secs	(24.62 secs)	0.053	0.070	0.098	0.071	0.5322
0.1972/0.254	1236.73 secs	(24.51 secs)	0.050	0.067	0.095	0.067	0.5086
0.1973/0.254	1260.98 secs	(24.24 secs)	0.053	0.069	0.099	0.068	0.525
0.1974/0.254	1285.51 secs	(24.54 secs)	0.052	0.071	0.099	0.072	0.5138
0.1975/0.254	1310.28 secs	(24.77 secs)	0.051	0.069	0.097	0.070	0.5138
0.1976/0.254	1334.75 secs	(24.48 secs)	0.051	0.068	0.096	0.068	0.516
0.1977/0.254	1359.69 secs	(24.94 secs)	0.052	0.071	0.099	0.072	0.5116
0.1978/0.254	1384.29 secs	(24.60 secs)	0.052	0.071	0.099	0.072	0.511
0.1979/0.254	1409.21 secs	(24.92 secs)	0.054	0.071	0.101	0.071	0.519
0.1980/0.254	1433.91 secs	(24.70 secs)	0.052	0.070	0.099	0.070	0.5194
0.1981/0.254	1458.70 secs	(24.80 secs)	0.054	0.071	0.101	0.071	0.5242
0.1982/0.254	1483.34 secs	(24.64 secs)	0.054	0.071	0.102	0.071	0.5178
0.1983/0.254	1508.22 secs	(24.88 secs)	0.052	0.069	0.098	0.069	0.516
0.1984/0.254	1533.23 secs	(25.01 secs)	0.053	0.070	0.099	0.071	0.5202
0.1985/0.254	1557.80 secs	(24.57 secs)	0.052	0.071	0.100	0.072	0.5102
0.1986/0.254	1582.57 secs	(24.77 secs)	0.055	0.074	0.105	0.074	0.5158
0.1987/0.254	1607.82 secs	(25.25 secs)	0.055	0.073	0.102	0.073	0.523
0.1988/0.254	1632.09 secs	(24.27 secs)	0.054	0.073	0.103	0.073	0.5144
0.1989/0.254	1656.66 secs	(24.57 secs)	0.055	0.072	0.102	0.073	0.5248
0.1990/0.254	1681.53 secs	(24.87 secs)	0.054	0.072	0.102	0.072	0.5156
0.1991/0.254	1706.40 secs	(24.88 secs)	0.053	0.071	0.101	0.071	0.5142
0.1992/0.254	1731.04 secs	(24.64 secs)	0.055	0.073	0.102	0.074	0.5272
0.1993/0.254	1755.96 secs	(24.92 secs)	0.056	0.073	0.104	0.073	0.53
0.1994/0.254	1780.65 secs	(24.70 secs)	0.055	0.073	0.104	0.073	0.522
0.1995/0.254	1805.59 secs	(24.94 secs)	0.055	0.072	0.103	0.071	0.5274
0.1996/0.254	1830.43 secs	(24.84 secs)	0.055	0.073	0.104	0.074	0.5192
0.1997/0.254	1855.30 secs	(24.87 secs)	0.056	0.074	0.105	0.074	0.523
0.1998/0.254	1880.53 secs	(25.23 secs)	0.057	0.073	0.102	0.072	0.545
0.1999/0.254	1905.37 secs	(24.84 secs)	0.055	0.073	0.102	0.073	0.5218
0.2000/0.254	1929.95 secs	(24.58 secs)	0.056	0.074	0.103	0.074	0.5294
0.2500/0.254	1959.97 secs	(30.02 secs)	0.205	0.185	0.289	0.155	0.7072
0.2501/0.254	1990.11 secs	(30.15 secs)	0.205	0.185	0.290	0.155	0.7052
0.2502/0.254	2019.82 secs	(29.71 secs)	0.205	0.186	0.289	0.157	0.707
0.2503/0.254	2050.13 secs	(30.31 secs)	0.209	0.186	0.292	0.156	0.7132
0.2504/0.254	2080.41 secs	(30.28 secs)	0.208	0.187	0.291	0.159	0.7134
0.2505/0.254	2110.75 secs	(30.34 secs)	0.205	0.188	0.291	0.160	0.7048
0.2506/0.254	2141.21 secs	(30.47 secs)	0.207	0.189	0.292	0.161	0.7074
0.2507/0.254	2171.52 secs	(30.31 secs)	0.208	0.188	0.295	0.158	0.7046
0.2508/0.254	2201.74 secs	(30.21 secs)	0.206	0.185	0.287	0.158	0.7162
0.2509/0.254	2232.12 secs	(30.38 secs)	0.207	0.187	0.292	0.157	0.7052
0.2510/0.254	2262.41 secs	(30.30 secs)	0.210	0.186	0.291	0.157	0.7196
0.2511/0.254	2292.46 secs	(30.05 secs)	0.210	0.189	0.295	0.159	0.71
0.2512/0.254	2322.51 secs	(30.05 secs)	0.213	0.188	0.297	0.157	0.7166
0.2513/0.254	2352.79 secs	(30.28 secs)	0.209	0.188	0.296	0.157	0.705
0.2514/0.254	2382.99 secs	(30.19 secs)	0.210	0.188	0.296	0.157	0.708
0.2515/0.254	2413.38 secs	(30.40 secs)	0.212	0.191	0.298	0.161	0.7092
0.2516/0.254	2443.10 secs	(29.72 secs)	0.211	0.190	0.298	0.160	0.7042
0.2517/0.254	2473.54 secs	(30.44 secs)	0.207	0.189	0.295	0.158	0.6982
0.2518/0.254	2503.91 secs	(30.37 secs)	0.214	0.190	0.301	0.157	0.7098
0.2519/0.254	2534.25 secs	(30.34 secs)	0.215	0.189	0.299	0.158	0.7178
0.2520/0.254	2564.34 secs	(30.09 secs)	0.213	0.191	0.301	0.159	0.705
0.2521/0.254	2594.97 secs	(30.63 secs)	0.219	0.191	0.303	0.158	0.72
0.2522/0.254	2625.51 secs	(30.54 secs)	0.214	0.190	0.298	0.159	0.7172
0.2523/0.254	2655.75 secs	(30.24 secs)	0.210	0.192	0.299	0.162	0.7004
0.2524/0.254	2685.93 secs	(30.18 secs)	0.211	0.191	0.299	0.161	0.7022
0.2525/0.254	2716.15 secs	(30.22 secs)	0.214	0.193	0.302	0.162	0.7068
0.2526/0.254	2746.56 secs	(30.41 secs)	0.214	0.191	0.302	0.158	0.706
0.2527/0.254	2776.58 secs	(30.02 secs)	0.210	0.190	0.300	0.159	0.6996
0.2528/0.254	2807.40 secs	(30.82 secs)	0.220	0.193	0.305	0.160	0.7184
0.2529/0.254	2837.85 secs	(30.45 secs)	0.219	0.193	0.308	0.158	0.7098
0.2530/0.254	2868.11 secs	(30.26 secs)	0.220	0.193	0.305	0.161	0.7186
0.2531/0.254	2898.06 secs	(29.95 secs)	0.219	0.194	0.308	0.162	0.7088
0.2532/0.254	2928.19 secs	(30.13 secs)	0.214	0.194	0.303	0.163	0.7042
0.2533/0.254	2958.21 secs	(30.02 secs)	0.213	0.194	0.304	0.162	0.6968
0.2534/0.254	2988.94 secs	(30.73 secs)	0.223	0.195	0.308	0.163	0.7244
0.2535/0.254	3019.41 secs	(30.46 secs)	0.222	0.197	0.313	0.164	0.7098
0.2536/0.254	3050.17 secs	(30.76 secs)	0.221	0.195	0.309	0.163	0.7132
0.2537/0.254	3081.22 secs	(31.05 secs)	0.221	0.196	0.308	0.164	0.7168
0.2538/0.254	3111.74 secs	(30.52 secs)	0.224	0.195	0.310	0.163	0.7208
0.2539/0.254	3142.39 secs	(30.65 secs)	0.219	0.195	0.306	0.163	0.7116
0.2540/0.254	3173.36 secs	(30.98 secs)	0.227	0.197	0.316	0.162	0.7174
> 
> proc.time()
     user    system   elapsed 
71793.896   495.837  3238.861 
