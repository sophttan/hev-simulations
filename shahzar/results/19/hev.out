
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275325 14.8     662942 35.5   468594 25.1
Vcells 462880  3.6    8388608 64.0  1820267 13.9
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> # Use detectCores() to find out how many cores are available.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> pop <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < pop)]
+   
+   leftover <- pop - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(beta_H, beta_C, inc, inf, verbose = 0) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:pop,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, pop - 1)), 
+                     E = c(1, rep(0, pop - 1)),
+                     E_count = c(1, rep(0, pop - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, pop - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         message(t)
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious
+     # period is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation
+     # period is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     risk_H <- beta_H * data$S * I_data$I_H / pop
+     risk_C <- beta_C * data$S * I_data$I_C / pop
+     
+     # Each individual is infected from their household or 
+     # community independently with probabilities risk_H
+     # and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label infections.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the proportion of household infections is undefined.
+   prp <- NA
+   if (idc != 0) {
+     # The proportion of household infections is the proportion of infections that
+     # were from the household.
+     prp <- mean(results[!is.na(results$TIME), ]$TYPE == 'H')
+   }
+   return(c(idc, prp))
+ }
> 
> beta_Hs <- seq(10, 70, 1)
> beta_Cs <- seq(0, 1, 0.05)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 40
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> prps <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+       
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(beta_H, beta_C, inc, inf, verbose = F) 
+       metrics(results)
+     }
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     prps[i, j, ] <- vals[, 2]
+     message(paste0(beta_H, '/70\t', 
+                    format(beta_C, nsmall = 2), '/1.00\t',  
+                    format(t_tot, nsmall = 2), '\t(', format(t_1 - t_0, nsmall = 2), ')\t', 
+                    format(mean(vals[, 1]), nsmall = 3), '\t', 
+                    format(mean(vals[, 2]), nsmall = 3)))
+     write.table(idcs, file = 'idcs.txt', row.names = F, col.names = F)
+     write.table(prps, file = 'prps.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
10/70	0.00/1.00	16.32533 secs	(16.32533 secs)	0.001325	0.1458333
10/70	0.05/1.00	32.03892 secs	(15.71359 secs)	0.0018	0.1047619
10/70	0.10/1.00	46.29376 secs	(14.25485 secs)	0.00965	0.1389332
10/70	0.15/1.00	61.54108 secs	(15.24732 secs)	0.044175	0.08333949
10/70	0.20/1.00	77.17143 secs	(15.63035 secs)	0.235775	0.1129096
10/70	0.25/1.00	92.91787 secs	(15.74644 secs)	0.53585	0.1130231
10/70	0.30/1.00	109.785 secs	(16.8671 secs)	0.6558	0.09965512
10/70	0.35/1.00	127.7617 secs	(17.97675 secs)	0.837075	0.08629959
10/70	0.40/1.00	146.0744 secs	(18.31265 secs)	0.900875	0.07837389
10/70	0.45/1.00	164.8044 secs	(18.72999 secs)	0.939625	0.07173591
10/70	0.50/1.00	180.5784 secs	(15.77405 secs)	0.9278	0.06142485
10/70	0.55/1.00	197.2023 secs	(16.62385 secs)	0.983475	0.06105914
10/70	0.60/1.00	212.5515 secs	(15.34921 secs)	0.940225	0.05354558
10/70	0.65/1.00	226.5743 secs	(14.02282 secs)	0.993025	0.05044842
10/70	0.70/1.00	240.4604 secs	(13.88611 secs)	0.994675	0.04936355
10/70	0.75/1.00	254.2101 secs	(13.74975 secs)	0.99675	0.04406689
10/70	0.80/1.00	269.4291 secs	(15.21895 secs)	0.997875	0.04208789
10/70	0.85/1.00	287.7261 secs	(18.29699 secs)	0.99875	0.03782316
10/70	0.90/1.00	306.3978 secs	(18.67169 secs)	0.998875	0.0354404
10/70	0.95/1.00	324.7956 secs	(18.3978 secs)	0.999425	0.0334695
10/70	1.00/1.00	342.1848 secs	(17.38928 secs)	0.99945	0.03341825


11/70	0.00/1.00	360.6742 secs	(18.48939 secs)	0.0012	0.075
11/70	0.05/1.00	378.9448 secs	(18.27054 secs)	0.002675	0.1624811
11/70	0.10/1.00	397.1763 secs	(18.23154 secs)	0.0091	0.1442345
11/70	0.15/1.00	411.99 secs	(14.81364 secs)	0.041225	0.175073
11/70	0.20/1.00	425.9074 secs	(13.91744 secs)	0.19545	0.111367
11/70	0.25/1.00	440.2587 secs	(14.3513 secs)	0.5175	0.1148949
11/70	0.30/1.00	454.2667 secs	(14.00801 secs)	0.727725	0.1040406
11/70	0.35/1.00	468.6031 secs	(14.33634 secs)	0.745075	0.09634659
11/70	0.40/1.00	484.9688 secs	(16.36574 secs)	0.827975	0.0774384
11/70	0.45/1.00	503.4024 secs	(18.43366 secs)	0.91565	0.07475118
11/70	0.50/1.00	521.8786 secs	(18.47613 secs)	0.903475	0.06787369
11/70	0.55/1.00	539.9581 secs	(18.07949 secs)	0.9348	0.06286108
11/70	0.60/1.00	558.2811 secs	(18.32307 secs)	0.964725	0.05916877
11/70	0.65/1.00	576.3497 secs	(18.06858 secs)	0.968	0.05393893
11/70	0.70/1.00	594.2329 secs	(17.88312 secs)	0.9955	0.05306579
11/70	0.75/1.00	610.9856 secs	(16.75278 secs)	0.9721	0.04649192
11/70	0.80/1.00	624.7998 secs	(13.81416 secs)	0.99825	0.04705851
11/70	0.85/1.00	639.2032 secs	(14.40337 secs)	0.99875	0.04232906
11/70	0.90/1.00	653.8355 secs	(14.63235 secs)	0.99925	0.0400805
11/70	0.95/1.00	670.9979 secs	(17.1624 secs)	0.99935	0.0370513
11/70	1.00/1.00	688.1239 secs	(17.126 secs)	0.9997	0.03558586


12/70	0.00/1.00	703.9864 secs	(15.86245 secs)	0.0013	0.1333333
12/70	0.05/1.00	722.8809 secs	(18.89451 secs)	0.00195	0.1083333
12/70	0.10/1.00	742.155 secs	(19.27413 secs)	0.005925	0.1365832
12/70	0.15/1.00	760.3599 secs	(18.20488 secs)	0.08825	0.1349894
12/70	0.20/1.00	775.953 secs	(15.59316 secs)	0.311525	0.1493274
12/70	0.25/1.00	793.574 secs	(17.62094 secs)	0.516025	0.1221739
12/70	0.30/1.00	811.7438 secs	(18.16984 secs)	0.75345	0.1156558
12/70	0.35/1.00	828.4123 secs	(16.66845 secs)	0.895625	0.1083224
12/70	0.40/1.00	846.0911 secs	(17.67883 secs)	0.92445	0.09236809
12/70	0.45/1.00	863.0084 secs	(16.91727 secs)	0.9177	0.08056072
12/70	0.50/1.00	880.6625 secs	(17.65413 secs)	0.927475	0.0745782
12/70	0.55/1.00	898.3701 secs	(17.70763 secs)	0.9598	0.07057666
12/70	0.60/1.00	914.3351 secs	(15.96498 secs)	0.99065	0.06412051
12/70	0.65/1.00	930.705 secs	(16.36987 secs)	0.99285	0.05889187
12/70	0.70/1.00	946.3658 secs	(15.6608 secs)	0.995525	0.05841344
12/70	0.75/1.00	961.3705 secs	(15.00471 secs)	0.997	0.05183231
12/70	0.80/1.00	978.1878 secs	(16.81731 secs)	0.998075	0.04964559
12/70	0.85/1.00	997.2242 secs	(19.03645 secs)	0.99895	0.04692519
12/70	0.90/1.00	1014.722 secs	(17.4975 secs)	0.99915	0.04393687
12/70	0.95/1.00	1030.447 secs	(15.7253 secs)	0.999525	0.04019433
12/70	1.00/1.00	1046.68 secs	(16.23261 secs)	0.99965	0.03978884


13/70	0.00/1.00	1062.923 secs	(16.24359 secs)	0.001575	0.20625
13/70	0.05/1.00	1077.861 secs	(14.93804 secs)	0.0033	0.1949485
13/70	0.10/1.00	1092.294 secs	(14.43302 secs)	0.01045	0.140734
13/70	0.15/1.00	1107.331 secs	(15.03646 secs)	0.077775	0.1582675
13/70	0.20/1.00	1123.378 secs	(16.0473 secs)	0.2467	0.1498283
13/70	0.25/1.00	1140.723 secs	(17.34454 secs)	0.46005	0.1245396
13/70	0.30/1.00	1158.379 secs	(17.65668 secs)	0.71885	0.1146057
13/70	0.35/1.00	1177.228 secs	(18.84882 secs)	0.848175	0.1112691
13/70	0.40/1.00	1195.624 secs	(18.39563 secs)	0.784225	0.08561307
13/70	0.45/1.00	1214.14 secs	(18.51604 secs)	0.9657	0.09305491
13/70	0.50/1.00	1230.963 secs	(16.82304 secs)	0.9781	0.08316663
13/70	0.55/1.00	1246.599 secs	(15.63655 secs)	0.96135	0.07637438
13/70	0.60/1.00	1260.664 secs	(14.06498 secs)	0.965525	0.06869302
13/70	0.65/1.00	1275.011 secs	(14.34657 secs)	0.99405	0.06556587
13/70	0.70/1.00	1289.246 secs	(14.23482 secs)	0.995625	0.06074025
13/70	0.75/1.00	1303.54 secs	(14.2941 secs)	0.99705	0.05729464
13/70	0.80/1.00	1319.183 secs	(15.6427 secs)	0.9979	0.05250883
13/70	0.85/1.00	1337.409 secs	(18.22611 secs)	0.99855	0.05067236
13/70	0.90/1.00	1356.085 secs	(18.67606 secs)	0.999275	0.04853497
13/70	0.95/1.00	1374.85 secs	(18.7652 secs)	0.999525	0.04559724
13/70	1.00/1.00	1391.963 secs	(17.11323 secs)	0.99975	0.04351074


14/70	0.00/1.00	1410.475 secs	(18.51167 secs)	0.00145	0.1625
14/70	0.05/1.00	1429.404 secs	(18.92941 secs)	0.0033	0.2336008
14/70	0.10/1.00	1448.447 secs	(19.0425 secs)	0.009525	0.1829958
14/70	0.15/1.00	1463.068 secs	(14.62165 secs)	0.061325	0.1332545
14/70	0.20/1.00	1477.07 secs	(14.00179 secs)	0.29825	0.1681682
14/70	0.25/1.00	1491.319 secs	(14.24929 secs)	0.587925	0.1440364
14/70	0.30/1.00	1505.196 secs	(13.87695 secs)	0.731675	0.1231734
14/70	0.35/1.00	1519.082 secs	(13.88538 secs)	0.7618	0.1009769
14/70	0.40/1.00	1534.899 secs	(15.81693 secs)	0.879175	0.1054143
14/70	0.45/1.00	1553.156 secs	(18.25721 secs)	0.920825	0.0939104
14/70	0.50/1.00	1572.649 secs	(19.49268 secs)	0.929825	0.08903562
14/70	0.55/1.00	1592.078 secs	(19.42892 secs)	0.9848	0.08146456
14/70	0.60/1.00	1614.193 secs	(22.11571 secs)	0.99075	0.07260344
14/70	0.65/1.00	1635.362 secs	(21.16845 secs)	0.992525	0.06821819
14/70	0.70/1.00	1656.808 secs	(21.44591 secs)	0.9706	0.06207647
14/70	0.75/1.00	1678.771 secs	(21.96369 secs)	0.9969	0.06053972
14/70	0.80/1.00	1699.645 secs	(20.87366 secs)	0.998275	0.05509756
14/70	0.85/1.00	1718.004 secs	(18.35933 secs)	0.99875	0.05143851
14/70	0.90/1.00	1733.165 secs	(15.16038 secs)	0.974325	0.04846015
14/70	0.95/1.00	1747.436 secs	(14.27159 secs)	0.99925	0.04568421
14/70	1.00/1.00	1761.611 secs	(14.17514 secs)	0.99965	0.04469153


15/70	0.00/1.00	1777.615 secs	(16.00363 secs)	0.00145	0.1416667
15/70	0.05/1.00	1794.685 secs	(17.06976 secs)	0.0049	0.1796439
15/70	0.10/1.00	1810.226 secs	(15.54145 secs)	0.010275	0.1313282
15/70	0.15/1.00	1828.368 secs	(18.1413 secs)	0.0504	0.1777168
15/70	0.20/1.00	1846.593 secs	(18.22532 secs)	0.270025	0.1660453
15/70	0.25/1.00	1864.887 secs	(18.29398 secs)	0.558225	0.1626691
15/70	0.30/1.00	1880.78 secs	(15.89344 secs)	0.803075	0.1470759
15/70	0.35/1.00	1896.911 secs	(16.13115 secs)	0.816625	0.1348544
15/70	0.40/1.00	1913.722 secs	(16.81073 secs)	0.878775	0.1116655
15/70	0.45/1.00	1928.857 secs	(15.13461 secs)	0.8959	0.09513438
15/70	0.50/1.00	1945.325 secs	(16.46847 secs)	0.95545	0.09218646
15/70	0.55/1.00	1962.017 secs	(16.69187 secs)	0.9609	0.0835986
15/70	0.60/1.00	1978.063 secs	(16.0458 secs)	0.990425	0.0789729
15/70	0.65/1.00	1994.972 secs	(16.90887 secs)	0.9928	0.07320641
15/70	0.70/1.00	2010.921 secs	(15.94898 secs)	0.9708	0.06659311
15/70	0.75/1.00	2026.089 secs	(15.16787 secs)	0.997175	0.0646311
15/70	0.80/1.00	2042.049 secs	(15.96085 secs)	0.998	0.06054558
15/70	0.85/1.00	2057.949 secs	(15.89976 secs)	0.998625	0.05520306
15/70	0.90/1.00	2072.821 secs	(14.87193 secs)	0.999125	0.05226888
15/70	0.95/1.00	2090.152 secs	(17.33037 secs)	0.99955	0.05014774
15/70	1.00/1.00	2107.793 secs	(17.64181 secs)	0.999575	0.04786998


16/70	0.00/1.00	2125.721 secs	(17.92774 secs)	0.001475	0.1658333
16/70	0.05/1.00	2140.983 secs	(15.26237 secs)	0.00265	0.2383333
16/70	0.10/1.00	2157.237 secs	(16.25324 secs)	0.0083	0.1269532
16/70	0.15/1.00	2173.75 secs	(16.51351 secs)	0.082	0.2089713
16/70	0.20/1.00	2188.459 secs	(14.70834 secs)	0.27455	0.1718376
16/70	0.25/1.00	2202.59 secs	(14.13133 secs)	0.58115	0.1745741
16/70	0.30/1.00	2216.869 secs	(14.27946 secs)	0.7737	0.1460026
16/70	0.35/1.00	2232.634 secs	(15.76503 secs)	0.8127	0.1236882
16/70	0.40/1.00	2249.042 secs	(16.40713 secs)	0.904225	0.1170361
16/70	0.45/1.00	2266.309 secs	(17.26709 secs)	0.9447	0.1086452
16/70	0.50/1.00	2284.929 secs	(18.62031 secs)	0.907375	0.09417655
16/70	0.55/1.00	2303.562 secs	(18.63263 secs)	0.9859	0.08997075
16/70	0.60/1.00	2320.835 secs	(17.27374 secs)	0.990075	0.08337767
16/70	0.65/1.00	2337.846 secs	(17.01111 secs)	0.993675	0.07860526
16/70	0.70/1.00	2354.481 secs	(16.63466 secs)	0.99595	0.0717879
16/70	0.75/1.00	2369.067 secs	(14.58615 secs)	0.972425	0.06730685
16/70	0.80/1.00	2383.016 secs	(13.94909 secs)	0.9981	0.06331769
16/70	0.85/1.00	2397.014 secs	(13.99814 secs)	0.9989	0.06011657
16/70	0.90/1.00	2411.209 secs	(14.19452 secs)	0.999125	0.05674981
16/70	0.95/1.00	2425.288 secs	(14.07874 secs)	0.9995	0.05300052
16/70	1.00/1.00	2443.32 secs	(18.03276 secs)	0.999725	0.05178912


17/70	0.00/1.00	2461.892 secs	(18.57156 secs)	0.001525	0.2291667
17/70	0.05/1.00	2480.446 secs	(18.55424 secs)	0.004025	0.2207567
17/70	0.10/1.00	2497.421 secs	(16.97494 secs)	0.016825	0.2051373
17/70	0.15/1.00	2514.892 secs	(17.47067 secs)	0.129725	0.2371657
17/70	0.20/1.00	2533.237 secs	(18.34545 secs)	0.317	0.1555146
17/70	0.25/1.00	2552.292 secs	(19.05498 secs)	0.60045	0.1876256
17/70	0.30/1.00	2569.313 secs	(17.02042 secs)	0.730875	0.1384013
17/70	0.35/1.00	2583.484 secs	(14.17111 secs)	0.85915	0.1340624
17/70	0.40/1.00	2597.894 secs	(14.41058 secs)	0.916275	0.1275573
17/70	0.45/1.00	2611.782 secs	(13.88779 secs)	0.96935	0.1160367
17/70	0.50/1.00	2625.859 secs	(14.0765 secs)	0.955075	0.1065765
17/70	0.55/1.00	2641.233 secs	(15.37437 secs)	0.986225	0.09896326
17/70	0.60/1.00	2658.029 secs	(16.79643 secs)	0.9902	0.08945464
