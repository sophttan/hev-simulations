
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
32
> num_cores <- 32
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   prp <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_NUM / results$S_NUM, na.rm = T)
+     cases <- results[!is.na(results$TIME), ]
+     prp <- mean((cases$TYPE == 'H') | (cases$TYPE == 'HC') | (cases$TYPE == 'HCE'))
+   }
+   return(c(idc, sar, prp))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((fit - tgt)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300) {
+   # If any parameter is negative, do not transition to that state.
+   if (any(state < 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.01, 0.000001, 0.00001)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 3, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 3)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat('[', 
+         format(round(curr[1], 3), nsmall = 3), '\t', 
+         format(round(curr[2], 5), nsmall = 5), '\t', 
+         format(round(curr[3], 6), nsmall = 6, scientific = F), ']\t',
+         format(round(curr_lik, 3), nsmall = 3), '\t', sep = '')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat('[', 
+         format(round(prop[1], 3), nsmall = 3), '\t', 
+         format(round(prop[2], 5), nsmall = 5), '\t', 
+         format(round(prop[3], 6), nsmall = 6, scientific = F), ']\t',
+         format(round(prop_lik, 3), nsmall = 3), '\t', sep = '')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(round(r, 3), nsmall = 3), '\t', format(round(p, 3), nsmall = 3), '\n', sep = '')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> tgt <- c(0.10, 0.08, 0.25)
> start <- c(12.5739108771132, 0.0000829416075736487, 0.000237488112603947)
> results <- metropolis(start, tgt, num_sim = 1000, num_iter = 1000)
[12.574	8e-05	0.000237]	11.103	[12.571	8e-05	0.000260]	9.305	0.166	0.702
[12.574	8e-05	0.000237]	11.103	[12.588	8e-05	0.000240]	11.298	1.216	0.444
[12.588	8e-05	0.000240]	11.298	[12.596	8e-05	0.000236]	11.715	1.516	0.512
[12.596	8e-05	0.000236]	11.715	[12.585	8e-05	0.000219]	9.528	0.112	0.776
[12.596	8e-05	0.000236]	11.715	[12.591	8e-05	0.000236]	11.593	0.886	0.721
[12.591	8e-05	0.000236]	11.593	[12.601	8e-05	0.000226]	10.160	0.238	0.403
[12.591	8e-05	0.000236]	11.593	[12.598	8e-05	0.000250]	10.374	0.295	0.465
[12.591	8e-05	0.000236]	11.593	[12.605	8e-05	0.000222]	9.952	0.194	0.689
[12.591	8e-05	0.000236]	11.593	[12.602	8e-05	0.000230]	10.811	0.457	0.160
[12.602	8e-05	0.000230]	10.811	[12.619	8e-05	0.000236]	10.840	1.029	0.227
[12.619	8e-05	0.000236]	10.840	[12.620	8e-05	0.000218]	9.527	0.269	0.520
[12.619	8e-05	0.000236]	10.840	[12.624	8e-05	0.000242]	10.750	0.914	0.629
[12.624	8e-05	0.000242]	10.750	[12.633	8e-05	0.000230]	10.843	1.097	0.374
[12.633	8e-05	0.000230]	10.843	[12.634	8e-05	0.000234]	11.076	1.263	0.230
[12.634	8e-05	0.000234]	11.076	[12.644	8e-05	0.000247]	10.266	0.445	0.464
[12.634	8e-05	0.000234]	11.076	[12.640	8e-05	0.000216]	9.409	0.189	0.591
[12.634	8e-05	0.000234]	11.076	[12.643	8e-05	0.000236]	11.527	1.570	0.851
[12.643	8e-05	0.000236]	11.527	[12.637	8e-05	0.000231]	10.910	0.539	0.497
[12.637	8e-05	0.000231]	10.910	[12.660	8e-05	0.000228]	10.517	0.675	0.927
[12.637	8e-05	0.000231]	10.910	[12.633	8e-05	0.000226]	10.243	0.513	0.651
[12.637	8e-05	0.000231]	10.910	[12.635	8e-05	0.000230]	10.648	0.770	0.065
[12.635	8e-05	0.000230]	10.648	[12.627	8e-05	0.000239]	11.051	1.497	0.989
[12.627	8e-05	0.000239]	11.051	[12.627	8e-05	0.000232]	10.920	0.877	0.875
[12.627	8e-05	0.000232]	10.920	[12.638	8e-05	0.000241]	10.947	1.028	0.277
[12.638	8e-05	0.000241]	10.947	[12.674	8e-05	0.000245]	10.451	0.608	0.255
[12.674	8e-05	0.000245]	10.451	[12.653	8e-05	0.000234]	10.733	1.327	0.324
[12.653	8e-05	0.000234]	10.733	[12.655	8e-05	0.000229]	10.793	1.061	0.925
[12.655	8e-05	0.000229]	10.793	[12.641	8e-05	0.000234]	10.773	0.980	0.868
[12.641	8e-05	0.000234]	10.773	[12.636	8e-05	0.000230]	10.579	0.824	0.085
[12.636	8e-05	0.000230]	10.579	[12.635	8e-05	0.000238]	11.389	2.247	0.915
[12.635	8e-05	0.000238]	11.389	[12.631	8e-05	0.000231]	10.607	0.458	0.711
[12.635	8e-05	0.000238]	11.389	[12.640	8e-05	0.000232]	10.636	0.471	0.730
[12.635	8e-05	0.000238]	11.389	[12.631	8e-05	0.000233]	10.905	0.617	0.630
[12.635	8e-05	0.000238]	11.389	[12.636	8e-05	0.000216]	9.504	0.152	0.506
[12.635	8e-05	0.000238]	11.389	[12.633	8e-05	0.000222]	10.018	0.254	0.321
[12.635	8e-05	0.000238]	11.389	[12.648	8e-05	0.000235]	11.098	0.747	0.075
[12.648	8e-05	0.000235]	11.098	[12.657	8e-05	0.000232]	11.011	0.917	0.336
[12.657	8e-05	0.000232]	11.011	[12.664	8e-05	0.000226]	10.238	0.462	0.732
[12.657	8e-05	0.000232]	11.011	[12.663	8e-05	0.000224]	9.550	0.232	0.247
[12.657	8e-05	0.000232]	11.011	[12.651	8e-05	0.000238]	10.791	0.803	0.288
[12.651	8e-05	0.000238]	10.791	[12.655	8e-05	0.000244]	10.684	0.898	0.173
[12.655	8e-05	0.000244]	10.684	[12.655	8e-05	0.000235]	10.806	1.129	0.062
[12.655	8e-05	0.000235]	10.806	[12.667	8e-05	0.000235]	11.564	2.135	0.260
[12.667	8e-05	0.000235]	11.564	[12.661	8e-05	0.000229]	10.711	0.426	0.139
[12.661	8e-05	0.000229]	10.711	[12.645	8e-05	0.000243]	10.897	1.205	0.622
[12.645	8e-05	0.000243]	10.897	[12.667	8e-05	0.000237]	11.500	1.828	0.904
[12.667	8e-05	0.000237]	11.500	[12.655	8e-05	0.000227]	10.469	0.357	0.603
[12.667	8e-05	0.000237]	11.500	[12.676	8e-05	0.000236]	11.479	0.979	0.297
[12.676	8e-05	0.000236]	11.479	[12.686	8e-05	0.000227]	10.353	0.324	0.518
[12.676	8e-05	0.000236]	11.479	[12.689	9e-05	0.000249]	10.096	0.251	0.156
[12.689	9e-05	0.000249]	10.096	[12.703	9e-05	0.000270]	8.639	0.233	0.196
[12.703	9e-05	0.000270]	8.639	[12.718	8e-05	0.000257]	9.615	2.653	0.367
[12.718	8e-05	0.000257]	9.615	[12.733	8e-05	0.000242]	10.689	2.926	0.074
[12.733	8e-05	0.000242]	10.689	[12.751	8e-05	0.000260]	9.203	0.226	0.176
[12.751	8e-05	0.000260]	9.203	[12.762	8e-05	0.000264]	8.856	0.706	0.813
[12.751	8e-05	0.000260]	9.203	[12.752	8e-05	0.000254]	9.531	1.388	0.188
[12.752	8e-05	0.000254]	9.531	[12.745	8e-05	0.000245]	10.363	2.298	0.924
[12.745	8e-05	0.000245]	10.363	[12.745	8e-05	0.000248]	9.979	0.681	0.644
[12.745	8e-05	0.000248]	9.979	