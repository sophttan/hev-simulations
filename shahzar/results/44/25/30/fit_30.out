
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
24
> num_cores <- detectCores()
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   prp <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_NUM / results$S_NUM, na.rm = T)
+     cases <- results[!is.na(results$TIME), ]
+     prp <- mean((cases$TYPE == 'H') | (cases$TYPE == 'HC') | (cases$TYPE == 'HCE'))
+   }
+   return(c(idc, sar, prp))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((fit - tgt)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300) {
+   # If any parameter is negative, do not transition to that state.
+   if (any(state < 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.1, 0.001, 0.0001)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 3, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 3)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat('[', 
+         format(round(curr[1], 3), nsmall = 3), '\t', 
+         format(round(curr[2], 5), nsmall = 5), '\t', 
+         format(round(curr[3], 6), nsmall = 6, scientific = F), ']\t',
+         format(round(curr_lik, 3), nsmall = 3), '\t', sep = '')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat('[', 
+         format(round(prop[1], 3), nsmall = 3), '\t', 
+         format(round(prop[2], 5), nsmall = 5), '\t', 
+         format(round(prop[3], 6), nsmall = 6, scientific = F), ']\t',
+         format(round(prop_lik, 3), nsmall = 3), '\t', sep = '')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(round(r, 3), nsmall = 3), '\t', format(round(p, 3), nsmall = 3), '\n', sep = '')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> tgt <- c(0.30, 0.25, 0.25)
> start <- c(13.5787101689274, 0.0156163692598389, 0.000773277025698271)
> results <- metropolis(start, tgt, num_sim = 300, num_iter = 1000)
[13.579	0.01562	0.000773]	3.647	[13.637	0.01593	0.000792]	3.652	1.005	0.510
[13.637	0.01593	0.000792]	3.652	[13.683	0.01677	0.000854]	3.594	0.944	0.596
[13.683	0.01677	0.000854]	3.594	[13.502	0.01758	0.000914]	3.524	0.932	0.708
[13.502	0.01758	0.000914]	3.524	[13.605	0.01731	0.001057]	3.301	0.800	0.240
[13.605	0.01731	0.001057]	3.301	[13.677	0.01724	0.001138]	3.180	0.887	0.586
[13.677	0.01724	0.001138]	3.180	[13.702	0.01787	0.001102]	3.229	1.049	0.519
[13.702	0.01787	0.001102]	3.229	[13.750	0.01746	0.001138]	3.177	0.950	0.736
[13.750	0.01746	0.001138]	3.177	[13.685	0.01595	0.001268]	2.999	0.837	0.914
[13.750	0.01746	0.001138]	3.177	[13.834	0.01875	0.001212]	3.041	0.873	0.407
[13.834	0.01875	0.001212]	3.041	[13.786	0.02021	0.001113]	3.184	1.154	0.527
[13.786	0.02021	0.001113]	3.184	[13.899	0.01910	0.001121]	3.188	1.003	0.705
[13.899	0.01910	0.001121]	3.188	[13.873	0.01911	0.001008]	3.370	1.200	0.411
[13.873	0.01911	0.001008]	3.370	[13.812	0.01974	0.000956]	3.438	1.070	0.486
[13.812	0.01974	0.000956]	3.438	[13.897	0.01941	0.000992]	3.401	0.964	0.890
[13.897	0.01941	0.000992]	3.401	[13.872	0.01944	0.001152]	3.134	0.765	0.860
[13.897	0.01941	0.000992]	3.401	[13.928	0.02040	0.000848]	3.592	1.210	0.349
[13.928	0.02040	0.000848]	3.592	[13.856	0.01794	0.000993]	3.415	0.838	0.910
[13.928	0.02040	0.000848]	3.592	[13.966	0.02011	0.000933]	3.475	0.890	0.481
[13.966	0.02011	0.000933]	3.475	[13.973	0.02012	0.000968]	3.413	0.939	0.381
[13.973	0.02012	0.000968]	3.413	[13.857	0.01980	0.001054]	3.278	0.874	0.264
[13.857	0.01980	0.001054]	3.278	[13.870	0.01906	0.001164]	3.119	0.853	0.034
[13.870	0.01906	0.001164]	3.119	[13.973	0.01779	0.001115]	3.210	1.094	0.035
[13.973	0.01779	0.001115]	3.210	[13.938	0.01780	0.001096]	3.251	1.042	0.087
[13.938	0.01780	0.001096]	3.251	[13.817	0.01821	0.001165]	3.138	0.893	0.772
[13.817	0.01821	0.001165]	3.138	[13.871	0.01838	0.001193]	3.088	0.951	0.467
[13.871	0.01838	0.001193]	3.088	[13.812	0.01853	0.001362]	2.817	0.763	0.376
[13.812	0.01853	0.001362]	2.817	[13.764	0.01972	0.001348]	2.837	1.020	0.699
[13.764	0.01972	0.001348]	2.837	[13.775	0.01989	0.001405]	2.742	0.910	0.916
[13.764	0.01972	0.001348]	2.837	[13.899	0.01859	0.001343]	2.851	1.014	0.423
[13.899	0.01859	0.001343]	2.851	[14.051	0.01765	0.001440]	2.725	0.882	0.729
[14.051	0.01765	0.001440]	2.725	[13.931	0.01758	0.001562]	2.565	0.852	0.398
[13.931	0.01758	0.001562]	2.565	[14.055	0.01614	0.001410]	2.786	1.246	0.586
[14.055	0.01614	0.001410]	2.786	[14.028	0.01589	0.001139]	3.216	1.538	0.590
[14.028	0.01589	0.001139]	3.216	[14.057	0.01526	0.001066]	3.324	1.114	0.886
[14.057	0.01526	0.001066]	3.324	[13.882	0.01618	0.001110]	3.252	0.931	0.657
[13.882	0.01618	0.001110]	3.252	[13.962	0.01528	0.001036]	3.366	1.121	0.713
[13.962	0.01528	0.001036]	3.366	[14.089	0.01307	0.000893]	3.606	1.271	0.790
[14.089	0.01307	0.000893]	3.606	[14.162	0.01238	0.000901]	3.592	0.986	0.658
[14.162	0.01238	0.000901]	3.592	[14.168	0.01303	0.000915]	3.581	0.989	0.641
[14.168	0.01303	0.000915]	3.581	[14.185	0.01285	0.000890]	3.612	1.032	0.296
[14.185	0.01285	0.000890]	3.612	[14.206	0.01337	0.001024]	3.424	0.828	0.135
[14.206	0.01337	0.001024]	3.424	[14.322	0.01293	0.001057]	3.374	0.951	0.237
[14.322	0.01293	0.001057]	3.374	[14.422	0.01395	0.001064]	3.359	0.985	0.683
[14.422	0.01395	0.001064]	3.359	[14.480	0.01374	0.000991]	3.476	1.125	0.226
[14.480	0.01374	0.000991]	3.476	[14.434	0.01609	0.001004]	3.425	0.950	0.924
[14.434	0.01609	0.001004]	3.425	[14.370	0.01549	0.001053]	3.352	0.929	0.268
[14.370	0.01549	0.001053]	3.352	[14.198	0.01411	0.001142]	3.216	0.873	0.354
[14.198	0.01411	0.001142]	3.216	[14.267	0.01489	0.001010]	3.421	1.228	0.654
[14.267	0.01489	0.001010]	3.421	[14.104	0.01628	0.000983]	3.453	1.033	0.998
[14.104	0.01628	0.000983]	3.453	[13.928	0.01672	0.000977]	3.452	0.999	0.015
[13.928	0.01672	0.000977]	3.452	[13.871	0.01778	0.001049]	3.325	0.881	0.382
[13.871	0.01778	0.001049]	3.325	[13.988	0.01693	0.001148]	3.188	0.872	0.556
[13.988	0.01693	0.001148]	3.188	[14.264	0.01560	0.001203]	3.122	0.936	0.509
[14.264	0.01560	0.001203]	3.122	[14.265	0.01606	0.001204]	3.111	0.989	0.519
[14.265	0.01606	0.001204]	3.111	[14.243	0.01649	0.001189]	3.106	0.996	0.585
[14.243	0.01649	0.001189]	3.106	[14.167	0.01721	0.001148]	3.170	1.066	0.769
[14.167	0.01721	0.001148]	3.170	[14.189	0.01693	0.001144]	3.196	1.026	0.057
[14.189	0.01693	0.001144]	3.196	[14.031	0.01586	0.001207]	3.106	0.914	0.574
[14.031	0.01586	0.001207]	3.106	[14.028	0.01593	0.001202]	3.110	1.004	0.109
[14.028	0.01593	0.001202]	3.110	[14.119	0.01646	0.001010]	3.409	1.348	0.482
[14.119	0.01646	0.001010]	3.409	[14.286	0.01660	0.000849]	3.637	1.257	0.996
[14.286	0.01660	0.000849]	3.637	[14.168	0.01696	0.000960]	3.497	0.869	0.628
[14.168	0.01696	0.000960]	3.497	[14.249	0.01674	0.000984]	3.444	0.948	0.664
[14.249	0.01674	0.000984]	3.444	[14.301	0.01722	0.001075]	3.295	0.861	0.067
[14.301	0.01722	0.001075]	3.295	[14.372	0.01703	0.001122]	3.216	0.924	0.492
[14.372	0.01703	0.001122]	3.216	[14.231	0.01649	0.001035]	3.367	1.163	0.281
[14.231	0.01649	0.001035]	3.367	[13.988	0.01599	0.000932]	3.510	1.153	0.669
[13.988	0.01599	0.000932]	3.510	[14.036	0.01550	0.000968]	3.468	0.959	0.238
[14.036	0.01550	0.000968]	3.468	[13.952	0.01273	0.000822]	3.657	1.209	0.701
[13.952	0.01273	0.000822]	3.657	[13.995	0.01281	0.000777]	3.689	1.032	0.232
[13.995	0.01281	0.000777]	3.689	[13.963	0.01193	0.000827]	3.657	0.969	0.773
[13.963	0.01193	0.000827]	3.657	[13.938	0.01147	0.000666]	3.666	1.009	0.613
[13.938	0.01147	0.000666]	3.666	[14.242	0.01175	0.000602]	3.646	0.981	0.934
[14.242	0.01175	0.000602]	3.646	[14.245	0.01181	0.000413]	3.282	0.695	0.731
[14.242	0.01175	0.000602]	3.646	[14.116	0.01118	0.000598]	3.624	0.978	0.951
[14.116	0.01118	0.000598]	3.624	[14.118	0.01138	0.000607]	3.640	1.016	0.548
[14.118	0.01138	0.000607]	3.640	[14.038	0.01107	0.000604]	3.635	0.995	0.174
[14.038	0.01107	0.000604]	3.635	[14.031	0.01092	0.000632]	3.649	1.014	0.020
[14.031	0.01092	0.000632]	3.649	[14.210	0.01084	0.000750]	3.704	1.057	0.828
[14.210	0.01084	0.000750]	3.704	[14.383	0.00840	0.000617]	3.640	0.938	0.206
[14.383	0.00840	0.000617]	3.640	[14.432	0.00904	0.000765]	3.745	1.111	0.825
[14.432	0.00904	0.000765]	3.745	[14.603	0.00980	0.000611]	3.659	0.917	0.460
[14.603	0.00980	0.000611]	3.659	[14.717	0.01198	0.000738]	3.760	1.107	0.613
[14.717	0.01198	0.000738]	3.760	[14.884	0.01267	0.000830]	3.705	0.946	0.643
[14.884	0.01267	0.000830]	3.705	[14.693	0.01242	0.000984]	3.512	0.824	0.083
[14.693	0.01242	0.000984]	3.512	[14.655	0.01308	0.001020]	3.438	0.928	0.374
[14.655	0.01308	0.001020]	3.438	[14.756	0.01126	0.000978]	3.545	1.113	0.991
[14.756	0.01126	0.000978]	3.545	[14.775	0.01053	0.001032]	3.460	0.918	0.510
[14.775	0.01053	0.001032]	3.460	[14.764	0.01085	0.000892]	3.649	1.208	0.123
[14.764	0.01085	0.000892]	3.649	[14.880	0.01129	0.000903]	3.633	0.984	0.129
[14.880	0.01129	0.000903]	3.633	[15.035	0.01282	0.000833]	3.708	1.078	0.422
[15.035	0.01282	0.000833]	3.708	[15.100	0.01260	0.000878]	3.654	0.948	0.415
[15.100	0.01260	0.000878]	3.654	[15.097	0.01242	0.000828]	3.717	1.065	0.957
[15.097	0.01242	0.000828]	3.717	[15.215	0.01271	0.000861]	3.689	0.973	0.718
[15.215	0.01271	0.000861]	3.689	[15.255	0.01386	0.001087]	3.322	0.693	0.499
[15.255	0.01386	0.001087]	3.322	[15.349	0.01389	0.001087]	3.338	1.016	0.338
[15.349	0.01389	0.001087]	3.338	[15.409	0.01305	0.001035]	3.429	1.095	0.222
[15.409	0.01305	0.001035]	3.429	[15.410	0.01236	0.001064]	3.394	0.966	0.061
[15.410	0.01236	0.001064]	3.394	[15.456	0.01142	0.001078]	3.386	0.992	0.679
[15.456	0.01142	0.001078]	3.386	[15.445	0.01174	0.001050]	3.416	1.031	0.177
[15.445	0.01174	0.001050]	3.416	[15.315	0.01264	0.001047]	3.424	1.007	0.667
[15.315	0.01264	0.001047]	3.424	[15.328	0.01320	0.001079]	3.360	0.939	0.619
[15.328	0.01320	0.001079]	3.360	[15.307	0.01373	0.001163]	3.209	0.860	0.784
[15.307	0.01373	0.001163]	3.209	[15.252	0.01509	0.000917]	3.597	1.474	0.867
[15.252	0.01509	0.000917]	3.597	[15.210	0.01536	0.000874]	3.658	1.062	0.080
[15.210	0.01536	0.000874]	3.658	[15.340	0.01300	0.000806]	3.745	1.091	0.521
[15.340	0.01300	0.000806]	3.745	[15.394	0.01355	0.000756]	3.779	1.035	0.345
[15.394	0.01355	0.000756]	3.779	[15.538	0.01190	0.000734]	3.792	1.013	0.490
[15.538	0.01190	0.000734]	3.792	[15.572	0.01147	0.000782]	3.786	0.994	0.750
[15.572	0.01147	0.000782]	3.786	[15.588	0.01196	0.000705]	3.795	1.009	0.698
[15.588	0.01196	0.000705]	3.795	[15.797	0.01115	0.000723]	3.811	1.016	0.827
[15.797	0.01115	0.000723]	3.811	[15.682	0.01098	0.000813]	3.755	0.945	0.116
[15.682	0.01098	0.000813]	3.755	[15.459	0.01098	0.000823]	3.754	0.999	0.598
[15.459	0.01098	0.000823]	3.754	[15.497	0.00932	0.000677]	3.772	1.018	0.874
[15.497	0.00932	0.000677]	3.772	[15.293	0.00813	0.000699]	3.778	1.006	0.389
[15.293	0.00813	0.000699]	3.778	[15.443	0.00629	0.000723]	3.797	1.019	0.394
[15.443	0.00629	0.000723]	3.797	[15.310	0.00484	0.000647]	3.731	0.937	0.733
[15.310	0.00484	0.000647]	3.731	[15.355	0.00442	0.000771]	3.796	1.067	0.071
[15.355	0.00442	0.000771]	3.796	[15.278	0.00374	0.000581]	3.629	0.846	0.426
[15.278	0.00374	0.000581]	3.629	[15.324	0.00460	0.000617]	3.686	1.059	0.938
[15.324	0.00460	0.000617]	3.686	[15.361	0.00455	0.000515]	3.519	0.846	0.707
[15.361	0.00455	0.000515]	3.519	[15.377	0.00472	0.000564]	3.637	1.125	0.303
[15.377	0.00472	0.000564]	3.637	[15.298	0.00405	0.000472]	3.430	0.813	0.924
[15.377	0.00472	0.000564]	3.637	[15.280	0.00436	0.000488]	3.453	0.832	0.246
[15.280	0.00436	0.000488]	3.453	[15.271	0.00625	0.000513]	3.514	1.064	0.272
[15.271	0.00625	0.000513]	3.514	[15.320	0.00602	0.000609]	3.681	1.182	0.619
[15.320	0.00602	0.000609]	3.681	[15.368	0.00449	0.000673]	3.748	1.069	0.970
[15.368	0.00449	0.000673]	3.748	[15.600	0.00580	0.000719]	3.797	1.051	0.302
[15.600	0.00580	0.000719]	3.797	[15.494	0.00454	0.000707]	3.784	0.987	0.434
[15.494	0.00454	0.000707]	3.784	[15.489	0.00386	0.000829]	3.785	1.000	0.475
[15.489	0.00386	0.000829]	3.785	[15.439	0.00448	0.000855]	3.753	0.969	0.850
[15.439	0.00448	0.000855]	3.753	[15.362	0.00461	0.000930]	3.677	0.927	0.521
[15.362	0.00461	0.000930]	3.677	[15.264	0.00474	0.001000]	3.576	0.904	0.206
[15.264	0.00474	0.001000]	3.576	[15.234	0.00474	0.000792]	3.772	1.216	0.024
[15.234	0.00474	0.000792]	3.772	[15.112	0.00548	0.000560]	3.600	0.842	0.965
[15.234	0.00474	0.000792]	3.772	[15.242	0.00479	0.000871]	3.729	0.958	0.840
[15.242	0.00479	0.000871]	3.729	[15.377	0.00318	0.001057]	3.520	0.811	0.704
[15.377	0.00318	0.001057]	3.520	[15.354	0.00322	0.000960]	3.663	1.154	0.702
[15.354	0.00322	0.000960]	3.663	[15.274	0.00355	0.001042]	3.534	0.879	0.637
[15.274	0.00355	0.001042]	3.534	[15.311	0.00268	0.001118]	3.434	0.905	0.371
[15.311	0.00268	0.001118]	3.434	[15.156	0.00330	0.001087]	3.463	1.030	0.087
[15.156	0.00330	0.001087]	3.463	[15.073	0.00392	0.000947]	3.653	1.209	0.328
[15.073	0.00392	0.000947]	3.653	[14.796	0.00390	0.001016]	3.557	0.909	0.531
[14.796	0.00390	0.001016]	3.557	[14.856	0.00382	0.000923]	3.671	1.120	0.231
[14.856	0.00382	0.000923]	3.671	[15.138	0.00435	0.000958]	3.637	0.966	0.388
[15.138	0.00435	0.000958]	3.637	[15.161	0.00453	0.000896]	3.714	1.080	0.491
[15.161	0.00453	0.000896]	3.714	[15.104	0.00595	0.000850]	3.737	1.024	0.301
[15.104	0.00595	0.000850]	3.737	[15.151	0.00814	0.000929]	3.643	0.910	0.306
[15.151	0.00814	0.000929]	3.643	[15.186	0.00745	0.000794]	3.780	1.147	0.922
[15.186	0.00745	0.000794]	3.780	[15.247	0.00650	0.000889]	3.707	0.930	0.386
[15.247	0.00650	0.000889]	3.707	[15.241	0.00675	0.000941]	3.639	0.934	0.123
[15.241	0.00675	0.000941]	3.639	[15.152	0.00723	0.000877]	3.710	1.074	0.429
[15.152	0.00723	0.000877]	3.710	[15.281	0.00835	0.000861]	3.726	1.016	0.225
[15.281	0.00835	0.000861]	3.726	[15.048	0.00989	0.000899]	3.671	0.947	0.364
[15.048	0.00989	0.000899]	3.671	[15.238	0.00912	0.000940]	3.623	0.952	0.732
[15.238	0.00912	0.000940]	3.623	[15.241	0.01038	0.001057]	3.448	0.840	0.289
[15.241	0.01038	0.001057]	3.448	[15.220	0.01150	0.000928]	3.625	1.193	0.627
[15.220	0.01150	0.000928]	3.625	[15.149	0.01269	0.000988]	3.518	0.898	0.840
[15.149	0.01269	0.000988]	3.518	[15.012	0.01310	0.001097]	3.334	0.832	0.028
[15.012	0.01310	0.001097]	3.334	[15.041	0.01254	0.001294]	3.017	0.728	0.557
[15.041	0.01254	0.001294]	3.017	[15.095	0.01237	0.001214]	3.135	1.126	0.365
[15.095	0.01237	0.001214]	3.135	[15.051	0.01204	0.001074]	3.386	1.285	0.938
[15.051	0.01204	0.001074]	3.386	[15.172	0.01284	0.001095]	3.341	0.956	0.234
[15.172	0.01284	0.001095]	3.341	[15.137	0.01292	0.001233]	3.105	0.790	0.958
[15.172	0.01284	0.001095]	3.341	[14.991	0.01411	0.001279]	3.010	0.719	0.967
[15.172	0.01284	0.001095]	3.341	[15.084	0.01203	0.000972]	3.529	1.208	0.563
[15.084	0.01203	0.000972]	3.529	[14.959	0.01252	0.000765]	3.760	1.259	0.074
[14.959	0.01252	0.000765]	3.760	[15.062	0.01266	0.000746]	3.772	1.013	0.566
[15.062	0.01266	0.000746]	3.772	[15.066	0.01108	0.000837]	3.715	0.944	0.162
[15.066	0.01108	0.000837]	3.715	[15.152	0.01041	0.000782]	3.764	1.050	0.167
[15.152	0.01041	0.000782]	3.764	[15.111	0.01208	0.000652]	3.759	0.996	0.351
[15.111	0.01208	0.000652]	3.759	[15.017	0.01304	0.000588]	3.689	0.932	0.331
[15.017	0.01304	0.000588]	3.689	[15.035	0.01428	0.000706]	3.766	1.080	0.874
[15.035	0.01428	0.000706]	3.766	[14.997	0.01376	0.000987]	3.492	0.760	0.827
[15.035	0.01428	0.000706]	3.766	[15.056	0.01385	0.000708]	3.759	0.994	0.456
[15.056	0.01385	0.000708]	3.759	[14.941	0.01406	0.000652]	3.757	0.997	0.876
[14.941	0.01406	0.000652]	3.757	[14.777	0.01333	0.000899]	3.626	0.878	0.902
[14.941	0.01406	0.000652]	3.757	[14.880	0.01456	0.000616]	3.724	0.968	0.573
[14.880	0.01456	0.000616]	3.724	[14.981	0.01614	0.000761]	3.756	1.032	0.885
[14.981	0.01614	0.000761]	3.756	[14.878	0.01735	0.000805]	3.704	0.949	0.138
[14.878	0.01735	0.000805]	3.704	[15.017	0.01771	0.000876]	3.622	0.921	0.522
[15.017	0.01771	0.000876]	3.622	[14.904	0.01720	0.000715]	3.759	1.148	0.271
[14.904	0.01720	0.000715]	3.759	[14.908	0.01801	0.000856]	3.657	0.903	0.377
[14.908	0.01801	0.000856]	3.657	[14.979	0.01816	0.001132]	3.176	0.618	0.696
[14.908	0.01801	0.000856]	3.657	[14.898	0.01939	0.000612]	3.735	1.081	0.721
[14.898	0.01939	0.000612]	3.735	[15.091	0.01963	0.000608]	3.750	1.016	0.771
[15.091	0.01963	0.000608]	3.750	[15.069	0.02012	0.000747]	3.745	0.994	0.470
[15.069	0.02012	0.000747]	3.745	[15.052	0.01881	0.000793]	3.716	0.972	0.591
[15.052	0.01881	0.000793]	3.716	[15.067	0.02060	0.000769]	3.711	0.995	0.355
[15.067	0.02060	0.000769]	3.711	[14.915	0.02076	0.000672]	3.772	1.063	0.657
[14.915	0.02076	0.000672]	3.772	[15.011	0.02059	0.000672]	3.767	0.995	0.999
[14.915	0.02076	0.000672]	3.772	[15.019	0.02026	0.000812]	3.677	0.910	0.841
[15.019	0.02026	0.000812]	3.677	[15.051	0.02051	0.000829]	3.648	0.971	0.668
[15.051	0.02051	0.000829]	3.648	[15.080	0.02052	0.000918]	3.544	0.901	0.057
[15.080	0.02052	0.000918]	3.544	[14.954	0.02282	0.001128]	3.140	0.667	0.546
[14.954	0.02282	0.001128]	3.140	[14.889	0.02309	0.001214]	2.984	0.856	0.435
[14.889	0.02309	0.001214]	2.984	[14.857	0.02143	0.001152]	3.116	1.142	0.809
[14.857	0.02143	0.001152]	3.116	[14.822	0.01993	0.001188]	3.068	0.953	0.615
[14.822	0.01993	0.001188]	3.068	[14.796	0.01960	0.001201]	3.052	0.985	0.941
[14.796	0.01960	0.001201]	3.052	[14.594	0.01901	0.001059]	3.296	1.276	0.765
[14.594	0.01901	0.001059]	3.296	[14.532	0.01887	0.000870]	3.595	1.350	0.525
[14.532	0.01887	0.000870]	3.595	[14.426	0.01886	0.000931]	3.508	0.916	0.030
[14.426	0.01886	0.000931]	3.508	[14.510	0.01960	0.000902]	3.550	1.044	0.472
[14.510	0.01960	0.000902]	3.550	[14.608	0.01935	0.001006]	3.399	0.860	0.542
[14.608	0.01935	0.001006]	3.399	[14.619	0.01972	0.000889]	3.578	1.196	0.167
[14.619	0.01972	0.000889]	3.578	[14.592	0.02040	0.000968]	3.442	0.873	0.492
[14.592	0.02040	0.000968]	3.442	[14.446	0.01935	0.000951]	3.476	1.034	0.798
[14.446	0.01935	0.000951]	3.476	[14.565	0.01950	0.000969]	3.445	0.970	0.724
[14.565	0.01950	0.000969]	3.445	[14.648	0.02021	0.000977]	3.435	0.990	0.955
[14.648	0.02021	0.000977]	3.435	[14.708	0.02113	0.000984]	3.401	0.966	0.315
[14.708	0.02113	0.000984]	3.401	[14.766	0.02132	0.001058]	3.281	0.887	0.867
[14.766	0.02132	0.001058]	3.281	[14.803	0.02212	0.001136]	3.128	0.858	0.122
[14.803	0.02212	0.001136]	3.128	[14.818	0.02328	0.001127]	3.138	1.010	0.129
[14.818	0.02328	0.001127]	3.138	[14.757	0.02392	0.001189]	3.018	0.887	0.157
[14.757	0.02392	0.001189]	3.018	[14.812	0.02529	0.001366]	2.725	0.746	0.449
[14.812	0.02529	0.001366]	2.725	[15.044	0.02279	0.001428]	2.675	0.951	0.962
[14.812	0.02529	0.001366]	2.725	[14.761	0.02646	0.001405]	2.652	0.929	0.889
[14.761	0.02646	0.001405]	2.652	[14.735	0.02692	0.001384]	2.669	1.018	0.981
[14.735	0.02692	0.001384]	2.669	[14.676	0.02795	0.001362]	2.677	1.008	0.569
[14.676	0.02795	0.001362]	2.677	[14.744	0.02512	0.001376]	2.718	1.042	0.693
[14.744	0.02512	0.001376]	2.718	[14.778	0.02577	0.001263]	2.874	1.169	0.049
[14.778	0.02577	0.001263]	2.874	[14.765	0.02661	0.001233]	2.897	1.022	0.337
[14.765	0.02661	0.001233]	2.897	[14.872	0.02589	0.001173]	3.015	1.125	0.466
[14.872	0.02589	0.001173]	3.015	[14.938	0.02674	0.001263]	2.856	0.853	0.380
[14.938	0.02674	0.001263]	2.856	[14.968	0.02805	0.001249]	2.864	1.008	0.596
[14.968	0.02805	0.001249]	2.864	[15.065	0.02588	0.001407]	2.649	0.807	0.475
[15.065	0.02588	0.001407]	2.649	[15.169	0.02663	0.001229]	2.911	1.299	0.134
[15.169	0.02663	0.001229]	2.911	[15.372	0.02592	0.001210]	2.940	1.030	0.687
[15.372	0.02592	0.001210]	2.940	[15.212	0.02611	0.001209]	2.948	1.008	0.759
[15.212	0.02611	0.001209]	2.948	[15.254	0.02539	0.001245]	2.903	0.956	0.453
[15.254	0.02539	0.001245]	2.903	[15.163	0.02382	0.001264]	2.891	0.988	0.686
[15.163	0.02382	0.001264]	2.891	[15.085	0.02411	0.001077]	3.201	1.364	0.921
[15.085	0.02411	0.001077]	3.201	[15.167	0.02401	0.000998]	3.347	1.158	0.918
[15.167	0.02401	0.000998]	3.347	[15.140	0.02277	0.000957]	3.435	1.091	0.863
[15.140	0.02277	0.000957]	3.435	[15.270	0.02139	0.000992]	3.394	0.960	0.861
[15.270	0.02139	0.000992]	3.394	[15.079	0.02087	0.001091]	3.230	0.848	0.238
[15.079	0.02087	0.001091]	3.230	[15.137	0.01908	0.001088]	3.263	1.033	0.583
[15.137	0.01908	0.001088]	3.263	[14.974	0.01918	0.001100]	3.238	0.976	0.472
[14.974	0.01918	0.001100]	3.238	[15.004	0.01908	0.001039]	3.353	1.122	0.744
[15.004	0.01908	0.001039]	3.353	[14.890	0.01800	0.000946]	3.512	1.172	0.463
[14.890	0.01800	0.000946]	3.512	[15.062	0.01944	0.000788]	3.724	1.236	0.646
[15.062	0.01944	0.000788]	3.724	[15.272	0.02001	0.000761]	3.744	1.020	0.633
[15.272	0.02001	0.000761]	3.744	[15.395	0.02016	0.000705]	3.786	1.043	0.111
[15.395	0.02016	0.000705]	3.786	[15.575	0.01918	0.000517]	3.644	0.868	0.502
[15.575	0.01918	0.000517]	3.644	[15.613	0.01862	0.000641]	3.791	1.158	0.914
[15.613	0.01862	0.000641]	3.791	[15.531	0.01940	0.000720]	3.788	0.998	0.923
[15.531	0.01940	0.000720]	3.788	[15.686	0.01942	0.000785]	3.730	0.943	0.408
[15.686	0.01942	0.000785]	3.730	[15.711	0.02023	0.000796]	3.729	0.999	0.421
[15.711	0.02023	0.000796]	3.729	[15.583	0.02019	0.000823]	3.687	0.959	0.690
[15.583	0.02019	0.000823]	3.687	[15.488	0.01871	0.000997]	3.428	0.772	0.636
[15.488	0.01871	0.000997]	3.428	[15.410	0.01726	0.000792]	3.740	1.366	0.727
[15.410	0.01726	0.000792]	3.740	[15.528	0.01926	0.000864]	3.650	0.915	0.709
[15.528	0.01926	0.000864]	3.650	[15.610	0.01784	0.000934]	3.545	0.900	0.154
[15.610	0.01784	0.000934]	3.545	[15.601	0.01720	0.001005]	3.439	0.900	0.146
[15.601	0.01720	0.001005]	3.439	[15.577	0.01908	0.000851]	3.665	1.253	0.126
[15.577	0.01908	0.000851]	3.665	[15.602	0.01956	0.000899]	3.577	0.916	0.705
[15.602	0.01956	0.000899]	3.577	[15.457	0.02015	0.000959]	3.472	0.900	0.372
[15.457	0.02015	0.000959]	3.472	[15.510	0.02084	0.000847]	3.646	1.191	0.701
[15.510	0.02084	0.000847]	3.646	[15.621	0.01944	0.000643]	3.796	1.162	0.189
[15.621	0.01944	0.000643]	3.796	[15.639	0.02016	0.000741]	3.776	0.980	0.881
[15.639	0.02016	0.000741]	3.776	[15.492	0.02145	0.000686]	3.796	1.021	0.435
[15.492	0.02145	0.000686]	3.796	[15.563	0.02249	0.000849]	3.622	0.840	0.663
[15.563	0.02249	0.000849]	3.622	[15.567	0.02059	0.000848]	3.639	1.017	0.843
[15.567	0.02059	0.000848]	3.639	[15.544	0.01979	0.000999]	3.421	0.804	0.994
[15.567	0.02059	0.000848]	3.639	[15.441	0.01986	0.000748]	3.767	1.136	0.637
[15.441	0.01986	0.000748]	3.767	[15.328	0.01954	0.000690]	3.784	1.017	0.534
[15.328	0.01954	0.000690]	3.784	[15.432	0.01848	0.000802]	3.704	0.923	0.612
[15.432	0.01848	0.000802]	3.704	[15.392	0.01716	0.000954]	3.518	0.831	0.259
[15.392	0.01716	0.000954]	3.518	[15.335	0.01792	0.000938]	3.543	1.025	0.303
[15.335	0.01792	0.000938]	3.543	[15.511	0.01874	0.000786]	3.742	1.221	0.637
[15.511	0.01874	0.000786]	3.742	[15.547	0.01963	0.000771]	3.745	1.003	0.975
[15.547	0.01963	0.000771]	3.745	[15.595	0.02012	0.000756]	3.762	1.017	0.036
[15.595	0.02012	0.000756]	3.762	[15.414	0.02071	0.000772]	3.742	0.980	0.855
[15.414	0.02071	0.000772]	3.742	[15.660	0.02097	0.000754]	3.758	1.016	0.817
[15.660	0.02097	0.000754]	3.758	[15.667	0.02044	0.000748]	3.772	1.014	0.063
[15.667	0.02044	0.000748]	3.772	[15.757	0.02149	0.000576]	3.757	0.986	0.545
[15.757	0.02149	0.000576]	3.757	[15.682	0.02080	0.000528]	3.706	0.950	0.594
[15.682	0.02080	0.000528]	3.706	[15.786	0.02142	0.000574]	3.753	1.048	0.282
[15.786	0.02142	0.000574]	3.753	[15.834	0.02088	0.000636]	3.808	1.056	0.959
[15.834	0.02088	0.000636]	3.808	[15.980	0.02216	0.000488]	3.642	0.847	0.676
[15.980	0.02216	0.000488]	3.642	[16.011	0.02247	0.000589]	3.798	1.170	0.547
[16.011	0.02247	0.000589]	3.798	[16.014	0.02324	0.000452]	3.573	0.798	0.346
[16.014	0.02324	0.000452]	3.573	[16.137	0.02050	0.000384]	3.396	0.838	0.250
[16.137	0.02050	0.000384]	3.396	[16.203	0.02175	0.000440]	3.533	1.147	0.363
[16.203	0.02175	0.000440]	3.533	[16.289	0.02207	0.000526]	3.733	1.222	0.908
[16.289	0.02207	0.000526]	3.733	[16.295	0.02278	0.000649]	3.833	1.104	0.807
[16.295	0.02278	0.000649]	3.833	[16.279	0.02275	0.000750]	3.781	0.949	0.672
[16.279	0.02275	0.000750]	3.781	[16.233	0.02349	0.000737]	3.786	1.005	0.360
[16.233	0.02349	0.000737]	3.786	[16.317	0.02218	0.000811]	3.694	0.912	0.191
[16.317	0.02218	0.000811]	3.694	[16.402	0.02216	0.000773]	3.760	1.069	0.612
[16.402	0.02216	0.000773]	3.760	[16.455	0.02193	0.000714]	3.820	1.062	0.362
[16.455	0.02193	0.000714]	3.820	[16.353	0.02190	0.000722]	3.807	0.987	0.388
[16.353	0.02190	0.000722]	3.807	[16.225	0.02179	0.000747]	3.770	0.963	0.258
[16.225	0.02179	0.000747]	3.770	[16.120	0.02172	0.000711]	3.807	1.038	0.565
[16.120	0.02172	0.000711]	3.807	[16.003	0.02051	0.000588]	3.787	0.980	0.322
[16.003	0.02051	0.000588]	3.787	[16.115	0.02171	0.000552]	3.768	0.981	0.988
[16.003	0.02051	0.000588]	3.787	[15.776	0.02199	0.000569]	3.752	0.966	0.931
[15.776	0.02199	0.000569]	3.752	[15.788	0.02367	0.000596]	3.799	1.049	0.718
[15.788	0.02367	0.000596]	3.799	[16.022	0.02308	0.000706]	3.802	1.003	0.776
[16.022	0.02308	0.000706]	3.802	[16.106	0.02465	0.000726]	3.777	0.975	0.564
[16.106	0.02465	0.000726]	3.777	[16.009	0.02463	0.000731]	3.773	0.996	0.803
[16.009	0.02463	0.000731]	3.773	[15.989	0.02402	0.000653]	3.816	1.044	0.385
[15.989	0.02402	0.000653]	3.816	[16.110	0.02447	0.000509]	3.718	0.906	0.366
[16.110	0.02447	0.000509]	3.718	[16.288	0.02266	0.000480]	3.651	0.936	0.970
[16.110	0.02447	0.000509]	3.718	[15.960	0.02585	0.000467]	3.660	0.944	0.946
[16.110	0.02447	0.000509]	3.718	[15.952	0.02275	0.000571]	3.770	1.053	0.793
[15.952	0.02275	0.000571]	3.770	[15.999	0.02308	0.000418]	3.507	0.769	0.612
[15.999	0.02308	0.000418]	3.507	[16.135	0.02367	0.000375]	3.380	0.880	0.677
[16.135	0.02367	0.000375]	3.380	[16.110	0.02334	0.000438]	3.566	1.205	0.492
[16.110	0.02334	0.000438]	3.566	[16.180	0.02434	0.000452]	3.612	1.047	0.477
[16.180	0.02434	0.000452]	3.612	[16.001	0.02287	0.000367]	3.349	0.769	0.798
[16.180	0.02434	0.000452]	3.612	[16.173	0.02475	0.000288]	3.146	0.628	0.107
[16.173	0.02475	0.000288]	3.146	[16.166	0.02494	0.000176]	2.766	0.684	0.579
[16.166	0.02494	0.000176]	2.766	[16.120	0.02571	0.000146]	2.664	0.903	0.429
[16.120	0.02571	0.000146]	2.664	[16.173	0.02658	0.000097]	2.499	0.848	0.027
[16.173	0.02658	0.000097]	2.499	[16.098	0.02419	0.000021]	2.230	0.764	0.966
[16.173	0.02658	0.000097]	2.499	[16.181	0.02766	0.000221]	2.938	1.551	0.672
[16.181	0.02766	0.000221]	2.938	[16.141	0.02826	0.000413]	3.559	1.860	0.631
[16.141	0.02826	0.000413]	3.559	[16.048	0.02865	0.000329]	3.310	0.780	0.570
[16.048	0.02865	0.000329]	3.310	[16.038	0.02804	0.000370]	3.419	1.115	0.329
[16.038	0.02804	0.000370]	3.419	[15.914	0.02606	0.000457]	3.621	1.224	0.847
[15.914	0.02606	0.000457]	3.621	[15.808	0.02524	0.000569]	3.785	1.178	0.945
[15.808	0.02524	0.000569]	3.785	[15.698	0.02484	0.000494]	3.663	0.885	0.018
[15.698	0.02484	0.000494]	3.663	[15.329	0.02629	0.000646]	3.786	1.130	0.493
[15.329	0.02629	0.000646]	3.786	[15.464	0.02530	0.000728]	3.756	0.971	0.236
[15.464	0.02530	0.000728]	3.756	[15.485	0.02674	0.000826]	3.622	0.875	0.575
[15.485	0.02674	0.000826]	3.622	[15.512	0.02589	0.000863]	3.561	0.941	0.074
[15.512	0.02589	0.000863]	3.561	[15.589	0.02536	0.000801]	3.672	1.117	0.569
[15.589	0.02536	0.000801]	3.672	[15.598	0.02533	0.000752]	3.735	1.065	0.314
[15.598	0.02533	0.000752]	3.735	[15.683	0.02381	0.000684]	3.803	1.071	0.844
[15.683	0.02381	0.000684]	3.803	[15.665	0.02305	0.000801]	3.677	0.881	0.926
[15.683	0.02381	0.000684]	3.803	[15.679	0.02308	0.000867]	3.599	0.816	0.998
[15.683	0.02381	0.000684]	3.803	[15.921	0.02405	0.000726]	3.779	0.976	0.469
[15.921	0.02405	0.000726]	3.779	[15.880	0.02471	0.000602]	3.811	1.032	0.502
[15.880	0.02471	0.000602]	3.811	[15.866	0.02414	0.000517]	3.701	0.896	0.795
[15.866	0.02414	0.000517]	3.701	[15.893	0.02449	0.000530]	3.738	1.038	0.095
[15.893	0.02449	0.000530]	3.738	[15.988	0.02490	0.000600]	3.805	1.069	0.573
[15.988	0.02490	0.000600]	3.805	[15.924	0.02475	0.000448]	3.573	0.793	0.441
[15.924	0.02475	0.000448]	3.573	[15.867	0.02482	0.000519]	3.727	1.166	0.750
[15.867	0.02482	0.000519]	3.727	[15.955	0.02353	0.000631]	3.818	1.096	0.853
[15.955	0.02353	0.000631]	3.818	[15.913	0.02273	0.000584]	3.786	0.968	0.635
[15.913	0.02273	0.000584]	3.786	[15.968	0.02082	0.000479]	3.617	0.844	0.393
[15.968	0.02082	0.000479]	3.617	[16.098	0.02172	0.000372]	3.364	0.777	0.850
[15.968	0.02082	0.000479]	3.617	[15.971	0.02053	0.000367]	3.326	0.748	0.447
[15.971	0.02053	0.000367]	3.326	[16.026	0.02081	0.000349]	3.278	0.953	0.164
[16.026	0.02081	0.000349]	3.278	[15.904	0.02056	0.000253]	2.976	0.739	0.977
[16.026	0.02081	0.000349]	3.278	[16.009	0.02040	0.000367]	3.331	1.055	0.032
[16.009	0.02040	0.000367]	3.331	[16.068	0.02273	0.000371]	3.367	1.036	0.950
[16.068	0.02273	0.000371]	3.367	[16.123	0.02373	0.000371]	3.388	1.021	0.535
[16.123	0.02373	0.000371]	3.388	[16.163	0.02229	0.000316]	3.198	0.827	0.640
[16.163	0.02229	0.000316]	3.198	[16.218	0.02134	0.000125]	2.570	0.534	0.021
[16.218	0.02134	0.000125]	2.570	[16.061	0.02217	0.000028]	2.256	0.731	0.470
[16.061	0.02217	0.000028]	2.256	[16.010	0.02047	-0.000006]	-Inf	0.000	0.952
[16.061	0.02217	0.000028]	2.256	[16.082	0.02310	0.000050]	2.330	1.077	0.067
[16.082	0.02310	0.000050]	2.330	[16.137	0.02229	0.000156]	2.669	1.403	0.913
[16.137	0.02229	0.000156]	2.669	[16.062	0.02086	0.000172]	2.719	1.051	0.387
[16.062	0.02086	0.000172]	2.719	[15.950	0.02201	0.000166]	2.697	0.978	0.135
[15.950	0.02201	0.000166]	2.697	[15.822	0.02284	0.000200]	2.822	1.133	0.794
[15.822	0.02284	0.000200]	2.822	[15.791	0.02155	0.000129]	2.572	0.779	0.475
[15.791	0.02155	0.000129]	2.572	[15.996	0.02085	0.000127]	2.573	1.001	0.893
[15.996	0.02085	0.000127]	2.573	[15.943	0.02177	0.000146]	2.635	1.064	0.254
[15.943	0.02177	0.000146]	2.635	[15.941	0.02149	0.000139]	2.615	0.980	0.196
[15.941	0.02149	0.000139]	2.615	[16.015	0.01957	0.000054]	2.338	0.758	0.431
[16.015	0.01957	0.000054]	2.338	[15.910	0.01871	-0.000028]	-Inf	0.000	0.824
[16.015	0.01957	0.000054]	2.338	[16.165	0.01878	-0.000070]	-Inf	0.000	0.944
[16.015	0.01957	0.000054]	2.338	[16.023	0.02083	-0.000264]	-Inf	0.000	0.660
[16.015	0.01957	0.000054]	2.338	[16.088	0.02236	-0.000012]	-Inf	0.000	0.560
[16.015	0.01957	0.000054]	2.338	[15.822	0.01820	0.000086]	2.429	1.096	0.318
[15.822	0.01820	0.000086]	2.429	[15.566	0.01749	0.000140]	2.583	1.166	0.105
[15.566	0.01749	0.000140]	2.583	[15.580	0.01628	0.000035]	2.269	0.730	0.171
[15.580	0.01628	0.000035]	2.269	[15.416	0.01718	-0.000061]	-Inf	0.000	0.828
[15.580	0.01628	0.000035]	2.269	[15.489	0.01891	0.000245]	2.938	1.953	0.042
[15.489	0.01891	0.000245]	2.938	[15.507	0.01952	0.000263]	2.979	1.042	0.498
[15.507	0.01952	0.000263]	2.979	[15.658	0.02091	0.000317]	3.172	1.213	0.705
[15.658	0.02091	0.000317]	3.172	[15.902	0.02009	0.000425]	3.504	1.393	0.819
[15.902	0.02009	0.000425]	3.504	[15.965	0.02053	0.000552]	3.727	1.250	0.602
[15.965	0.02053	0.000552]	3.727	[16.018	0.01972	0.000591]	3.795	1.070	0.862
[16.018	0.01972	0.000591]	3.795	[16.049	0.01932	0.000704]	3.812	1.018	0.306
[16.049	0.01932	0.000704]	3.812	[16.150	0.01949	0.000743]	3.803	0.991	0.588
[16.150	0.01949	0.000743]	3.803	[16.186	0.01969	0.000739]	3.795	0.992	0.592
[16.186	0.01969	0.000739]	3.795	[16.346	0.01858	0.000636]	3.821	1.026	0.602
[16.346	0.01858	0.000636]	3.821	[16.435	0.01815	0.000448]	3.537	0.753	0.908
[16.346	0.01858	0.000636]	3.821	[16.307	0.01787	0.000750]	3.798	0.977	0.155
[16.307	0.01787	0.000750]	3.798	[16.287	0.01696	0.000927]	3.568	0.795	0.829
[16.307	0.01787	0.000750]	3.798	[16.312	0.01709	0.000692]	3.826	1.029	0.943
[16.312	0.01709	0.000692]	3.826	[16.262	0.01753	0.000577]	3.782	0.957	0.204
[16.262	0.01753	0.000577]	3.782	[16.357	0.01685	0.000526]	3.697	0.918	0.327
[16.357	0.01685	0.000526]	3.697	[16.377	0.01829	0.000586]	3.794	1.102	0.140
[16.377	0.01829	0.000586]	3.794	[16.367	0.01747	0.000379]	3.345	0.638	0.578
[16.367	0.01747	0.000379]	3.345	[16.378	0.01615	0.000219]	2.848	0.609	0.449
[16.378	0.01615	0.000219]	2.848	[16.556	0.01553	0.000292]	3.078	1.258	0.910
[16.556	0.01553	0.000292]	3.078	[16.379	0.01638	0.000270]	3.013	0.937	0.562
[16.379	0.01638	0.000270]	3.013	[16.308	0.01549	0.000073]	2.385	0.534	0.159
[16.308	0.01549	0.000073]	2.385	[16.379	0.01614	0.000063]	2.352	0.967	0.419
[16.379	0.01614	0.000063]	2.352	[16.448	0.01662	0.000120]	2.542	1.209	0.724
[16.448	0.01662	0.000120]	2.542	[16.434	0.01640	0.000061]	2.360	0.834	0.570
[16.434	0.01640	0.000061]	2.360	[16.214	0.01608	0.000087]	2.429	1.071	0.678
[16.214	0.01608	0.000087]	2.429	[16.145	0.01758	-0.000067]	-Inf	0.000	0.850
[16.214	0.01608	0.000087]	2.429	[16.333	0.01762	0.000228]	2.883	1.575	0.690
[16.333	0.01762	0.000228]	2.883	[16.313	0.01745	0.000384]	3.371	1.630	0.905
[16.313	0.01745	0.000384]	3.371	[16.043	0.01664	0.000410]	3.416	1.046	0.753
[16.043	0.01664	0.000410]	3.416	[16.031	0.01663	0.000616]	3.799	1.467	0.338
[16.031	0.01663	0.000616]	3.799	[16.190	0.01767	0.000606]	3.809	1.010	0.268
[16.190	0.01767	0.000606]	3.809	[16.365	0.01737	0.000591]	3.799	0.990	0.305
[16.365	0.01737	0.000591]	3.799	[16.265	0.01845	0.000522]	3.696	0.902	0.428
[16.265	0.01845	0.000522]	3.696	[16.133	0.01780	0.000639]	3.808	1.119	0.449
[16.133	0.01780	0.000639]	3.808	[16.029	0.01749	0.000701]	3.813	1.005	0.058
[16.029	0.01749	0.000701]	3.813	[15.889	0.01595	0.000719]	3.809	0.996	0.963
[15.889	0.01595	0.000719]	3.809	[15.949	0.01757	0.000650]	3.815	1.006	0.927
[15.949	0.01757	0.000650]	3.815	[15.799	0.01872	0.000751]	3.789	0.974	0.795
[15.799	0.01872	0.000751]	3.789	[15.766	0.01985	0.000814]	3.712	0.926	0.154
[15.766	0.01985	0.000814]	3.712	[15.636	0.02067	0.000923]	3.528	0.833	0.376
[15.636	0.02067	0.000923]	3.528	[15.623	0.01948	0.001119]	3.195	0.717	0.245
[15.623	0.01948	0.001119]	3.195	[15.628	0.01968	0.001083]	3.268	1.076	0.271
[15.628	0.01968	0.001083]	3.268	[15.706	0.01932	0.001152]	3.147	0.886	0.454
[15.706	0.01932	0.001152]	3.147	[15.765	0.02001	0.001274]	2.913	0.791	0.409
[15.765	0.02001	0.001274]	2.913	[15.792	0.01907	0.001240]	2.986	1.077	0.206
[15.792	0.01907	0.001240]	2.986	[15.781	0.01933	0.001113]	3.207	1.247	0.726
[15.781	0.01933	0.001113]	3.207	[15.798	0.01869	0.000992]	3.434	1.255	0.971
[15.798	0.01869	0.000992]	3.434	[15.759	0.01804	0.001052]	3.335	0.906	0.326
[15.759	0.01804	0.001052]	3.335	[15.706	0.01777	0.000979]	3.471	1.146	0.298
[15.706	0.01777	0.000979]	3.471	[15.538	0.01785	0.001127]	3.213	0.772	0.029
[15.538	0.01785	0.001127]	3.213	[15.652	0.01805	0.001158]	3.143	0.933	0.058
[15.652	0.01805	0.001158]	3.143	[15.627	0.01851	0.001012]	3.406	1.300	0.002
[15.627	0.01851	0.001012]	3.406	[15.675	0.01748	0.001012]	3.412	1.006	0.219
[15.675	0.01748	0.001012]	3.412	[15.615	0.01959	0.000966]	3.464	1.052	0.205
[15.615	0.01959	0.000966]	3.464	[15.439	0.02116	0.001129]	3.156	0.735	0.033
[15.439	0.02116	0.001129]	3.156	[15.584	0.02403	0.001185]	3.008	0.862	0.473
[15.584	0.02403	0.001185]	3.008	[15.708	0.02211	0.001107]	3.182	1.190	0.932
[15.708	0.02211	0.001107]	3.182	[15.734	0.02204	0.001113]	3.158	0.976	0.165
[15.734	0.02204	0.001113]	3.158	[15.730	0.02048	0.001064]	3.288	1.140	0.557
[15.730	0.02048	0.001064]	3.288	[15.617	0.02095	0.000901]	3.558	1.309	0.683
[15.617	0.02095	0.000901]	3.558	[15.671	0.02015	0.001024]	3.364	0.824	0.919
[15.617	0.02095	0.000901]	3.558	[15.613	0.02138	0.001014]	3.366	0.826	0.337
[15.613	0.02138	0.001014]	3.366	[15.606	0.02055	0.001012]	3.376	1.010	0.277
[15.606	0.02055	0.001012]	3.376	[15.435	0.01995	0.000856]	3.633	1.292	0.943
[15.435	0.01995	0.000856]	3.633	[15.397	0.02105	0.000798]	3.703	1.073	0.596
[15.397	0.02105	0.000798]	3.703	[15.318	0.02155	0.000839]	3.648	0.946	0.190
[15.318	0.02155	0.000839]	3.648	[15.293	0.02106	0.000864]	3.618	0.971	0.146
[15.293	0.02106	0.000864]	3.618	[15.157	0.02036	0.001022]	3.360	0.773	0.025
[15.157	0.02036	0.001022]	3.360	[15.193	0.02118	0.000973]	3.444	1.088	0.871
[15.193	0.02118	0.000973]	3.444	[14.892	0.02179	0.000958]	3.451	1.007	0.271
[14.892	0.02179	0.000958]	3.451	[14.995	0.02123	0.001073]	3.248	0.817	0.020
[14.995	0.02123	0.001073]	3.248	[15.206	0.02020	0.001102]	3.227	0.979	0.534
[15.206	0.02020	0.001102]	3.227	[15.230	0.02122	0.001009]	3.368	1.151	0.206
[15.230	0.02122	0.001009]	3.368	[15.187	0.02298	0.000953]	3.439	1.074	0.472
[15.187	0.02298	0.000953]	3.439	[15.200	0.02314	0.001065]	3.246	0.824	0.738
[15.200	0.02314	0.001065]	3.246	[15.301	0.02236	0.001057]	3.275	1.029	0.144
[15.301	0.02236	0.001057]	3.275	[15.212	0.02250	0.000989]	3.392	1.125	0.355
[15.212	0.02250	0.000989]	3.392	