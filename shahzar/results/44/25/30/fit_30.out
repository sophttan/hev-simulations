
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 284765 15.3     664565 35.5   464468 24.9
Vcells 490458  3.8    8388608 64.0  1837328 14.1
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> message(detectCores())
24
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inf = 7, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                      SIZE = rep(hh_size, times = hh_size),
+                      HH = rep(1:length(hh_size), times = hh_size), 
+                      S = c(0, rep(1, N - 1)), 
+                      E = c(1, rep(0, N - 1)),
+                      E_count = c(1, rep(0, N - 1)), 
+                      I = 0,
+                      I_count = 0, 
+                      R = 0, 
+                      INC = c(rlnorm(1, meanlog = log(29.8), sdlog = 0.45), rep(0, N - 1)),
+                      INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_NUM: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_NUM: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_NUM = NA, I_NUM = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_TOT = sum(S)) %>% 
+         select(HH, S_TOT)
+       results$S_NUM[new_inf == 1] <- S_data$S_TOT[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     beta_H <- params[1]
+     beta_C <- params[2]
+     beta_E <- params[3]
+     risk_H <- pmin(beta_H * data$S * I_data$I_H / N, 1)
+     risk_C <- pmin(beta_C * data$S * I_data$I_C / N, 1)
+     risk_E <- pmin(beta_E * data$S, 1)
+ 
+     new_inf_H <- rbinom(N, 1, risk_H)
+     new_inf_C <- rbinom(N, 1, risk_C)
+     new_inf_E <- rbinom(N, 1, risk_E)
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1) | (new_inf_E == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rlnorm(num_new_exposed, meanlog = log(29.8), sdlog = 0.45) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_NUM <- results$I_NUM + I_data$new_I_H
+       
+       # Label infections types.
+       results$TYPE[new_inf_H == 1] <- 'H'
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_E == 1] <- 'E'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'HC'
+       results$TYPE[(new_inf_H == 1) & (new_inf_E == 1)] <- 'HE'
+       results$TYPE[(new_inf_C == 1) & (new_inf_E == 1)] <- 'CE'
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1) & (new_inf_E == 1)] <- 'HCE'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   prp <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_NUM / results$S_NUM, na.rm = T)
+     cases <- results[!is.na(results$TIME), ]
+     prp <- mean((cases$TYPE == 'H') | (cases$TYPE == 'HC') | (cases$TYPE == 'HCE'))
+   }
+   return(c(idc, sar, prp))
+ }
> 
> ##############################
> #### Metropolis Algorithm ####
> ##############################
> score <- function(fit, tgt) {
+   # The score is the L² distance of the observed values from the target.
+   return(sum((fit - tgt)^2))
+ }
> 
> # The likelihood is calculated by first averaging the incidence and SAR over n
> # simulations with the state parameters. The likelihood is the negative log
> # score of the average incidence and SAR.
> likelihood <- function(state, tgt, n = 300) {
+   # If either parameter is nonpositive, do not transition to that state.
+   if (any(state < 0)) {
+     return(-Inf)
+   }
+   # Otherwise, find the average incidence and SAR and compute likelihood.
+   vals <- foreach (i = 1:n, .combine = c) %dopar% {
+     results <- SEIR(state)
+     metrics(results)
+   }
+   vals <- matrix(vals, n, byrow = T)
+   fit <- colMeans(vals)
+   return(-log(score(fit, tgt)))
+ }
> 
> # Proposal function
> q <- function(state, sds = c(0.1, 0.001, 0.00001)) {
+   # Sample from a multivariate normal distributions centered at the current 
+   # state. The SDs roughly correspond to the step-size of the chain for each 
+   # parameter.
+   return(rnorm(n = 3, mean = state, sd = sds))
+ }
> 
> # MCMC
> metropolis <- function(start, tgt, num_sim, num_iter) {
+   path <- matrix(NA, num_iter + 1, 3)
+   liks <- rep(NA, num_iter + 1)
+   
+   # Initialize current state.
+   curr <- start
+   curr_lik <- likelihood(curr, tgt, num_sim)
+   
+   # Initialize best state.
+   best <- curr
+   best_lik <- curr_lik
+   for (i in 1:num_iter) {
+     # Save the current state and its likelihood.
+     path[i, ] <- curr
+     liks[i] <- curr_lik
+       
+     cat('[', 
+         format(round(curr[1], 3), nsmall = 3), '\t', 
+         format(round(curr[2], 5), nsmall = 5), '\t', 
+         format(round(curr[3], 6), nsmall = 6, scientific = F), ']\t',
+         format(round(curr_lik, 3), nsmall = 3), '\t', sep = '')
+     
+     # Get a proposed state and calculate its likelihood.
+     prop <- q(curr)
+     prop_lik <- likelihood(prop, tgt, num_sim)
+     
+     cat('[', 
+         format(round(prop[1], 3), nsmall = 3), '\t', 
+         format(round(prop[2], 5), nsmall = 5), '\t', 
+         format(round(prop[3], 6), nsmall = 6, scientific = F), ']\t',
+         format(round(prop_lik, 3), nsmall = 3), '\t', sep = '')
+       
+     # Compute the ratio of the scores of the two states and generate a uniform 
+     # bit.
+     r <- exp(prop_lik - curr_lik)
+     p <- runif(1)
+     
+     # Print the current progress.
+     cat(format(round(r, 3), nsmall = 3), '\t', format(round(p, 3), nsmall = 3), '\n', sep = '')
+     
+     # Transition if the proposed state is better or if the coin flip succeeds.
+     if (p < r) { 
+       curr <- prop
+       curr_lik <- prop_lik
+       
+       # If the new likelihood is better than the best we've seen so far, replace 
+       # the best.
+       if (curr_lik > best_lik) {
+         best <- curr
+         best_lik <- curr_lik
+       }
+     }
+     
+     # Save the path, best state, and likelihoods so far.
+     write.table(path, file = 'path.txt', row.names = F, col.names = F)
+     write.table(liks, file = 'liks.txt', row.names = F, col.names = F)
+     write.table(best, file = 'best.txt', row.names = F, col.names = F)
+   }
+   path[num_iter + 1, ] <- curr
+   liks[num_iter + 1] <- curr_lik
+   return(list(path, liks, best))
+ }
> 
> # Solve for optimal values via MCMC.
> tgt <- c(0.30, 0.08, 0.25)
> start <- c(12, 0.005, 0.00080)
> results <- metropolis(start, tgt, num_sim = 300, num_iter = 1000)
[12.000	0.00500	0.000800]	6.924	[11.980	0.00454	0.000805]	7.139	1.240	0.201
[11.980	0.00454	0.000805]	7.139	[11.947	0.00396	0.000802]	6.713	0.653	0.436
[11.947	0.00396	0.000802]	6.713	[11.937	0.00069	0.000795]	6.818	1.111	0.980
[11.937	0.00069	0.000795]	6.818	[11.950	0.00097	0.000785]	6.745	0.930	0.796
[11.950	0.00097	0.000785]	6.745	[11.940	-0.00065	0.000773]	-Inf	0.000	0.118
[11.950	0.00097	0.000785]	6.745	[11.918	0.00203	0.000784]	6.784	1.040	0.798
[11.918	0.00203	0.000784]	6.784	[11.879	0.00336	0.000798]	6.827	1.044	0.267
[11.879	0.00336	0.000798]	6.827	[11.909	0.00390	0.000784]	6.951	1.132	0.519
[11.909	0.00390	0.000784]	6.951	[11.948	0.00484	0.000791]	6.881	0.932	0.283
[11.948	0.00484	0.000791]	6.881	[11.831	0.00485	0.000801]	6.724	0.855	0.432
[11.831	0.00485	0.000801]	6.724	[11.960	0.00448	0.000802]	7.067	1.410	0.493
[11.960	0.00448	0.000802]	7.067	[12.113	0.00418	0.000809]	7.048	0.981	0.626
[12.113	0.00418	0.000809]	7.048	[12.243	0.00407	0.000813]	7.046	0.998	0.734
[12.243	0.00407	0.000813]	7.046	[12.170	0.00353	0.000815]	7.181	1.144	0.326
[12.170	0.00353	0.000815]	7.181	[12.267	0.00308	0.000821]	7.134	0.955	0.219
[12.267	0.00308	0.000821]	7.134	[12.228	0.00224	0.000846]	7.178	1.045	0.133
[12.228	0.00224	0.000846]	7.178	[12.134	0.00262	0.000857]	6.801	0.686	0.615
[12.134	0.00262	0.000857]	6.801	[12.095	0.00322	0.000866]	6.662	0.870	0.045
[12.095	0.00322	0.000866]	6.662	[12.161	0.00417	0.000859]	6.818	1.169	0.613
[12.161	0.00417	0.000859]	6.818	[12.140	0.00389	0.000871]	6.738	0.923	0.207
[12.140	0.00389	0.000871]	6.738	[12.234	0.00482	0.000865]	6.802	1.066	0.175
[12.234	0.00482	0.000865]	6.802	[12.278	0.00439	0.000863]	6.941	1.149	0.963
[12.278	0.00439	0.000863]	6.941	[12.206	0.00182	0.000841]	7.007	1.069	0.963
[12.206	0.00182	0.000841]	7.007	[12.158	0.00162	0.000833]	7.109	1.107	0.272
[12.158	0.00162	0.000833]	7.109	[12.357	-0.00066	0.000844]	-Inf	0.000	0.094
[12.158	0.00162	0.000833]	7.109	[12.141	0.00280	0.000816]	7.048	0.941	0.090
[12.141	0.00280	0.000816]	7.048	[12.251	0.00207	0.000815]	7.351	1.354	0.575
[12.251	0.00207	0.000815]	7.351	[12.001	0.00299	0.000829]	6.937	0.661	0.087
[12.001	0.00299	0.000829]	6.937	[11.984	0.00163	0.000820]	6.931	0.995	0.039
[11.984	0.00163	0.000820]	6.931	[11.899	0.00197	0.000824]	6.781	0.860	0.232
[11.899	0.00197	0.000824]	6.781	[11.791	0.00161	0.000814]	6.773	0.992	0.772
[11.791	0.00161	0.000814]	6.773	[11.737	0.00216	0.000809]	6.768	0.995	0.874
[11.737	0.00216	0.000809]	6.768	[11.584	0.00244	0.000807]	6.591	0.837	0.016
[11.584	0.00244	0.000807]	6.591	[11.446	0.00147	0.000808]	6.418	0.841	0.663
[11.446	0.00147	0.000808]	6.418	[11.409	0.00178	0.000809]	6.431	1.013	0.038
[11.409	0.00178	0.000809]	6.431	[11.471	0.00145	0.000801]	6.355	0.927	0.314
[11.471	0.00145	0.000801]	6.355	[11.409	0.00093	0.000774]	6.193	0.851	0.823
[11.409	0.00093	0.000774]	6.193	[11.438	0.00067	0.000766]	6.216	1.023	0.038
[11.438	0.00067	0.000766]	6.216	[11.539	5e-05	0.000767]	6.377	1.174	0.053
[11.539	5e-05	0.000767]	6.377	[11.558	-8e-05	0.000745]	-Inf	0.000	0.444
[11.539	5e-05	0.000767]	6.377	[11.556	0.00149	0.000753]	6.231	0.865	0.269
[11.556	0.00149	0.000753]	6.231	[11.586	0.00212	0.000754]	6.440	1.232	0.173
[11.586	0.00212	0.000754]	6.440	[11.517	0.00198	0.000767]	6.224	0.806	0.097
[11.517	0.00198	0.000767]	6.224	[11.464	0.00245	0.000783]	6.490	1.304	0.552
[11.464	0.00245	0.000783]	6.490	[11.729	0.00206	0.000794]	6.564	1.077	0.130
[11.729	0.00206	0.000794]	6.564	[11.869	0.00143	0.000798]	6.695	1.140	0.800
[11.869	0.00143	0.000798]	6.695	[11.777	0.00134	0.000790]	6.812	1.123	0.283
[11.777	0.00134	0.000790]	6.812	[11.733	4e-04	0.000797]	6.749	0.939	0.920
[11.733	4e-04	0.000797]	6.749	[11.567	0.00052	0.000805]	6.476	0.761	0.329
[11.567	0.00052	0.000805]	6.476	[11.538	0.00114	0.000799]	6.467	0.991	0.569
[11.538	0.00114	0.000799]	6.467	[11.635	0.00153	0.000803]	6.538	1.073	0.136
[11.635	0.00153	0.000803]	6.538	[11.625	0.00223	0.000801]	6.517	0.980	0.681
[11.625	0.00223	0.000801]	6.517	[11.637	0.00146	0.000812]	6.585	1.070	0.092
[11.637	0.00146	0.000812]	6.585	[11.500	0.00152	0.000798]	6.490	0.910	0.375
[11.500	0.00152	0.000798]	6.490	[11.584	0.00224	0.000799]	6.471	0.981	0.795
[11.584	0.00224	0.000799]	6.471	[11.631	0.00300	0.000785]	6.552	1.084	0.108
[11.631	0.00300	0.000785]	6.552	[11.637	0.00632	0.000793]	6.529	0.978	0.694
[11.637	0.00632	0.000793]	6.529	[11.533	0.00610	0.000799]	6.483	0.955	0.552
[11.533	0.00610	0.000799]	6.483	[11.508	0.00445	0.000788]	6.428	0.946	0.308
[11.508	0.00445	0.000788]	6.428	[11.479	0.00427	0.000791]	6.414	0.986	0.495
[11.479	0.00427	0.000791]	6.414	[11.451	0.00393	0.000803]	6.477	1.065	0.208
[11.451	0.00393	0.000803]	6.477	[11.586	0.00373	0.000801]	6.400	0.926	0.108
[11.586	0.00373	0.000801]	6.400	[11.520	0.00215	0.000792]	6.403	1.003	0.748
[11.520	0.00215	0.000792]	6.403	[11.553	0.00318	0.000771]	6.421	1.018	0.006
[11.553	0.00318	0.000771]	6.421	[11.580	0.00315	0.000768]	6.580	1.172	0.504
[11.580	0.00315	0.000768]	6.580	[11.583	0.00275	0.000770]	6.453	0.881	0.351
[11.583	0.00275	0.000770]	6.453	[11.623	0.00313	0.000777]	6.463	1.010	0.641
[11.623	0.00313	0.000777]	6.463	[11.335	0.00147	0.000779]	6.213	0.779	0.880
[11.623	0.00313	0.000777]	6.463	[11.577	0.00187	0.000786]	6.463	1.000	0.618
[11.577	0.00187	0.000786]	6.463	[11.521	0.00224	0.000782]	6.449	0.987	0.884
[11.521	0.00224	0.000782]	6.449	[11.451	0.00200	0.000774]	6.297	0.858	0.358
[11.451	0.00200	0.000774]	6.297	[11.405	-1e-04	0.000760]	-Inf	0.000	0.600
[11.451	0.00200	0.000774]	6.297	[11.439	0.00232	0.000780]	6.312	1.016	0.765
[11.439	0.00232	0.000780]	6.312	[11.506	0.00190	0.000769]	6.449	1.146	0.099
[11.506	0.00190	0.000769]	6.449	[11.420	0.00273	0.000776]	6.418	0.970	0.910
[11.420	0.00273	0.000776]	6.418	[11.269	0.00279	0.000755]	6.116	0.739	0.309
[11.269	0.00279	0.000755]	6.116	[11.267	0.00342	0.000760]	6.188	1.075	0.065
[11.267	0.00342	0.000760]	6.188	[11.257	0.00482	0.000743]	6.124	0.938	0.088
[11.257	0.00482	0.000743]	6.124	[11.412	0.00593	0.000730]	6.157	1.034	0.162
[11.412	0.00593	0.000730]	6.157	[11.462	0.00590	0.000732]	6.227	1.072	0.821
[11.462	0.00590	0.000732]	6.227	[11.565	0.00775	0.000730]	6.383	1.169	0.954
[11.565	0.00775	0.000730]	6.383	[11.648	0.00863	0.000729]	6.449	1.069	0.974
[11.648	0.00863	0.000729]	6.449	[11.630	0.00910	0.000722]	6.439	0.990	0.264
[11.630	0.00910	0.000722]	6.439	[11.710	0.00996	0.000722]	6.565	1.134	0.641
[11.710	0.00996	0.000722]	6.565	[11.640	0.00686	0.000721]	6.384	0.835	0.317
[11.640	0.00686	0.000721]	6.384	[11.700	0.00637	0.000734]	6.565	1.198	0.061
[11.700	0.00637	0.000734]	6.565	[11.935	0.00684	0.000741]	6.659	1.098	0.103
[11.935	0.00684	0.000741]	6.659	[12.041	0.00732	0.000735]	6.869	1.235	0.601
[12.041	0.00732	0.000735]	6.869	[12.115	0.00649	0.000741]	6.725	0.865	0.976
[12.041	0.00732	0.000735]	6.869	[12.044	0.00897	0.000751]	7.022	1.165	0.034
[12.044	0.00897	0.000751]	7.022	[11.996	0.00745	0.000754]	6.868	0.858	0.239
[11.996	0.00745	0.000754]	6.868	[11.843	0.00697	0.000767]	6.664	0.815	0.126
[11.843	0.00697	0.000767]	6.664	[11.875	0.00734	0.000767]	6.699	1.036	0.743
[11.875	0.00734	0.000767]	6.699	[11.909	0.00894	0.000767]	6.956	1.292	0.428
[11.909	0.00894	0.000767]	6.956	[11.924	0.01020	0.000765]	6.995	1.040	0.671
[11.924	0.01020	0.000765]	6.995	[11.877	0.00962	0.000770]	6.882	0.893	0.689
[11.877	0.00962	0.000770]	6.882	[11.938	0.01018	0.000780]	6.853	0.971	0.650
[11.938	0.01018	0.000780]	6.853	[12.025	0.01090	0.000779]	7.019	1.180	0.983
[12.025	0.01090	0.000779]	7.019	[12.061	0.01045	0.000781]	7.030	1.012	0.579
[12.061	0.01045	0.000781]	7.030	[12.360	0.01003	0.000782]	7.371	1.406	0.203
[12.360	0.01003	0.000782]	7.371	[12.349	0.01203	0.000779]	7.404	1.034	0.495
[12.349	0.01203	0.000779]	7.404	[12.304	0.01183	0.000783]	7.053	0.704	0.942
[12.349	0.01203	0.000779]	7.404	[12.520	0.01295	0.000769]	7.465	1.063	0.993
[12.520	0.01295	0.000769]	7.465	[12.583	0.01366	0.000789]	7.293	0.842	0.338
[12.583	0.01366	0.000789]	7.293	[12.488	0.01505	0.000783]	7.073	0.803	0.542
[12.488	0.01505	0.000783]	7.073	[12.577	0.01433	0.000792]	7.147	1.076	0.343
[12.577	0.01433	0.000792]	7.147	[12.535	0.01498	0.000781]	7.198	1.053	0.760
[12.535	0.01498	0.000781]	7.198	[12.445	0.01453	0.000789]	6.980	0.804	0.126
[12.445	0.01453	0.000789]	6.980	[12.473	0.01544	0.000775]	7.203	1.249	0.931
[12.473	0.01544	0.000775]	7.203	[12.541	0.01579	0.000782]	7.088	0.891	0.509
[12.541	0.01579	0.000782]	7.088	[12.486	0.01562	0.000793]	6.917	0.843	0.495
[12.486	0.01562	0.000793]	6.917	[12.635	0.01535	0.000804]	6.939	1.022	0.160
[12.635	0.01535	0.000804]	6.939	[12.739	0.01690	0.000793]	6.967	1.029	0.353
[12.739	0.01690	0.000793]	6.967	[12.602	0.01716	0.000791]	6.873	0.911	0.766
[12.602	0.01716	0.000791]	6.873	[12.678	0.01657	0.000803]	6.739	0.874	0.431
[12.678	0.01657	0.000803]	6.739	[12.752	0.01787	0.000798]	6.970	1.260	0.193
[12.752	0.01787	0.000798]	6.970	[12.733	0.01722	0.000808]	6.698	0.762	0.869
[12.752	0.01787	0.000798]	6.970	[12.960	0.01848	0.000794]	6.956	0.987	0.628
[12.960	0.01848	0.000794]	6.956	[12.893	0.01811	0.000782]	7.136	1.197	0.246
[12.893	0.01811	0.000782]	7.136	[12.869	0.01980	0.000789]	6.783	0.702	0.721
[12.893	0.01811	0.000782]	7.136	[12.899	0.02006	0.000784]	6.846	0.748	0.607
[12.899	0.02006	0.000784]	6.846	[12.825	0.02113	0.000795]	6.571	0.760	0.026
[12.825	0.02113	0.000795]	6.571	[12.864	0.02187	0.000802]	6.463	0.898	0.957
[12.825	0.02113	0.000795]	6.571	[12.899	0.02118	0.000788]	6.700	1.137	0.453
[12.899	0.02118	0.000788]	6.700	[12.678	0.02045	0.000796]	6.591	0.897	0.307
[12.678	0.02045	0.000796]	6.591	[12.619	0.02061	0.000775]	6.844	1.288	0.089
[12.619	0.02061	0.000775]	6.844	[12.649	0.02022	0.000788]	6.727	0.890	0.226
[12.649	0.02022	0.000788]	6.727	[12.643	0.01984	0.000776]	6.870	1.153	0.172
[12.643	0.01984	0.000776]	6.870	[12.696	0.02039	0.000764]	7.146	1.319	0.539
[12.696	0.02039	0.000764]	7.146	[12.494	0.01960	0.000771]	6.882	0.768	0.421
[12.494	0.01960	0.000771]	6.882	[12.442	0.01941	0.000759]	7.063	1.198	0.594
[12.442	0.01941	0.000759]	7.063	[12.539	0.01997	0.000754]	7.186	1.131	0.764
[12.539	0.01997	0.000754]	7.186	[12.354	0.01987	0.000765]	6.883	0.738	0.671
[12.354	0.01987	0.000765]	6.883	[12.207	0.01983	0.000755]	6.860	0.978	0.590
[12.207	0.01983	0.000755]	6.860	[12.420	0.02007	0.000757]	7.011	1.163	0.688
[12.420	0.02007	0.000757]	7.011	[12.449	0.02131	0.000744]	7.214	1.224	0.065
[12.449	0.02131	0.000744]	7.214	[12.316	0.02177	0.000752]	6.907	0.736	0.502
[12.316	0.02177	0.000752]	6.907	[12.346	0.02239	0.000752]	6.921	1.014	0.288
[12.346	0.02239	0.000752]	6.921	[12.127	0.02278	0.000763]	6.643	0.757	0.263
[12.127	0.02278	0.000763]	6.643	[12.062	0.02198	0.000762]	6.667	1.024	0.204
[12.062	0.02198	0.000762]	6.667	[12.121	0.02130	0.000778]	6.595	0.931	0.906
[12.121	0.02130	0.000778]	6.595	[12.167	0.02144	0.000808]	6.236	0.698	0.551
[12.167	0.02144	0.000808]	6.236	[12.246	0.02259	0.000804]	6.247	1.011	0.779
[12.246	0.02259	0.000804]	6.247	[12.132	0.02388	0.000803]	6.095	0.859	0.875
[12.246	0.02259	0.000804]	6.247	[12.245	0.02178	0.000813]	6.215	0.968	0.971
[12.246	0.02259	0.000804]	6.247	[12.174	0.02229	0.000797]	6.278	1.031	0.504
[12.174	0.02229	0.000797]	6.278	[12.136	0.02203	0.000807]	6.277	0.999	0.854
[12.136	0.02203	0.000807]	6.277	[12.143	0.02348	0.000810]	6.050	0.797	0.293
[12.143	0.02348	0.000810]	6.050	[12.352	0.02365	0.000807]	6.066	1.016	0.158
[12.352	0.02365	0.000807]	6.066	[12.449	0.02496	0.000800]	6.176	1.116	0.503
[12.449	0.02496	0.000800]	6.176	[12.250	0.02482	0.000810]	6.018	0.854	0.242
[12.250	0.02482	0.000810]	6.018	[12.241	0.02569	0.000795]	6.003	0.985	0.815
[12.241	0.02569	0.000795]	6.003	[12.147	0.02652	0.000789]	6.020	1.017	0.334
[12.147	0.02652	0.000789]	6.020	[12.138	0.02723	0.000776]	6.177	1.170	0.038
[12.138	0.02723	0.000776]	6.177	[12.108	0.02581	0.000755]	6.503	1.386	0.826
[12.108	0.02581	0.000755]	6.503	[12.063	0.02619	0.000760]	6.346	0.855	0.165
[12.063	0.02619	0.000760]	6.346	[12.141	0.02639	0.000760]	6.434	1.092	0.704
[12.141	0.02639	0.000760]	6.434	[12.146	0.02671	0.000755]	6.472	1.039	0.941
[12.146	0.02671	0.000755]	6.472	[12.118	0.02633	0.000741]	6.622	1.162	0.884
[12.118	0.02633	0.000741]	6.622	[12.178	0.02672	0.000761]	6.389	0.792	0.860
[12.118	0.02633	0.000741]	6.622	[12.064	0.02713	0.000741]	6.588	0.966	0.658
[12.064	0.02713	0.000741]	6.588	[12.030	0.02953	0.000754]	6.167	0.656	0.685
[12.064	0.02713	0.000741]	6.588	[12.160	0.02959	0.000755]	6.280	0.735	0.650
[12.160	0.02959	0.000755]	6.280	[12.214	0.02917	0.000777]	5.989	0.747	0.261
[12.214	0.02917	0.000777]	5.989	[12.252	0.02835	0.000759]	6.341	1.422	0.287
[12.252	0.02835	0.000759]	6.341	[12.399	0.02853	0.000752]	6.402	1.063	0.889
[12.399	0.02853	0.000752]	6.402	[12.220	0.02805	0.000753]	6.457	1.056	0.908
[12.220	0.02805	0.000753]	6.457	[12.217	0.02698	0.000753]	6.457	1.001	0.098
[12.217	0.02698	0.000753]	6.457	[12.300	0.02403	0.000749]	6.743	1.330	0.599
[12.300	0.02403	0.000749]	6.743	[12.387	0.02461	0.000739]	6.866	1.131	0.533
[12.387	0.02461	0.000739]	6.866	[12.452	0.02297	0.000728]	7.129	1.302	0.979
[12.452	0.02297	0.000728]	7.129	[12.556	0.02440	0.000721]	7.278	1.161	0.208
[12.556	0.02440	0.000721]	7.278	[12.496	0.02445	0.000722]	7.140	0.871	0.948
[12.556	0.02440	0.000721]	7.278	[12.688	0.02543	0.000732]	7.112	0.846	0.218
[12.688	0.02543	0.000732]	7.112	[12.566	0.02737	0.000734]	6.795	0.729	0.021
[12.566	0.02737	0.000734]	6.795	[12.405	0.02688	0.000753]	6.578	0.805	0.330
[12.405	0.02688	0.000753]	6.578	[12.410	0.02807	0.000751]	6.407	0.842	0.901
[12.405	0.02688	0.000753]	6.578	[12.469	0.02992	0.000767]	6.165	0.661	0.589
[12.469	0.02992	0.000767]	6.165	[12.550	0.02936	0.000768]	6.107	0.943	0.309
[12.550	0.02936	0.000768]	6.107	[12.633	0.02827	0.000765]	6.302	1.216	0.612
[12.633	0.02827	0.000765]	6.302	[12.764	0.02951	0.000781]	6.134	0.845	0.645
[12.764	0.02951	0.000781]	6.134	[12.719	0.03030	0.000783]	5.966	0.846	0.704
[12.719	0.03030	0.000783]	5.966	[12.676	0.03075	0.000801]	5.778	0.828	0.488
[12.676	0.03075	0.000801]	5.778	[12.750	0.02979	0.000798]	5.810	1.032	0.388
[12.750	0.02979	0.000798]	5.810	[12.695	0.02963	0.000798]	5.812	1.002	0.791
[12.695	0.02963	0.000798]	5.812	[12.595	0.02923	0.000803]	5.750	0.940	0.895
[12.595	0.02923	0.000803]	5.750	[12.711	0.02858	0.000798]	5.938	1.207	0.787
[12.711	0.02858	0.000798]	5.938	[12.763	0.02757	0.000796]	5.964	1.027	0.188
[12.763	0.02757	0.000796]	5.964	[12.712	0.02578	0.000792]	6.171	1.229	0.901
[12.712	0.02578	0.000792]	6.171	[12.663	0.02603	0.000783]	6.272	1.107	0.922
[12.663	0.02603	0.000783]	6.272	[12.722	0.02575	0.000774]	6.437	1.179	0.917
[12.722	0.02575	0.000774]	6.437	[12.943	0.02726	0.000778]	6.243	0.824	0.086
[12.943	0.02726	0.000778]	6.243	[12.947	0.02757	0.000777]	6.263	1.020	0.778
[12.947	0.02757	0.000777]	6.263	[13.093	0.02804	0.000769]	6.310	1.048	0.244
[13.093	0.02804	0.000769]	6.310	[13.014	0.02786	0.000771]	6.268	0.959	0.289
[13.014	0.02786	0.000771]	6.268	[13.093	0.02623	0.000776]	6.370	1.107	0.116
[13.093	0.02623	0.000776]	6.370	[12.955	0.02668	0.000786]	6.203	0.846	0.337
[12.955	0.02668	0.000786]	6.203	[12.805	0.02666	0.000786]	6.233	1.031	0.198
[12.805	0.02666	0.000786]	6.233	[12.512	0.02699	0.000784]	6.213	0.980	0.782
[12.512	0.02699	0.000784]	6.213	[12.535	0.02561	0.000767]	6.441	1.257	0.317
[12.535	0.02561	0.000767]	6.441	[12.546	0.02701	0.000769]	6.348	0.911	0.584
[12.546	0.02701	0.000769]	6.348	[12.456	0.02685	0.000773]	6.313	0.965	0.505
[12.456	0.02685	0.000773]	6.313	[12.553	0.02529	0.000755]	6.697	1.469	0.063
[12.553	0.02529	0.000755]	6.697	[12.577	0.02394	0.000760]	6.902	1.227	0.345
[12.577	0.02394	0.000760]	6.902	[12.825	0.02484	0.000749]	7.024	1.130	0.934
[12.825	0.02484	0.000749]	7.024	[12.794	0.02471	0.000767]	6.641	0.682	0.301
[12.794	0.02471	0.000767]	6.641	[12.711	0.02566	0.000766]	6.489	0.859	0.374
[12.711	0.02566	0.000766]	6.489	[12.655	0.02434	0.000761]	6.741	1.287	0.535
[12.655	0.02434	0.000761]	6.741	[12.630	0.02550	0.000752]	6.707	0.967	0.537
[12.630	0.02550	0.000752]	6.707	[12.678	0.02620	0.000757]	6.595	0.894	0.841
[12.678	0.02620	0.000757]	6.595	[12.716	0.02672	0.000762]	6.515	0.923	0.554
[12.716	0.02672	0.000762]	6.515	[12.808	0.02656	0.000769]	6.437	0.925	0.310
[12.808	0.02656	0.000769]	6.437	[12.758	0.02577	0.000760]	6.692	1.290	0.994
[12.758	0.02577	0.000760]	6.692	[12.893	0.02542	0.000765]	6.652	0.961	0.234
[12.893	0.02542	0.000765]	6.652	[12.880	0.02409	0.000757]	6.877	1.253	0.238
[12.880	0.02409	0.000757]	6.877	[12.820	0.02322	0.000755]	6.998	1.128	0.457
[12.820	0.02322	0.000755]	6.998	[12.759	0.02275	0.000768]	6.830	0.846	0.647
[12.759	0.02275	0.000768]	6.830	[12.660	0.02350	0.000762]	6.848	1.018	0.775
[12.660	0.02350	0.000762]	6.848	[12.713	0.02140	0.000774]	6.824	0.976	0.179
[12.713	0.02140	0.000774]	6.824	[12.606	0.02121	0.000785]	6.603	0.802	0.836
[12.713	0.02140	0.000774]	6.824	[12.706	0.02102	0.000774]	6.906	1.085	0.679
[12.706	0.02102	0.000774]	6.906	[12.655	0.02032	0.000775]	6.880	0.974	0.972
[12.655	0.02032	0.000775]	6.880	[12.569	0.02075	0.000789]	6.726	0.857	0.825
[12.569	0.02075	0.000789]	6.726	[12.541	0.02045	0.000787]	6.784	1.060	0.278
[12.541	0.02045	0.000787]	6.784	[12.662	0.02097	0.000789]	6.631	0.858	0.250
[12.662	0.02097	0.000789]	6.631	[12.618	0.01964	0.000785]	6.747	1.123	0.207
[12.618	0.01964	0.000785]	6.747	[12.613	0.02053	0.000793]	6.559	0.828	0.341
[12.613	0.02053	0.000793]	6.559	[12.566	0.02122	0.000798]	6.446	0.893	0.350
[12.566	0.02122	0.000798]	6.446	[12.627	0.02076	0.000798]	6.486	1.041	0.616
[12.627	0.02076	0.000798]	6.486	[12.711	0.02032	0.000804]	6.531	1.046	0.579
[12.711	0.02032	0.000804]	6.531	[12.508	0.01968	0.000806]	6.435	0.908	0.040
[12.508	0.01968	0.000806]	6.435	[12.688	0.01946	0.000795]	6.636	1.222	0.522
[12.688	0.01946	0.000795]	6.636	[12.823	0.01867	0.000783]	7.065	1.536	0.559
[12.823	0.01867	0.000783]	7.065	[12.733	0.01805	0.000783]	7.043	0.978	0.718
[12.733	0.01805	0.000783]	7.043	[12.637	0.01846	0.000800]	6.674	0.691	0.836
[12.733	0.01805	0.000783]	7.043	[12.710	0.01833	0.000787]	6.951	0.912	0.851
[12.710	0.01833	0.000787]	6.951	[12.701	0.01922	0.000793]	6.751	0.818	0.153
[12.701	0.01922	0.000793]	6.751	[12.621	0.01877	0.000784]	6.908	1.171	0.074
[12.621	0.01877	0.000784]	6.908	[12.666	0.01883	0.000790]	6.874	0.966	0.897
[12.666	0.01883	0.000790]	6.874	[12.529	0.01761	0.000780]	7.037	1.177	0.789
[12.529	0.01761	0.000780]	7.037	[12.572	0.01762	0.000783]	6.972	0.938	0.403
[12.572	0.01762	0.000783]	6.972	[12.337	0.01766	0.000772]	7.131	1.172	0.452
[12.337	0.01766	0.000772]	7.131	[12.449	0.01786	0.000772]	7.141	1.010	0.287
[12.449	0.01786	0.000772]	7.141	[12.406	0.01936	0.000783]	6.742	0.671	0.631
[12.406	0.01936	0.000783]	6.742	[12.457	0.01908	0.000802]	6.659	0.920	0.981
[12.406	0.01936	0.000783]	6.742	[12.608	0.01981	0.000780]	6.917	1.191	0.834
[12.608	0.01981	0.000780]	6.917	[12.624	0.02018	0.000792]	6.723	0.823	0.612
[12.624	0.02018	0.000792]	6.723	[12.650	0.01975	0.000790]	6.730	1.008	0.808
[12.650	0.01975	0.000790]	6.730	[12.667	0.01957	0.000801]	6.657	0.930	0.059
[12.667	0.01957	0.000801]	6.657	[12.606	0.02087	0.000794]	6.545	0.894	0.006
[12.606	0.02087	0.000794]	6.545	[12.651	0.01985	0.000804]	6.516	0.972	0.239
[12.651	0.01985	0.000804]	6.516	[12.715	0.01969	0.000805]	6.556	1.041	0.829
[12.715	0.01969	0.000805]	6.556	[12.632	0.01971	0.000804]	6.442	0.892	0.198
[12.632	0.01971	0.000804]	6.442	[12.624	0.02040	0.000791]	6.659	1.242	0.089
[12.624	0.02040	0.000791]	6.659	[12.656	0.02004	0.000788]	6.738	1.083	0.080
[12.656	0.02004	0.000788]	6.738	[12.648	0.02078	0.000782]	6.797	1.061	0.279
[12.648	0.02078	0.000782]	6.797	[12.566	0.02105	0.000772]	6.830	1.033	0.604
[12.566	0.02105	0.000772]	6.830	[12.707	0.01991	0.000775]	7.058	1.256	0.299
[12.707	0.01991	0.000775]	7.058	[12.597	0.02093	0.000776]	6.849	0.811	0.293
[12.597	0.02093	0.000776]	6.849	[12.645	0.02156	0.000770]	6.810	0.962	0.916
[12.645	0.02156	0.000770]	6.810	[12.683	0.02131	0.000756]	7.045	1.265	0.237
[12.683	0.02131	0.000756]	7.045	[12.859	0.02120	0.000759]	7.161	1.123	0.216
[12.859	0.02120	0.000759]	7.161	[12.969	0.02305	0.000760]	6.975	0.830	0.469
[12.969	0.02305	0.000760]	6.975	[12.806	0.02119	0.000777]	6.779	0.822	0.710
[12.806	0.02119	0.000777]	6.779	[12.820	0.02068	0.000804]	6.403	0.687	0.168
[12.820	0.02068	0.000804]	6.403	[12.822	0.01943	0.000803]	6.672	1.309	0.119
[12.822	0.01943	0.000803]	6.672	[13.118	0.01860	0.000793]	6.867	1.216	0.309
[13.118	0.01860	0.000793]	6.867	[13.015	0.01823	0.000790]	7.040	1.189	0.729
[13.015	0.01823	0.000790]	7.040	[13.076	0.01942	0.000803]	6.664	0.687	0.567
[13.076	0.01942	0.000803]	6.664	[13.021	0.01956	0.000807]	6.535	0.879	0.310
[13.021	0.01956	0.000807]	6.535	[13.019	0.02012	0.000823]	6.305	0.794	0.196
[13.019	0.02012	0.000823]	6.305	[12.990	0.02022	0.000821]	6.330	1.026	0.753
[12.990	0.02022	0.000821]	6.330	[12.835	0.02004	0.000816]	6.325	0.995	0.462
[12.835	0.02004	0.000816]	6.325	[12.931	0.02071	0.000792]	6.610	1.330	0.036
[12.931	0.02071	0.000792]	6.610	[12.899	0.01951	0.000786]	6.817	1.229	0.689
[12.899	0.01951	0.000786]	6.817	[12.909	0.01885	0.000775]	7.236	1.521	0.290
[12.909	0.01885	0.000775]	7.236	[12.882	0.01974	0.000783]	6.841	0.673	0.763
[12.909	0.01885	0.000775]	7.236	[12.903	0.01811	0.000764]	7.434	1.219	0.894
[12.903	0.01811	0.000764]	7.434	[13.073	0.01974	0.000765]	7.361	0.929	0.484
[13.073	0.01974	0.000765]	7.361	[13.081	0.01977	0.000753]	7.437	1.080	0.594
[13.081	0.01977	0.000753]	7.437	[13.145	0.02076	0.000737]	7.792	1.426	0.795
[13.145	0.02076	0.000737]	7.792	[13.243	0.02063	0.000726]	8.021	1.257	0.590
[13.243	0.02063	0.000726]	8.021	[13.058	0.02245	0.000729]	7.765	0.774	0.647
[13.058	0.02245	0.000729]	7.765	[13.077	0.02222	0.000725]	7.851	1.090	0.838
[13.077	0.02222	0.000725]	7.851	[13.063	0.02220	0.000726]	7.705	0.864	0.570
[13.063	0.02220	0.000726]	7.705	[12.892	0.02130	0.000715]	7.752	1.048	0.107
[12.892	0.02130	0.000715]	7.752	[13.000	0.02101	0.000715]	8.070	1.375	0.591
[13.000	0.02101	0.000715]	8.070	[13.037	0.02158	0.000714]	8.215	1.156	0.867
[13.037	0.02158	0.000714]	8.215	[13.084	0.02247	0.000720]	7.869	0.708	0.204
[13.084	0.02247	0.000720]	7.869	[12.999	0.02452	0.000735]	7.307	0.570	0.013
[12.999	0.02452	0.000735]	7.307	[13.076	0.02344	0.000738]	7.301	0.994	0.767
[13.076	0.02344	0.000738]	7.301	[13.126	0.02248	0.000729]	7.728	1.532	0.732
[13.126	0.02248	0.000729]	7.728	[13.104	0.02339	0.000737]	7.551	0.838	0.828
[13.104	0.02339	0.000737]	7.551	[13.206	0.02396	0.000732]	7.509	0.958	0.855
[13.206	0.02396	0.000732]	7.509	[13.459	0.02377	0.000721]	7.822	1.368	0.858
[13.459	0.02377	0.000721]	7.822	[13.481	0.02296	0.000732]	7.695	0.881	0.318
[13.481	0.02296	0.000732]	7.695	[13.617	0.02197	0.000743]	7.476	0.803	0.452
[13.617	0.02197	0.000743]	7.476	[13.590	0.02280	0.000763]	6.996	0.619	0.579
[13.590	0.02280	0.000763]	6.996	[13.761	0.02345	0.000779]	6.564	0.649	0.145
[13.761	0.02345	0.000779]	6.564	[13.856	0.02264	0.000765]	6.839	1.318	0.160
[13.856	0.02264	0.000765]	6.839	[13.848	0.02313	0.000765]	6.691	0.862	0.355
[13.848	0.02313	0.000765]	6.691	[13.890	0.02450	0.000760]	6.701	1.010	0.269
[13.890	0.02450	0.000760]	6.701	[13.773	0.02538	0.000758]	6.650	0.950	0.893
[13.773	0.02538	0.000758]	6.650	[13.835	0.02436	0.000742]	7.142	1.636	0.541
[13.835	0.02436	0.000742]	7.142	[13.722	0.02444	0.000758]	6.819	0.723	0.879
[13.835	0.02436	0.000742]	7.142	[13.782	0.02408	0.000738]	7.239	1.101	0.891
[13.782	0.02408	0.000738]	7.239	[13.926	0.02488	0.000745]	6.997	0.785	0.761
[13.926	0.02488	0.000745]	6.997	[13.851	0.02511	0.000758]	6.750	0.781	0.044
[13.851	0.02511	0.000758]	6.750	[13.929	0.02613	0.000765]	6.531	0.803	0.799
[13.929	0.02613	0.000765]	6.531	[13.890	0.02662	0.000755]	6.496	0.967	0.360
[13.890	0.02662	0.000755]	6.496	[13.830	0.02677	0.000757]	6.582	1.090	0.272
[13.830	0.02677	0.000757]	6.582	[13.668	0.02725	0.000754]	6.535	0.953	0.520
[13.668	0.02725	0.000754]	6.535	[13.521	0.02677	0.000750]	6.770	1.265	0.581
[13.521	0.02677	0.000750]	6.770	[13.707	0.02667	0.000746]	6.725	0.957	0.220
[13.707	0.02667	0.000746]	6.725	[13.732	0.02727	0.000740]	6.788	1.065	0.355
[13.732	0.02727	0.000740]	6.788	[13.780	0.02864	0.000738]	6.574	0.808	0.584
[13.780	0.02864	0.000738]	6.574	[13.949	0.02830	0.000738]	6.674	1.105	0.224
[13.949	0.02830	0.000738]	6.674	[13.945	0.02931	0.000739]	6.528	0.864	0.854
[13.945	0.02931	0.000739]	6.528	[13.805	0.02855	0.000748]	6.475	0.948	0.443
[13.805	0.02855	0.000748]	6.475	[13.964	0.02691	0.000754]	6.500	1.025	0.279
[13.964	0.02691	0.000754]	6.500	[13.952	0.02614	0.000758]	6.558	1.060	0.572
[13.952	0.02614	0.000758]	6.558	[13.820	0.02641	0.000737]	7.043	1.623	0.805
[13.820	0.02641	0.000737]	7.043	[13.665	0.02440	0.000740]	7.088	1.046	0.835
[13.665	0.02440	0.000740]	7.088	[13.603	0.02365	0.000743]	7.241	1.166	0.780
[13.603	0.02365	0.000743]	7.241	[13.480	0.02453	0.000761]	6.910	0.718	0.885
[13.603	0.02365	0.000743]	7.241	[13.655	0.02309	0.000738]	7.429	1.206	0.087
[13.655	0.02309	0.000738]	7.429	[13.548	0.02417	0.000732]	7.476	1.049	0.011
[13.548	0.02417	0.000732]	7.476	[13.594	0.02411	0.000728]	7.446	0.970	0.292
[13.594	0.02411	0.000728]	7.446	[13.620	0.02253	0.000741]	7.443	0.997	0.544
[13.620	0.02253	0.000741]	7.443	[13.747	0.02302	0.000739]	7.362	0.923	0.984
[13.620	0.02253	0.000741]	7.443	[13.587	0.02351	0.000738]	7.401	0.959	0.274
[13.587	0.02351	0.000738]	7.401	[13.632	0.02403	0.000729]	7.580	1.196	0.928
[13.632	0.02403	0.000729]	7.580	[13.721	0.02242	0.000739]	7.384	0.822	0.545
[13.721	0.02242	0.000739]	7.384	[13.767	0.02313	0.000746]	7.219	0.848	0.180
[13.767	0.02313	0.000746]	7.219	[13.714	0.02524	0.000754]	6.578	0.527	0.525
[13.714	0.02524	0.000754]	6.578	[13.839	0.02387	0.000757]	6.819	1.273	0.391
[13.839	0.02387	0.000757]	6.819	[13.916	0.02382	0.000754]	6.865	1.047	0.916
[13.916	0.02382	0.000754]	6.865	[13.846	0.02486	0.000736]	7.070	1.228	0.828
[13.846	0.02486	0.000736]	7.070	[13.782	0.02422	0.000734]	7.367	1.345	0.181
[13.782	0.02422	0.000734]	7.367	[13.844	0.02538	0.000727]	7.314	0.949	0.709
[13.844	0.02538	0.000727]	7.314	[13.996	0.02772	0.000732]	6.620	0.500	0.798
[13.844	0.02538	0.000727]	7.314	[13.819	0.02568	0.000715]	7.549	1.265	0.424
[13.819	0.02568	0.000715]	7.549	[13.763	0.02578	0.000720]	7.534	0.985	0.667
[13.763	0.02578	0.000720]	7.534	[13.861	0.02373	0.000721]	7.756	1.249	0.870
[13.861	0.02373	0.000721]	7.756	[13.865	0.02462	0.000725]	7.359	0.672	0.594
[13.865	0.02462	0.000725]	7.359	[13.964	0.02350	0.000732]	7.271	0.916	0.250
[13.964	0.02350	0.000732]	7.271	[13.979	0.02300	0.000725]	7.674	1.497	0.757
[13.979	0.02300	0.000725]	7.674	[13.996	0.02145	0.000740]	7.461	0.808	0.459
[13.996	0.02145	0.000740]	7.461	[14.006	0.02161	0.000747]	7.219	0.785	0.372
[14.006	0.02161	0.000747]	7.219	[13.904	0.02212	0.000747]	7.445	1.253	0.112
[13.904	0.02212	0.000747]	7.445	[13.943	0.02206	0.000754]	7.052	0.675	0.107
[13.943	0.02206	0.000754]	7.052	[13.883	0.02100	0.000771]	6.820	0.793	0.490
[13.883	0.02100	0.000771]	6.820	[13.745	0.02088	0.000778]	6.849	1.030	0.398
[13.745	0.02088	0.000778]	6.849	[13.655	0.02093	0.000778]	6.845	0.996	0.380
[13.655	0.02093	0.000778]	6.845	[13.543	0.02005	0.000771]	7.057	1.236	0.639
[13.543	0.02005	0.000771]	7.057	[13.533	0.01888	0.000773]	7.286	1.258	0.672
[13.533	0.01888	0.000773]	7.286	[13.461	0.01903	0.000775]	7.135	0.860	0.737
[13.461	0.01903	0.000775]	7.135	[13.490	0.01877	0.000797]	6.839	0.743	0.284
[13.490	0.01877	0.000797]	6.839	[13.439	0.01876	0.000784]	6.951	1.118	0.500
[13.439	0.01876	0.000784]	6.951	[13.455	0.01797	0.000784]	7.038	1.092	0.510
[13.455	0.01797	0.000784]	7.038	[13.698	0.01799	0.000794]	6.838	0.818	0.278
[13.698	0.01799	0.000794]	6.838	[13.874	0.01809	0.000787]	7.061	1.250	0.509
[13.874	0.01809	0.000787]	7.061	[13.958	0.01924	0.000791]	6.605	0.634	0.379
[13.958	0.01924	0.000791]	6.605	[14.041	0.01949	0.000791]	6.656	1.052	0.693
[14.041	0.01949	0.000791]	6.656	[14.054	0.02072	0.000794]	6.370	0.752	0.097
[14.054	0.02072	0.000794]	6.370	[14.094	0.02182	0.000792]	6.363	0.993	0.527
[14.094	0.02182	0.000792]	6.363	[14.211	0.01988	0.000789]	6.539	1.192	0.108
[14.211	0.01988	0.000789]	6.539	[14.176	0.02161	0.000787]	6.503	0.964	0.225
[14.176	0.02161	0.000787]	6.503	[14.164	0.02151	0.000787]	6.432	0.931	0.741
[14.164	0.02151	0.000787]	6.432	[14.293	0.02089	0.000793]	6.388	0.957	0.103
[14.293	0.02089	0.000793]	6.388	[14.236	0.02107	0.000813]	6.128	0.771	0.537
[14.236	0.02107	0.000813]	6.128	[14.293	0.02082	0.000811]	6.147	1.019	0.739
[14.293	0.02082	0.000811]	6.147	[14.243	0.02072	0.000814]	6.126	0.979	0.188
[14.243	0.02072	0.000814]	6.126	[14.248	0.02004	0.000812]	6.253	1.135	0.235
[14.248	0.02004	0.000812]	6.253	[14.298	0.01931	0.000817]	6.300	1.048	0.345
[14.298	0.01931	0.000817]	6.300	[14.279	0.01871	0.000792]	6.688	1.474	0.792
[14.279	0.01871	0.000792]	6.688	[14.181	0.01963	0.000805]	6.378	0.733	0.202
[14.181	0.01963	0.000805]	6.378	[13.974	0.02079	0.000826]	6.044	0.717	0.630
[13.974	0.02079	0.000826]	6.044	[13.883	0.02022	0.000851]	5.813	0.793	0.789
[13.883	0.02022	0.000851]	5.813	[13.933	0.02069	0.000839]	5.897	1.088	0.969
[13.933	0.02069	0.000839]	5.897	[13.890	0.01912	0.000845]	6.042	1.156	0.216
[13.890	0.01912	0.000845]	6.042	[13.810	0.01920	0.000844]	6.094	1.054	0.595
[13.810	0.01920	0.000844]	6.094	[13.844	0.01945	0.000851]	5.876	0.804	0.443
[13.844	0.01945	0.000851]	5.876	[13.758	0.02028	0.000842]	6.006	1.139	0.236
[13.758	0.02028	0.000842]	6.006	[13.805	0.02094	0.000847]	5.863	0.867	0.850
[13.805	0.02094	0.000847]	5.863	[13.828	0.02093	0.000842]	5.878	1.015	0.711
[13.828	0.02093	0.000842]	5.878	[13.852	0.01788	0.000849]	6.016	1.147	0.263
[13.852	0.01788	0.000849]	6.016	[13.949	0.01772	0.000848]	5.932	0.920	0.129
[13.949	0.01772	0.000848]	5.932	[13.813	0.01766	0.000840]	6.082	1.162	0.097
[13.813	0.01766	0.000840]	6.082	[13.662	0.01799	0.000851]	6.051	0.970	0.503
[13.662	0.01799	0.000851]	6.051	[13.552	0.01864	0.000850]	6.059	1.007	0.620
[13.552	0.01864	0.000850]	6.059	[13.666	0.01947	0.000874]	5.661	0.672	0.168
[13.666	0.01947	0.000874]	5.661	[13.700	0.01850	0.000883]	5.678	1.017	0.646
[13.700	0.01850	0.000883]	5.678	[13.700	0.01801	0.000888]	5.645	0.968	0.574
[13.700	0.01801	0.000888]	5.645	[13.768	0.01843	0.000904]	5.439	0.814	0.469
[13.768	0.01843	0.000904]	5.439	[13.784	0.01742	0.000901]	5.512	1.075	0.459
[13.784	0.01742	0.000901]	5.512	[14.011	0.01716	0.000892]	5.598	1.090	0.154
[14.011	0.01716	0.000892]	5.598	[13.968	0.01813	0.000893]	5.495	0.902	0.310
[13.968	0.01813	0.000893]	5.495	[14.051	0.01789	0.000886]	5.624	1.138	0.968
[14.051	0.01789	0.000886]	5.624	[14.210	0.01889	0.000888]	5.474	0.861	0.432
[14.210	0.01889	0.000888]	5.474	[14.341	0.02153	0.000883]	5.359	0.892	0.009
[14.341	0.02153	0.000883]	5.359	[14.390	0.02133	0.000902]	5.195	0.848	0.804
[14.390	0.02133	0.000902]	5.195	[14.511	0.02140	0.000891]	5.220	1.026	0.631
[14.511	0.02140	0.000891]	5.220	[14.505	0.01874	0.000899]	5.319	1.103	0.107
[14.505	0.01874	0.000899]	5.319	[14.264	0.01829	0.000897]	5.406	1.091	0.458
[14.264	0.01829	0.000897]	5.406	[14.127	0.01977	0.000899]	5.358	0.954	0.396
[14.127	0.01977	0.000899]	5.358	[14.212	0.01992	0.000903]	5.282	0.926	0.021
[14.212	0.01992	0.000903]	5.282	[14.134	0.02132	0.000917]	5.152	0.878	0.596
[14.134	0.02132	0.000917]	5.152	[14.033	0.02305	0.000915]	5.076	0.927	0.687
[14.033	0.02305	0.000915]	5.076	[13.960	0.02304	0.000911]	5.114	1.038	0.475
[13.960	0.02304	0.000911]	5.114	[14.102	0.02435	0.000897]	5.080	0.967	0.376
[14.102	0.02435	0.000897]	5.080	[14.265	0.02567	0.000896]	5.057	0.977	0.950
[14.265	0.02567	0.000896]	5.057	[14.263	0.02509	0.000894]	5.069	1.012	0.405
[14.263	0.02509	0.000894]	5.069	[14.216	0.02526	0.000904]	5.008	0.941	0.722
[14.216	0.02526	0.000904]	5.008	[14.207	0.02674	0.000895]	5.016	1.009	0.638
[14.207	0.02674	0.000895]	5.016	[14.324	0.02733	0.000900]	4.846	0.843	0.373
[14.324	0.02733	0.000900]	4.846	[14.453	0.02619	0.000901]	4.893	1.048	0.902
[14.453	0.02619	0.000901]	4.893	[14.482	0.02627	0.000910]	4.844	0.952	0.374
[14.482	0.02627	0.000910]	4.844	[14.430	0.02599	0.000920]	4.755	0.914	0.880
[14.430	0.02599	0.000920]	4.755	[14.388	0.02543	0.000915]	4.873	1.126	0.976
[14.388	0.02543	0.000915]	4.873	[14.535	0.02488	0.000923]	4.791	0.921	0.773
[14.535	0.02488	0.000923]	4.791	[14.651	0.02296	0.000938]	4.788	0.996	0.340
[14.651	0.02296	0.000938]	4.788	[14.684	0.02368	0.000952]	4.716	0.931	0.548
[14.684	0.02368	0.000952]	4.716	[14.627	0.02355	0.000965]	4.587	0.879	0.430
[14.627	0.02355	0.000965]	4.587	[14.819	0.02430	0.000958]	4.577	0.991	0.123
[14.819	0.02430	0.000958]	4.577	[14.874	0.02509	0.000973]	4.466	0.895	0.694
[14.874	0.02509	0.000973]	4.466	[14.708	0.02601	0.000980]	4.421	0.956	0.651
[14.708	0.02601	0.000980]	4.421	[14.607	0.02628	0.000976]	4.441	1.020	0.777
[14.607	0.02628	0.000976]	4.441	[14.514	0.02746	0.000970]	4.447	1.006	0.870
[14.514	0.02746	0.000970]	4.447	[14.458	0.02907	0.000961]	4.416	0.969	0.220
[14.458	0.02907	0.000961]	4.416	[14.482	0.03109	0.000963]	4.326	0.914	0.052
[14.482	0.03109	0.000963]	4.326	[14.568	0.03056	0.000962]	4.324	0.998	0.617
[14.568	0.03056	0.000962]	4.324	[14.507	0.03206	0.000972]	4.193	0.878	0.753
[14.507	0.03206	0.000972]	4.193	[14.660	0.03299	0.000955]	4.265	1.074	0.990
[14.660	0.03299	0.000955]	4.265	[14.966	0.03479	0.000962]	4.140	0.883	0.266
[14.966	0.03479	0.000962]	4.140	[14.903	0.03436	0.000946]	4.218	1.081	0.179
[14.903	0.03436	0.000946]	4.218	[14.975	0.03545	0.000962]	4.066	0.859	0.883
[14.903	0.03436	0.000946]	4.218	[14.952	0.03392	0.000963]	4.173	0.956	0.063
[14.952	0.03392	0.000963]	4.173	[14.918	0.03359	0.000974]	4.098	0.928	0.288
[14.918	0.03359	0.000974]	4.098	[14.868	0.03431	0.000975]	4.115	1.017	0.452
[14.868	0.03431	0.000975]	4.115	[14.840	0.03394	0.000963]	4.174	1.061	0.130
[14.840	0.03394	0.000963]	4.174	[14.793	0.03552	0.000972]	4.115	0.943	0.043
[14.793	0.03552	0.000972]	4.115	