
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> beta_Hs <- seq(55.878, 55.978, 0.005)
> beta_Cs <- seq(0.0679, 0.0689, 0.0001)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 1000
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> sars <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+     params <- c(beta_H, beta_C)  
+       
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(params, inc, inf, verbose = F) 
+       metrics(results)
+     }
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     sars[i, j, ] <- vals[, 2]
+     message(paste0(format(beta_H, digits = 5, nsmall = 3), '/55.978\t', 
+                    format(beta_C, digits = 5, nsmall = 6), '/0.068957\t',  
+                    format(t_tot, nsmall = 2), '\t(', format(t_1 - t_0, nsmall = 2), ')\t', 
+                    format(mean(vals[, 1]), nsmall = 3), '\t', 
+                    format(mean(vals[, 2]), nsmall = 3)))
+     write.table(idcs, file = 'idcs_05.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars_05.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
55.878/55.978	0.067900/0.068957	5.369862 mins	(5.369862 mins)	0.05028	0.247797
55.878/55.978	0.068000/0.068957	11.0212 mins	(5.651342 mins)	0.051623	0.2550563
55.878/55.978	0.068100/0.068957	16.50112 mins	(5.47992 mins)	0.048686	0.24384
55.878/55.978	0.068200/0.068957	22.18555 mins	(5.684423 mins)	0.049545	0.2500025
55.878/55.978	0.068300/0.068957	27.26753 mins	(5.08198 mins)	0.046074	0.2403386
55.878/55.978	0.068400/0.068957	33.13287 mins	(5.865347 mins)	0.048654	0.2546966
55.878/55.978	0.068500/0.068957	38.49861 mins	(5.365733 mins)	0.050434	0.2481135
55.878/55.978	0.068600/0.068957	44.35246 mins	(5.853856 mins)	0.050916	0.2603713
55.878/55.978	0.068700/0.068957	49.99777 mins	(5.645303 mins)	0.053428	0.2543982
55.878/55.978	0.068800/0.068957	55.39184 mins	(5.394074 mins)	0.051413	0.2511927
55.878/55.978	0.068900/0.068957	60.47018 mins	(5.07834 mins)	0.050659	0.2501932


55.883/55.978	0.067900/0.068957	65.30953 mins	(4.839345 mins)	0.045711	0.2489761
55.883/55.978	0.068000/0.068957	70.17371 mins	(4.864182 mins)	0.04829	0.2485149
55.883/55.978	0.068100/0.068957	75.00042 mins	(4.82671 mins)	0.044697	0.2493654
55.883/55.978	0.068200/0.068957	80.06293 mins	(5.06251 mins)	0.05153	0.2519756
55.883/55.978	0.068300/0.068957	84.90358 mins	(4.840656 mins)	0.047757	0.2420431
55.883/55.978	0.068400/0.068957	89.90345 mins	(4.999871 mins)	0.047586	0.2492915
55.883/55.978	0.068500/0.068957	94.94495 mins	(5.0415 mins)	0.051608	0.2528488
55.883/55.978	0.068600/0.068957	100.2284 mins	(5.283475 mins)	0.049743	0.2522939
55.883/55.978	0.068700/0.068957	105.357 mins	(5.128559 mins)	0.048743	0.2459806
55.883/55.978	0.068800/0.068957	110.6208 mins	(5.263786 mins)	0.048839	0.2535696
55.883/55.978	0.068900/0.068957	116.1292 mins	(5.508437 mins)	0.052647	0.2519839


55.888/55.978	0.067900/0.068957	121.2452 mins	(5.115956 mins)	0.048193	0.2561813
55.888/55.978	0.068000/0.068957	126.48 mins	(5.234874 mins)	0.048116	0.2456251
55.888/55.978	0.068100/0.068957	131.6639 mins	(5.183849 mins)	0.047426	0.2508286
55.888/55.978	0.068200/0.068957	136.7511 mins	(5.087247 mins)	0.050212	0.2454788
55.888/55.978	0.068300/0.068957	141.8066 mins	(5.055485 mins)	0.048847	0.2489122
55.888/55.978	0.068400/0.068957	146.8965 mins	(5.089891 mins)	0.050389	0.2536967
55.888/55.978	0.068500/0.068957	151.9035 mins	(5.006982 mins)	0.050617	0.2426474
55.888/55.978	0.068600/0.068957	156.9702 mins	(5.066705 mins)	0.053479	0.2542076
55.888/55.978	0.068700/0.068957	161.8503 mins	(4.880094 mins)	0.046872	0.2485563
55.888/55.978	0.068800/0.068957	166.8957 mins	(5.045392 mins)	0.05307	0.2480992
55.888/55.978	0.068900/0.068957	172.1005 mins	(5.204791 mins)	0.051708	0.2403633


55.893/55.978	0.067900/0.068957	177.0859 mins	(4.985416 mins)	0.047381	0.2556788
55.893/55.978	0.068000/0.068957	182.0668 mins	(4.980892 mins)	0.046921	0.2489707
55.893/55.978	0.068100/0.068957	186.8634 mins	(4.796628 mins)	0.046816	0.2458919
55.893/55.978	0.068200/0.068957	191.9338 mins	(5.070369 mins)	0.052537	0.2605354
55.893/55.978	0.068300/0.068957	197.1849 mins	(5.25111 mins)	0.051407	0.2455158
55.893/55.978	0.068400/0.068957	202.4246 mins	(5.23973 mins)	0.048859	0.2471304
55.893/55.978	0.068500/0.068957	207.4313 mins	(5.00667 mins)	0.050258	0.2543846
55.893/55.978	0.068600/0.068957	212.4509 mins	(5.01965 mins)	0.046695	0.2465131
55.893/55.978	0.068700/0.068957	217.6464 mins	(5.195447 mins)	0.05182	0.2526571
55.893/55.978	0.068800/0.068957	223.0036 mins	(5.357238 mins)	0.053773	0.2567501
55.893/55.978	0.068900/0.068957	228.0216 mins	(5.017981 mins)	0.049166	0.2484703


55.898/55.978	0.067900/0.068957	233.1635 mins	(5.14185 mins)	0.050322	0.2488355
55.898/55.978	0.068000/0.068957	238.1315 mins	(4.968035 mins)	0.045712	0.2500813
55.898/55.978	0.068100/0.068957	243.1024 mins	(4.970876 mins)	0.047975	0.2539912
55.898/55.978	0.068200/0.068957	248.2084 mins	(5.106047 mins)	0.050365	0.2490413
55.898/55.978	0.068300/0.068957	253.3005 mins	(5.092043 mins)	0.051781	0.2501937
55.898/55.978	0.068400/0.068957	258.4111 mins	(5.110604 mins)	0.04659	0.2441057
55.898/55.978	0.068500/0.068957	263.6059 mins	(5.194829 mins)	0.050978	0.250865
55.898/55.978	0.068600/0.068957	268.5391 mins	(4.933236 mins)	0.045034	0.2433527
55.898/55.978	0.068700/0.068957	273.8993 mins	(5.360174 mins)	0.051348	0.2516537
55.898/55.978	0.068800/0.068957	279.1315 mins	(5.232188 mins)	0.051976	0.2504033
55.898/55.978	0.068900/0.068957	284.2552 mins	(5.123741 mins)	0.05132	0.2461554


55.903/55.978	0.067900/0.068957	289.3305 mins	(5.075289 mins)	0.04554	0.2527264
55.903/55.978	0.068000/0.068957	294.526 mins	(5.195516 mins)	0.05085	0.2525466
55.903/55.978	0.068100/0.068957	299.7421 mins	(5.216041 mins)	0.049031	0.2571563
55.903/55.978	0.068200/0.068957	305.4843 mins	(5.742218 mins)	0.05218	0.2520192
55.903/55.978	0.068300/0.068957	311.4645 mins	(5.980153 mins)	0.052395	0.2436455
55.903/55.978	0.068400/0.068957	316.617 mins	(5.152576 mins)	0.049688	0.2436641
55.903/55.978	0.068500/0.068957	321.802 mins	(5.185018 mins)	0.047971	0.2401697
55.903/55.978	0.068600/0.068957	327.12 mins	(5.317997 mins)	0.050628	0.2490934
55.903/55.978	0.068700/0.068957	331.97 mins	(4.849993 mins)	0.049865	0.2522046
55.903/55.978	0.068800/0.068957	336.9996 mins	(5.029614 mins)	0.04897	0.2537918
55.903/55.978	0.068900/0.068957	341.8987 mins	(4.89902 mins)	0.046917	0.2525423


55.908/55.978	0.067900/0.068957	346.9124 mins	(5.013689 mins)	0.048146	0.2592861
55.908/55.978	0.068000/0.068957	351.8787 mins	(4.966347 mins)	0.045104	0.2382917
55.908/55.978	0.068100/0.068957	356.878 mins	(4.999254 mins)	0.049485	0.251148
55.908/55.978	0.068200/0.068957	362.0804 mins	(5.20248 mins)	0.050031	0.2436783
55.908/55.978	0.068300/0.068957	367.5948 mins	(5.514354 mins)	0.054977	0.2519184
55.908/55.978	0.068400/0.068957	372.496 mins	(4.901178 mins)	0.043858	0.2389173
55.908/55.978	0.068500/0.068957	377.6251 mins	(5.129133 mins)	0.052523	0.250616
55.908/55.978	0.068600/0.068957	382.9587 mins	(5.333608 mins)	0.051878	0.251096
55.908/55.978	0.068700/0.068957	388.2028 mins	(5.244115 mins)	0.055279	0.2442292
55.908/55.978	0.068800/0.068957	393.569 mins	(5.36616 mins)	0.049166	0.2579524
55.908/55.978	0.068900/0.068957	398.7554 mins	(5.186363 mins)	0.049851	0.243922


55.913/55.978	0.067900/0.068957	403.7719 mins	(5.016554 mins)	0.050938	0.2491648
55.913/55.978	0.068000/0.068957	408.6901 mins	(4.918184 mins)	0.049451	0.2545405
55.913/55.978	0.068100/0.068957	413.6978 mins	(5.00776 mins)	0.048266	0.2457548
55.913/55.978	0.068200/0.068957	418.9286 mins	(5.230774 mins)	0.051563	0.2493225
55.913/55.978	0.068300/0.068957	424.1807 mins	(5.252059 mins)	0.050306	0.2533741
55.913/55.978	0.068400/0.068957	429.3255 mins	(5.144822 mins)	0.051049	0.2508699
55.913/55.978	0.068500/0.068957	434.3719 mins	(5.046351 mins)	0.050285	0.2517383
55.913/55.978	0.068600/0.068957	439.4913 mins	(5.11944 mins)	0.050277	0.2524524
55.913/55.978	0.068700/0.068957	444.4781 mins	(4.986799 mins)	0.048494	0.2476383
55.913/55.978	0.068800/0.068957	449.6278 mins	(5.149664 mins)	0.052222	0.2494832
55.913/55.978	0.068900/0.068957	455.1099 mins	(5.482135 mins)	0.053257	0.2647292


55.918/55.978	0.067900/0.068957	460.2884 mins	(5.178546 mins)	0.04939	0.24847
55.918/55.978	0.068000/0.068957	465.3398 mins	(5.051407 mins)	0.051297	0.2530209
55.918/55.978	0.068100/0.068957	470.5901 mins	(5.250302 mins)	0.050805	0.2508662
55.918/55.978	0.068200/0.068957	475.8112 mins	(5.221051 mins)	0.046897	0.2469615
55.918/55.978	0.068300/0.068957	481.0277 mins	(5.21649 mins)	0.050342	0.2545922
55.918/55.978	0.068400/0.068957	486.1944 mins	(5.166675 mins)	0.050108	0.2514531
55.918/55.978	0.068500/0.068957	491.0237 mins	(4.829304 mins)	0.045628	0.2443516
55.918/55.978	0.068600/0.068957	496.0131 mins	(4.989424 mins)	0.050676	0.2514059
55.918/55.978	0.068700/0.068957	501.2357 mins	(5.222655 mins)	0.052076	0.2589503
55.918/55.978	0.068800/0.068957	506.4219 mins	(5.186143 mins)	0.050087	0.2512775
55.918/55.978	0.068900/0.068957	511.4879 mins	(5.066031 mins)	0.049222	0.2508923


55.923/55.978	0.067900/0.068957	516.5793 mins	(5.091351 mins)	0.048619	0.2469171
55.923/55.978	0.068000/0.068957	521.7506 mins	(5.171343 mins)	0.049557	0.2455651
55.923/55.978	0.068100/0.068957	526.8635 mins	(5.11286 mins)	0.047537	0.2513586
55.923/55.978	0.068200/0.068957	532.1387 mins	(5.275249 mins)	0.049845	0.2445897
55.923/55.978	0.068300/0.068957	537.212 mins	(5.073271 mins)	0.049686	0.249432
55.923/55.978	0.068400/0.068957	542.2274 mins	(5.015374 mins)	0.047512	0.2475206
55.923/55.978	0.068500/0.068957	547.60 mins	(5.372629 mins)	0.047634	0.263458
55.923/55.978	0.068600/0.068957	552.8192 mins	(5.219184 mins)	0.047412	0.2435707
55.923/55.978	0.068700/0.068957	558.1244 mins	(5.305211 mins)	0.048586	0.2502906
55.923/55.978	0.068800/0.068957	563.6647 mins	(5.540329 mins)	0.051179	0.2512521
55.923/55.978	0.068900/0.068957	569.2798 mins	(5.615042 mins)	0.050527	0.246174


55.928/55.978	0.067900/0.068957	574.8547 mins	(5.574951 mins)	0.048283	0.2528943
55.928/55.978	0.068000/0.068957	580.1201 mins	(5.265426 mins)	0.052342	0.2537695
55.928/55.978	0.068100/0.068957	585.9638 mins	(5.84363 mins)	0.049748	0.2491752
55.928/55.978	0.068200/0.068957	591.4576 mins	(5.493796 mins)	0.050683	0.2461537
55.928/55.978	0.068300/0.068957	596.9039 mins	(5.446288 mins)	0.050323	0.2539375
55.928/55.978	0.068400/0.068957	602.5855 mins	(5.681623 mins)	0.050383	0.2498097
55.928/55.978	0.068500/0.068957	607.722 mins	(5.136538 mins)	0.051313	0.2609209
55.928/55.978	0.068600/0.068957	613.097 mins	(5.374971 mins)	0.050901	0.2617755
55.928/55.978	0.068700/0.068957	618.2615 mins	(5.164473 mins)	0.050235	0.2526689
55.928/55.978	0.068800/0.068957	623.5054 mins	(5.243905 mins)	0.053588	0.2480752
55.928/55.978	0.068900/0.068957	629.0483 mins	(5.542892 mins)	0.051093	0.2567553


55.933/55.978	0.067900/0.068957	634.6065 mins	(5.558286 mins)	0.051092	0.2597542
55.933/55.978	0.068000/0.068957	639.7554 mins	(5.148882 mins)	0.049829	0.2541644
55.933/55.978	0.068100/0.068957	644.7277 mins	(4.972301 mins)	0.04412	0.2473848
55.933/55.978	0.068200/0.068957	650.0151 mins	(5.2874 mins)	0.049183	0.256598
55.933/55.978	0.068300/0.068957	655.3528 mins	(5.337702 mins)	0.048169	0.2398246
55.933/55.978	0.068400/0.068957	660.8518 mins	(5.498947 mins)	0.050493	0.2514982
55.933/55.978	0.068500/0.068957	666.156 mins	(5.304232 mins)	0.046105	0.2507714
55.933/55.978	0.068600/0.068957	671.7769 mins	(5.620891 mins)	0.049567	0.2544806
55.933/55.978	0.068700/0.068957	677.4631 mins	(5.686236 mins)	0.048791	0.2618665
55.933/55.978	0.068800/0.068957	683.1252 mins	(5.6621 mins)	0.048575	0.2499567
55.933/55.978	0.068900/0.068957	688.6249 mins	(5.499705 mins)	0.049478	0.2609373


55.938/55.978	0.067900/0.068957	694.2518 mins	(5.626863 mins)	0.04594	0.245136
55.938/55.978	0.068000/0.068957	699.9406 mins	(5.688765 mins)	0.050566	0.2561008
55.938/55.978	0.068100/0.068957	705.811 mins	(5.870431 mins)	0.048297	0.2524182
55.938/55.978	0.068200/0.068957	711.521 mins	(5.709986 mins)	0.052068	0.2530398
55.938/55.978	0.068300/0.068957	716.705 mins	(5.184022 mins)	0.046171	0.2473326
55.938/55.978	0.068400/0.068957	722.2555 mins	(5.5505 mins)	0.052724	0.2561713
55.938/55.978	0.068500/0.068957	728.0138 mins	(5.75828 mins)	0.050832	0.2594868
55.938/55.978	0.068600/0.068957	733.7119 mins	(5.698115 mins)	0.052341	0.2419647
55.938/55.978	0.068700/0.068957	740.1683 mins	(6.456355 mins)	0.048869	0.2466122
55.938/55.978	0.068800/0.068957	746.0342 mins	(5.865946 mins)	0.049646	0.2509721
55.938/55.978	0.068900/0.068957	751.3222 mins	(5.287964 mins)	0.049254	0.2426448


55.943/55.978	0.067900/0.068957	757.1084 mins	(5.786259 mins)	0.047566	0.2538375
55.943/55.978	0.068000/0.068957	762.2596 mins	(5.151187 mins)	0.049304	0.2471291
55.943/55.978	0.068100/0.068957	767.5559 mins	(5.296269 mins)	0.049815	0.2569384
55.943/55.978	0.068200/0.068957	772.9248 mins	(5.368936 mins)	0.049414	0.2396069
55.943/55.978	0.068300/0.068957	778.4615 mins	(5.536694 mins)	0.047623	0.2472591
55.943/55.978	0.068400/0.068957	784.2511 mins	(5.789637 mins)	0.051014	0.2591746
55.943/55.978	0.068500/0.068957	789.546 mins	(5.294824 mins)	0.04926	0.2458416
55.943/55.978	0.068600/0.068957	795.0094 mins	(5.463463 mins)	0.050297	0.2547378
55.943/55.978	0.068700/0.068957	800.5606 mins	(5.551138 mins)	0.05106	0.250923
55.943/55.978	0.068800/0.068957	806.0617 mins	(5.50115 mins)	0.055465	0.2598571
55.943/55.978	0.068900/0.068957	811.8345 mins	(5.77275 mins)	0.051155	0.249515


55.948/55.978	0.067900/0.068957	817.2969 mins	(5.462376 mins)	0.044812	0.2492094
55.948/55.978	0.068000/0.068957	822.5819 mins	(5.285023 mins)	0.048596	0.2414011
55.948/55.978	0.068100/0.068957	828.0374 mins	(5.455484 mins)	0.047826	0.2457916
55.948/55.978	0.068200/0.068957	833.3701 mins	(5.332706 mins)	0.049301	0.2532838
55.948/55.978	0.068300/0.068957	839.1191 mins	(5.74908 mins)	0.051091	0.2445497
55.948/55.978	0.068400/0.068957	844.4637 mins	(5.344533 mins)	0.050048	0.2473966
55.948/55.978	0.068500/0.068957	849.7471 mins	(5.283463 mins)	0.04659	0.2469268
55.948/55.978	0.068600/0.068957	855.4039 mins	(5.656717 mins)	0.051566	0.2535752
55.948/55.978	0.068700/0.068957	860.5435 mins	(5.139637 mins)	0.050392	0.2505259
55.948/55.978	0.068800/0.068957	866.0943 mins	(5.550801 mins)	0.046984	0.2379392
55.948/55.978	0.068900/0.068957	871.2398 mins	(5.145488 mins)	0.049135	0.2515932


55.953/55.978	0.067900/0.068957	876.4469 mins	(5.207156 mins)	0.049438	0.2513712
55.953/55.978	0.068000/0.068957	882.0322 mins	(5.585231 mins)	0.051855	0.2501612
55.953/55.978	0.068100/0.068957	887.4427 mins	(5.410548 mins)	0.048267	0.2536263
55.953/55.978	0.068200/0.068957	892.9109 mins	(5.468171 mins)	0.050666	0.2511416
55.953/55.978	0.068300/0.068957	898.3505 mins	(5.439653 mins)	0.049923	0.2511554
55.953/55.978	0.068400/0.068957	903.6933 mins	(5.342779 mins)	0.048564	0.2543212
55.953/55.978	0.068500/0.068957	909.1582 mins	(5.464838 mins)	0.047959	0.2452499
55.953/55.978	0.068600/0.068957	914.6107 mins	(5.452555 mins)	0.051111	0.2496288
55.953/55.978	0.068700/0.068957	919.9533 mins	(5.342609 mins)	0.051013	0.2577876
55.953/55.978	0.068800/0.068957	924.9693 mins	(5.015976 mins)	0.046969	0.2526041
55.953/55.978	0.068900/0.068957	930.2657 mins	(5.296425 mins)	0.05201	0.2562098


55.958/55.978	0.067900/0.068957	935.4962 mins	(5.230428 mins)	0.049227	0.2536273
55.958/55.978	0.068000/0.068957	940.6603 mins	(5.164137 mins)	0.050003	0.2473586
55.958/55.978	0.068100/0.068957	945.8731 mins	(5.212824 mins)	0.04912	0.2457315
55.958/55.978	0.068200/0.068957	951.0284 mins	(5.155272 mins)	0.051759	0.2523039
55.958/55.978	0.068300/0.068957	956.3152 mins	(5.286784 mins)	0.049356	0.2486133
55.958/55.978	0.068400/0.068957	961.5598 mins	(5.244672 mins)	0.051233	0.2511696
55.958/55.978	0.068500/0.068957	966.6342 mins	(5.074364 mins)	0.047701	0.2516932
55.958/55.978	0.068600/0.068957	971.8031 mins	(5.168893 mins)	0.053333	0.2586289
55.958/55.978	0.068700/0.068957	976.8963 mins	(5.093238 mins)	0.050554	0.2476955
55.958/55.978	0.068800/0.068957	982.2592 mins	(5.362859 mins)	0.052216	0.2535219
55.958/55.978	0.068900/0.068957	987.4988 mins	(5.239594 mins)	0.051079	0.2561123


55.963/55.978	0.067900/0.068957	992.396 mins	(4.89722 mins)	0.047965	0.2564034
55.963/55.978	0.068000/0.068957	997.4465 mins	(5.050451 mins)	0.047019	0.2465836
55.963/55.978	0.068100/0.068957	1002.543 mins	(5.096392 mins)	0.045943	0.2585049
55.963/55.978	0.068200/0.068957	1007.703 mins	(5.159708 mins)	0.047999	0.2459296
55.963/55.978	0.068300/0.068957	1012.806 mins	(5.103819 mins)	0.050145	0.257465
55.963/55.978	0.068400/0.068957	1017.784 mins	(4.977365 mins)	0.047548	0.2458888
55.963/55.978	0.068500/0.068957	1022.959 mins	(5.175692 mins)	0.049617	0.2548617
55.963/55.978	0.068600/0.068957	1027.939 mins	(4.979346 mins)	0.051481	0.2507035
55.963/55.978	0.068700/0.068957	1033.078 mins	(5.139548 mins)	0.050716	0.2565081
55.963/55.978	0.068800/0.068957	1038.167 mins	(5.088207 mins)	0.050489	0.2466093
55.963/55.978	0.068900/0.068957	1043.285 mins	(5.118009 mins)	0.052509	0.242671


55.968/55.978	0.067900/0.068957	1048.303 mins	(5.01796 mins)	0.047445	0.2529118
55.968/55.978	0.068000/0.068957	1053.309 mins	(5.006264 mins)	0.047952	0.2507245
55.968/55.978	0.068100/0.068957	1058.433 mins	(5.124446 mins)	0.05157	0.2450843
55.968/55.978	0.068200/0.068957	1063.472 mins	(5.038885 mins)	0.048198	0.2551533
55.968/55.978	0.068300/0.068957	1068.634 mins	(5.161862 mins)	0.051318	0.257335
55.968/55.978	0.068400/0.068957	1073.699 mins	(5.064802 mins)	0.048595	0.2536954
55.968/55.978	0.068500/0.068957	1079.007 mins	(5.308501 mins)	0.052919	0.2561453
55.968/55.978	0.068600/0.068957	1084.491 mins	(5.48335 mins)	0.049138	0.2509286
55.968/55.978	0.068700/0.068957	1089.629 mins	(5.138699 mins)	0.045768	0.2520126
55.968/55.978	0.068800/0.068957	1094.839 mins	(5.209263 mins)	0.054372	0.2546942
55.968/55.978	0.068900/0.068957	1099.953 mins	(5.114812 mins)	0.05163	0.2499164


55.973/55.978	0.067900/0.068957	1105.392 mins	(5.438345 mins)	0.0529	0.2528122
55.973/55.978	0.068000/0.068957	1110.615 mins	(5.223286 mins)	0.049547	0.2502941
55.973/55.978	0.068100/0.068957	1115.678 mins	(5.062707 mins)	0.048958	0.2552137
55.973/55.978	0.068200/0.068957	1120.827 mins	(5.148861 mins)	0.049809	0.2554927
55.973/55.978	0.068300/0.068957	1125.884 mins	(5.057838 mins)	0.048861	0.2506422
55.973/55.978	0.068400/0.068957	1131.032 mins	(5.147757 mins)	0.048111	0.2484505
55.973/55.978	0.068500/0.068957	1135.99 mins	(4.958128 mins)	0.046023	0.2476315
55.973/55.978	0.068600/0.068957	1141.007 mins	(5.016665 mins)	0.048031	0.2446288
55.973/55.978	0.068700/0.068957	1146.298 mins	(5.291486 mins)	0.051388	0.2454129
55.973/55.978	0.068800/0.068957	1151.573 mins	(5.274352 mins)	0.051653	0.2494264
55.973/55.978	0.068900/0.068957	1156.713 mins	(5.14048 mins)	0.052305	0.2505668


55.978/55.978	0.067900/0.068957	1161.692 mins	(4.978376 mins)	0.047884	0.253234
55.978/55.978	0.068000/0.068957	1166.952 mins	(5.260703 mins)	0.049707	0.2524007
55.978/55.978	0.068100/0.068957	1172.322 mins	(5.369615 mins)	0.05151	0.2563357
55.978/55.978	0.068200/0.068957	1177.637 mins	(5.314554 mins)	0.048078	0.2471171
55.978/55.978	0.068300/0.068957	1182.679 mins	(5.042406 mins)	0.051318	0.2562662
55.978/55.978	0.068400/0.068957	1187.876 mins	(5.19666 mins)	0.048172	0.2470577
55.978/55.978	0.068500/0.068957	1193.061 mins	(5.185812 mins)	0.046863	0.2493403
55.978/55.978	0.068600/0.068957	1198.195 mins	(5.133271 mins)	0.051579	0.2484734
55.978/55.978	0.068700/0.068957	1203.558 mins	(5.363012 mins)	0.051877	0.252198
55.978/55.978	0.068800/0.068957	1208.915 mins	(5.35737 mins)	0.050609	0.2459794
55.978/55.978	0.068900/0.068957	1214.049 mins	(5.133543 mins)	0.049591	0.2458097


> 
> proc.time()
      user     system    elapsed 
1403826.87   19536.36   73429.32 
