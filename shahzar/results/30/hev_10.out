
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275507 14.8     663402 35.5   469283 25.1
Vcells 463357  3.6    8388608 64.0  1822500 14.0
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> # Set up the number of cores used for parallelization.
> num_cores <- 24
> registerDoParallel(num_cores)
> 
> #########################
> #### SEIR Simulation ####
> #########################
> time <- 365 # Number of days.
> inc <- 28 # Average incubation period length.
> inf <- 7 # Average infectious period length.
> N <- 1000 # Population size.
> 
> create_hh <- function() {
+   # Randomly sample household sizes such that total population is 1000 
+   # individuals.
+   hh_size <- sample(x = c(3, 4, 5, 6), size = 340, replace = T)
+   
+   # Keep households such that total population is < 1000.
+   hh_size <- hh_size[which(cumsum(hh_size) < N)]
+   
+   leftover <- N - sum(hh_size)
+   if (leftover < 3) {
+     hh <- 1:length(hh_size)
+     sampled <- sample(hh[hh_size < 6], leftover)
+     hh_size[sampled] <- hh_size[sampled] + 1
+   } else {
+     hh_size <- c(hh_size, leftover)
+   }
+   return(hh_size)
+ }
> 
> SEIR <- function(params, inc, inf, verbose = F) {
+   hh_size <- create_hh()
+   
+   # Create frame for running the simulation.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # S: susceptibility status.
+   # E: exposed status.
+   # E_count: number of days since exposed.
+   # I: infectious status.
+   # I_count: number of days since infectious.
+   # R: recovered status.
+   # INC: incubation period.
+   # INF: infectious period.
+   data <- data.frame(ID = 1:N,
+                     SIZE = rep(hh_size, times = hh_size),
+                     HH = rep(1:length(hh_size), times = hh_size), 
+                     S = c(0, rep(1, N - 1)), 
+                     E = c(1, rep(0, N - 1)),
+                     E_count = c(1, rep(0, N - 1)), 
+                     I = 0,
+                     I_count = 0, 
+                     R = 0, 
+                     INC = c(round(rnorm(1, inc, 2)), rep(0, N - 1)),
+                     INF = 0)
+   
+   # Create frame for storing results.
+   # ID: ID of individual.
+   # SIZE: size of individual's household.
+   # HH: ID of individual's household.
+   # TYPE: the kind of infection: household (H), community (C), or both (B).
+   # TIME: when the individual became infectious.
+   # S_num: number of susceptible people in individual's household when their 
+   #        infectious period begins.
+   # I_num: number of people in household that this individual infected over 
+   #        their infectious period.
+   results <- data[, 1:3] %>% mutate(TYPE = NA, TIME = NA, S_num = NA, I_num = 0)
+   results$TYPE[1] <- '0'
+   
+   for(t in 1:time) {
+     if (verbose) {
+       if (t %% 10 == 0) {
+         cat(paste0(t, ' '))
+       }
+     }
+     
+     # Anyone who has been infectious for as many days as their infectious period
+     # is now recovered.
+     recovered <- (data$INF > 0) & (data$I_count == data$INF)
+     if(sum(recovered, na.rm = T) > 0) {
+       data$R[recovered] <- 1
+       data$I[recovered] <- 0
+       data$I_count[recovered] <- 0 
+     }
+     
+     # Anyone who has been incubating for as many days as their incubation period
+     # is now infectious.
+     new_inf <- (data$INC > 0) & (data$E_count == data$INC)
+     num_new_inf <- sum(new_inf, na.rm = T)
+     if(num_new_inf > 0) {
+       # Change status to newly infectious and add infectious period.
+       data$I[new_inf] <- 1
+       random_inf <- rnorm(num_new_inf, mean = inf, sd = 1) %>% round()
+       data$INF[new_inf] <- random_inf
+       
+       # Remove exposure status and exposure count.
+       data$E[new_inf] <- 0
+       data$E_count[new_inf] <- 0 
+       
+       # Record time at which infectious period starts.
+       results$TIME[new_inf] <- t
+       
+       # Save the number of susceptible people in each infectious individual's 
+       # household.
+       S_data <- data %>% group_by(HH) %>% 
+         mutate(S_tot = sum(S)) %>% 
+         select(HH, S_tot)
+       results$S_num[new_inf == 1] <- S_data$S_tot[new_inf == 1]
+     }
+     
+     # I_H is the number of infections inside each household.
+     # I_C is the number of infections outside each household.
+     I_data <- data %>% group_by(HH) %>% 
+       mutate(I_H = sum(I)) %>% 
+       ungroup() %>% 
+       mutate(I_C = sum(I) - I_H)
+     
+     # Calculate household risk and community risk.
+     beta_H <- params[1]
+     beta_C <- params[2]
+     risk_H <- beta_H * data$S * I_data$I_H / N
+     risk_C <- beta_C * data$S * I_data$I_C / N
+     
+     # Each individual is infected from their household or community 
+     # independently with probabilities risk_H and risk_C.
+     new_inf_H <- rbinom(nrow(data), 1, risk_H)
+     new_inf_C <- rbinom(nrow(data), 1, risk_C)
+     
+     new_exposed <- (new_inf_H == 1) | (new_inf_C == 1)
+     num_new_exposed <- sum(new_exposed, na.rm = T)
+     if (num_new_exposed > 0) {
+       # Change status to newly exposed and add incubation period.
+       data$E[new_exposed] <- 1
+       random_inc <- rnorm(num_new_exposed, mean = inc, sd = 2) %>% round()
+       data$INC[new_exposed] <- random_inc
+       
+       # Remove susceptible status.
+       data$S[new_exposed] <- 0
+       
+       # Label community infections with C and household infections with H.
+       results$TYPE[new_inf_C == 1] <- 'C'
+       results$TYPE[new_inf_H == 1] <- 'H'
+       
+       # Get number of new infections in each household.
+       I_data <- I_data %>%
+         select(ID, HH, I, I_H) %>%
+         mutate(new_I_H = new_inf_H) %>%
+         group_by(HH) %>%
+         # Find households with at least 1 currently infectious individual. If 
+         # exactly 1 infectious individual in household, assign all new H 
+         # exposures to that individual. If there are multiple infectious 
+         # individuals, assign all infections to the infectious individual with 
+         # the first ID.
+         mutate(new_I_H = ifelse(I == 1 & ID == first(ID[I == 1]), 
+                                 sum(new_I_H), 0))
+       
+       results$I_num <- results$I_num + I_data$new_I_H
+         
+       # Label individuals with both a household and community infection with B.
+       results$TYPE[(new_inf_H == 1) & (new_inf_C == 1)] <- 'B'
+     }
+     
+     # Increment exposure and infectious counters.
+     data$E_count[data$E == 1] <- data$E_count[data$E == 1] + 1
+     data$I_count[data$I == 1] <- data$I_count[data$I == 1] + 1
+   }
+   return(results)
+ }
> 
> metrics <- function(results) {
+   # Incidence is the proportion of the population that became infected.
+   idc <- mean(!is.na(results$TIME))
+   
+   # If incidence is 0, the SAR is undefined.
+   sar <- NA
+   if (idc != 0) {
+     # The SAR is the average SAR for each individual that was infectious.
+     sar <- mean(results$I_num / results$S_num, na.rm = T)
+   }
+   return(c(idc, sar))
+ }
> 
> beta_Hs <- seq(55.350, 55.450, 0.005)
> beta_Cs <- seq(0.0850, 0.0860, 0.0001)
> 
> a <- length(beta_Hs)
> b <- length(beta_Cs)
> 
> reps <- 1000
> idcs <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> sars <- array(rep(NA, a * b * reps), dim = c(a, b, reps))
> t_tot <- 0
> for (i in 1:a) {
+   for (j in 1:b) {
+     beta_H <- beta_Hs[i]
+     beta_C <- beta_Cs[j]
+     params <- c(beta_H, beta_C)
+       
+     t_0 <- Sys.time()
+     vals <- foreach (k = 1:reps, .combine = 'c') %dopar% {
+       results <- SEIR(params, inc, inf, verbose = F) 
+       metrics(results)
+     }
+     t_1 <- Sys.time()
+     t_tot <- t_tot + (t_1 - t_0)
+     vals <- matrix(vals, reps, byrow = T)
+     idcs[i, j, ] <- vals[, 1]
+     sars[i, j, ] <- vals[, 2]
+     message(paste0(format(beta_H, digits = 5, nsmall = 3), '/55.450\t', 
+                    format(beta_C, digits = 5, nsmall = 4), '/0.0860\t',  
+                    format(t_tot, nsmall = 2), '\t(', format(t_1 - t_0, nsmall = 2), ')\t', 
+                    format(mean(vals[, 1]), nsmall = 3), '\t', 
+                    format(mean(vals[, 2]), nsmall = 3)))
+     write.table(idcs, file = 'idcs_10.txt', row.names = F, col.names = F)
+     write.table(sars, file = 'sars_10.txt', row.names = F, col.names = F)
+   }
+   message('\n')
+ }
55.350/55.450	0.0850/0.0860	6.168034 mins	(6.168034 mins)	0.092407	0.2461435
55.350/55.450	0.0851/0.0860	12.60159 mins	(6.433554 mins)	0.099033	0.247423
55.350/55.450	0.0852/0.0860	19.18977 mins	(6.588177 mins)	0.093667	0.2479366
55.350/55.450	0.0853/0.0860	25.45119 mins	(6.261422 mins)	0.09962	0.2473831
55.350/55.450	0.0854/0.0860	32.08819 mins	(6.637007 mins)	0.092923	0.2451564
55.350/55.450	0.0855/0.0860	39.08022 mins	(6.992022 mins)	0.107293	0.2502521
55.350/55.450	0.0856/0.0860	46.33269 mins	(7.252474 mins)	0.106401	0.2542898
55.350/55.450	0.0857/0.0860	53.07739 mins	(6.744701 mins)	0.106592	0.2523495
55.350/55.450	0.0858/0.0860	59.18787 mins	(6.110485 mins)	0.100342	0.2494487
55.350/55.450	0.0859/0.0860	65.21055 mins	(6.022677 mins)	0.102433	0.2540638
55.350/55.450	0.0860/0.0860	71.2533 mins	(6.042749 mins)	0.102181	0.2465631


55.355/55.450	0.0850/0.0860	77.31353 mins	(6.060231 mins)	0.103563	0.2515945
55.355/55.450	0.0851/0.0860	83.7616 mins	(6.448065 mins)	0.105086	0.2559885
55.355/55.450	0.0852/0.0860	90.00199 mins	(6.240398 mins)	0.105761	0.2551704
55.355/55.450	0.0853/0.0860	96.10856 mins	(6.106566 mins)	0.109075	0.251065
55.355/55.450	0.0854/0.0860	102.0295 mins	(5.920906 mins)	0.099521	0.2523453
55.355/55.450	0.0855/0.0860	108.6272 mins	(6.597712 mins)	0.109991	0.2556207
55.355/55.450	0.0856/0.0860	115.0552 mins	(6.427987 mins)	0.106666	0.2532482
55.355/55.450	0.0857/0.0860	121.4676 mins	(6.41248 mins)	0.104682	0.2568308
55.355/55.450	0.0858/0.0860	127.7949 mins	(6.327216 mins)	0.102573	0.2451112
55.355/55.450	0.0859/0.0860	134.0258 mins	(6.230892 mins)	0.100172	0.2560671
55.355/55.450	0.0860/0.0860	140.404 mins	(6.378268 mins)	0.105836	0.246513


55.360/55.450	0.0850/0.0860	146.5109 mins	(6.106838 mins)	0.099805	0.2508133
55.360/55.450	0.0851/0.0860	152.6172 mins	(6.106305 mins)	0.102674	0.2473347
55.360/55.450	0.0852/0.0860	158.7318 mins	(6.114588 mins)	0.108161	0.2460269
55.360/55.450	0.0853/0.0860	164.9571 mins	(6.225389 mins)	0.10704	0.2528628
55.360/55.450	0.0854/0.0860	170.8986 mins	(5.941478 mins)	0.098713	0.2486477
55.360/55.450	0.0855/0.0860	176.9806 mins	(6.08196 mins)	0.10075	0.2483396
55.360/55.450	0.0856/0.0860	182.9756 mins	(5.995032 mins)	0.098565	0.2538193
55.360/55.450	0.0857/0.0860	189.1035 mins	(6.127919 mins)	0.099638	0.252435
55.360/55.450	0.0858/0.0860	195.3764 mins	(6.272839 mins)	0.103471	0.2579105
55.360/55.450	0.0859/0.0860	201.7002 mins	(6.32381 mins)	0.108671	0.2586242
55.360/55.450	0.0860/0.0860	207.8129 mins	(6.112716 mins)	0.109269	0.2612724


55.365/55.450	0.0850/0.0860	213.9226 mins	(6.109724 mins)	0.092383	0.2461607
55.365/55.450	0.0851/0.0860	220.1076 mins	(6.184957 mins)	0.101406	0.2504877
55.365/55.450	0.0852/0.0860	226.3638 mins	(6.256268 mins)	0.107262	0.2477216
55.365/55.450	0.0853/0.0860	232.6117 mins	(6.247818 mins)	0.107975	0.2469372
55.365/55.450	0.0854/0.0860	238.5705 mins	(5.958877 mins)	0.100028	0.2529272
55.365/55.450	0.0855/0.0860	244.9002 mins	(6.329703 mins)	0.105226	0.2452129
55.365/55.450	0.0856/0.0860	251.2161 mins	(6.31588 mins)	0.10769	0.2568259
55.365/55.450	0.0857/0.0860	257.4288 mins	(6.21266 mins)	0.105751	0.2516168
55.365/55.450	0.0858/0.0860	263.7979 mins	(6.369113 mins)	0.104782	0.2566825
55.365/55.450	0.0859/0.0860	270.0539 mins	(6.256009 mins)	0.107821	0.2496877
55.365/55.450	0.0860/0.0860	276.1299 mins	(6.076044 mins)	0.099587	0.2476559


55.370/55.450	0.0850/0.0860	282.5208 mins	(6.390851 mins)	0.108441	0.2550169
55.370/55.450	0.0851/0.0860	288.8608 mins	(6.340014 mins)	0.102499	0.246403
55.370/55.450	0.0852/0.0860	295.0551 mins	(6.1943 mins)	0.092217	0.2397071
55.370/55.450	0.0853/0.0860	301.7756 mins	(6.72044 mins)	0.108429	0.2590118
55.370/55.450	0.0854/0.0860	308.7629 mins	(6.987305 mins)	0.097987	0.2510824
55.370/55.450	0.0855/0.0860	315.2995 mins	(6.536596 mins)	0.107235	0.2547232
55.370/55.450	0.0856/0.0860	321.6464 mins	(6.346898 mins)	0.105019	0.2590874
55.370/55.450	0.0857/0.0860	327.988 mins	(6.341654 mins)	0.098458	0.2500765
55.370/55.450	0.0858/0.0860	334.0766 mins	(6.088595 mins)	0.099648	0.2469696
55.370/55.450	0.0859/0.0860	339.915 mins	(5.838387 mins)	0.098966	0.2412531
55.370/55.450	0.0860/0.0860	345.9382 mins	(6.023185 mins)	0.101443	0.2452901


55.375/55.450	0.0850/0.0860	351.9382 mins	(6.000023 mins)	0.096275	0.2531564
55.375/55.450	0.0851/0.0860	358.2954 mins	(6.357222 mins)	0.103645	0.2529489
55.375/55.450	0.0852/0.0860	364.7269 mins	(6.431466 mins)	0.104369	0.2510044
55.375/55.450	0.0853/0.0860	370.8414 mins	(6.114473 mins)	0.093911	0.2448356
55.375/55.450	0.0854/0.0860	376.9869 mins	(6.14556 mins)	0.099386	0.2476512
55.375/55.450	0.0855/0.0860	383.4484 mins	(6.461458 mins)	0.101767	0.2475745
55.375/55.450	0.0856/0.0860	389.6926 mins	(6.244277 mins)	0.104282	0.2562418
55.375/55.450	0.0857/0.0860	396.0591 mins	(6.366458 mins)	0.111627	0.2592644
55.375/55.450	0.0858/0.0860	402.1271 mins	(6.067983 mins)	0.105909	0.2532015
55.375/55.450	0.0859/0.0860	408.3449 mins	(6.217782 mins)	0.109598	0.2504555
55.375/55.450	0.0860/0.0860	414.4299 mins	(6.085026 mins)	0.097848	0.244365


55.380/55.450	0.0850/0.0860	420.8452 mins	(6.415306 mins)	0.093982	0.2421812
55.380/55.450	0.0851/0.0860	426.99 mins	(6.144763 mins)	0.103107	0.2484139
55.380/55.450	0.0852/0.0860	433.2403 mins	(6.250376 mins)	0.10373	0.2506539
55.380/55.450	0.0853/0.0860	439.2651 mins	(6.024749 mins)	0.098372	0.2578764
55.380/55.450	0.0854/0.0860	445.3794 mins	(6.114345 mins)	0.100471	0.2503323
55.380/55.450	0.0855/0.0860	451.6217 mins	(6.242242 mins)	0.104699	0.25427
55.380/55.450	0.0856/0.0860	457.9418 mins	(6.320151 mins)	0.104947	0.2474071
55.380/55.450	0.0857/0.0860	464.3051 mins	(6.36324 mins)	0.107004	0.2443935
55.380/55.450	0.0858/0.0860	470.6719 mins	(6.366842 mins)	0.101681	0.2514428
55.380/55.450	0.0859/0.0860	477.031 mins	(6.359045 mins)	0.098889	0.2535746
55.380/55.450	0.0860/0.0860	483.3278 mins	(6.296883 mins)	0.108272	0.2525618


55.385/55.450	0.0850/0.0860	489.3785 mins	(6.050612 mins)	0.101343	0.2449095
55.385/55.450	0.0851/0.0860	495.2939 mins	(5.915449 mins)	0.098569	0.2510581
55.385/55.450	0.0852/0.0860	501.5485 mins	(6.254582 mins)	0.10757	0.25197
55.385/55.450	0.0853/0.0860	507.5554 mins	(6.006932 mins)	0.095771	0.2492234
55.385/55.450	0.0854/0.0860	513.7553 mins	(6.199855 mins)	0.09939	0.2472896
55.385/55.450	0.0855/0.0860	520.0473 mins	(6.292005 mins)	0.098874	0.2485466
55.385/55.450	0.0856/0.0860	526.15 mins	(6.102756 mins)	0.106473	0.2432323
55.385/55.450	0.0857/0.0860	532.5413 mins	(6.391255 mins)	0.101418	0.2558805
55.385/55.450	0.0858/0.0860	538.634 mins	(6.092752 mins)	0.106588	0.252976
55.385/55.450	0.0859/0.0860	545.1127 mins	(6.478637 mins)	0.110927	0.2463509
55.385/55.450	0.0860/0.0860	551.4578 mins	(6.34514 mins)	0.101911	0.24673


55.390/55.450	0.0850/0.0860	557.9832 mins	(6.525393 mins)	0.102328	0.2529697
55.390/55.450	0.0851/0.0860	564.5453 mins	(6.562108 mins)	0.096775	0.2467995
55.390/55.450	0.0852/0.0860	571.0078 mins	(6.462514 mins)	0.099825	0.2444024
55.390/55.450	0.0853/0.0860	577.5512 mins	(6.54336 mins)	0.101323	0.2538545
55.390/55.450	0.0854/0.0860	584.078 mins	(6.526808 mins)	0.101696	0.2554012
55.390/55.450	0.0855/0.0860	590.7237 mins	(6.645654 mins)	0.108982	0.257819
55.390/55.450	0.0856/0.0860	597.23 mins	(6.506307 mins)	0.099405	0.2470011
55.390/55.450	0.0857/0.0860	603.9149 mins	(6.684942 mins)	0.099568	0.2455138
55.390/55.450	0.0858/0.0860	610.1662 mins	(6.251302 mins)	0.101144	0.2512076
55.390/55.450	0.0859/0.0860	616.374 mins	(6.207786 mins)	0.104602	0.2525599
55.390/55.450	0.0860/0.0860	622.805 mins	(6.430982 mins)	0.107975	0.2453055


55.395/55.450	0.0850/0.0860	629.0927 mins	(6.287771 mins)	0.094795	0.2490525
55.395/55.450	0.0851/0.0860	635.5118 mins	(6.419087 mins)	0.10874	0.2590018
55.395/55.450	0.0852/0.0860	641.8941 mins	(6.382222 mins)	0.105802	0.2504289
55.395/55.450	0.0853/0.0860	648.0319 mins	(6.137863 mins)	0.099284	0.2465987
55.395/55.450	0.0854/0.0860	654.3001 mins	(6.268149 mins)	0.098417	0.2429467
55.395/55.450	0.0855/0.0860	660.8289 mins	(6.528848 mins)	0.097476	0.2386214
55.395/55.450	0.0856/0.0860	667.7598 mins	(6.930862 mins)	0.105968	0.2459483
55.395/55.450	0.0857/0.0860	674.4572 mins	(6.697424 mins)	0.101462	0.2438496
55.395/55.450	0.0858/0.0860	681.5989 mins	(7.141672 mins)	0.102	0.2506116
55.395/55.450	0.0859/0.0860	688.2835 mins	(6.684657 mins)	0.105675	0.248498
55.395/55.450	0.0860/0.0860	695.2618 mins	(6.978228 mins)	0.106601	0.2448628


55.400/55.450	0.0850/0.0860	701.6935 mins	(6.431793 mins)	0.095729	0.2507723
55.400/55.450	0.0851/0.0860	708.5283 mins	(6.834729 mins)	0.103873	0.248861
55.400/55.450	0.0852/0.0860	715.3675 mins	(6.839231 mins)	0.103365	0.2515889
55.400/55.450	0.0853/0.0860	721.8879 mins	(6.520427 mins)	0.101833	0.2516958
55.400/55.450	0.0854/0.0860	728.7544 mins	(6.866466 mins)	0.104375	0.2462619
55.400/55.450	0.0855/0.0860	736.7638 mins	(8.009413 mins)	0.103967	0.2555436
55.400/55.450	0.0856/0.0860	744.6535 mins	(7.889673 mins)	0.105005	0.2439554
55.400/55.450	0.0857/0.0860	751.0803 mins	(6.426826 mins)	0.104043	0.2502121
55.400/55.450	0.0858/0.0860	758.0574 mins	(6.977106 mins)	0.106713	0.2440872
55.400/55.450	0.0859/0.0860	764.49 mins	(6.43258 mins)	0.105082	0.2416693
55.400/55.450	0.0860/0.0860	771.1678 mins	(6.67776 mins)	0.105951	0.2514182


55.405/55.450	0.0850/0.0860	777.3733 mins	(6.20555 mins)	0.100907	0.2388479
55.405/55.450	0.0851/0.0860	784.3682 mins	(6.994877 mins)	0.10023	0.2510017
55.405/55.450	0.0852/0.0860	790.6711 mins	(6.302867 mins)	0.099563	0.249785
55.405/55.450	0.0853/0.0860	797.3017 mins	(6.630609 mins)	0.097694	0.2458601
55.405/55.450	0.0854/0.0860	803.9656 mins	(6.663944 mins)	0.104021	0.2565762
55.405/55.450	0.0855/0.0860	810.6447 mins	(6.679142 mins)	0.106076	0.254785
55.405/55.450	0.0856/0.0860	817.5749 mins	(6.930147 mins)	0.108279	0.2504692
55.405/55.450	0.0857/0.0860	823.9752 mins	(6.400351 mins)	0.096689	0.2457486
55.405/55.450	0.0858/0.0860	830.437 mins	(6.461795 mins)	0.104545	0.2422251
55.405/55.450	0.0859/0.0860	837.0818 mins	(6.644714 mins)	0.10529	0.2459635
55.405/55.450	0.0860/0.0860	844.0955 mins	(7.013753 mins)	0.109679	0.254337


55.410/55.450	0.0850/0.0860	850.5133 mins	(6.417825 mins)	0.10532	0.25265
55.410/55.450	0.0851/0.0860	857.1582 mins	(6.644854 mins)	0.096684	0.2444455
55.410/55.450	0.0852/0.0860	863.2337 mins	(6.075544 mins)	0.099373	0.2576211
55.410/55.450	0.0853/0.0860	869.707 mins	(6.473266 mins)	0.096343	0.257591
55.410/55.450	0.0854/0.0860	876.1642 mins	(6.457169 mins)	0.105889	0.2479455
55.410/55.450	0.0855/0.0860	882.6407 mins	(6.476525 mins)	0.099285	0.2490026
55.410/55.450	0.0856/0.0860	889.3302 mins	(6.689499 mins)	0.099006	0.2488333
55.410/55.450	0.0857/0.0860	895.8224 mins	(6.492175 mins)	0.103707	0.2416604
55.410/55.450	0.0858/0.0860	902.4996 mins	(6.677277 mins)	0.102135	0.2541118
55.410/55.450	0.0859/0.0860	908.7802 mins	(6.280591 mins)	0.097515	0.252609
55.410/55.450	0.0860/0.0860	915.3806 mins	(6.600331 mins)	0.103449	0.2511444


55.415/55.450	0.0850/0.0860	921.6755 mins	(6.294927 mins)	0.102184	0.2490474
55.415/55.450	0.0851/0.0860	928.0475 mins	(6.371985 mins)	0.106556	0.2553872
55.415/55.450	0.0852/0.0860	934.3288 mins	(6.281302 mins)	0.101443	0.2405102
55.415/55.450	0.0853/0.0860	940.5007 mins	(6.171892 mins)	0.103757	0.249816
55.415/55.450	0.0854/0.0860	946.8698 mins	(6.369154 mins)	0.105609	0.2501978
55.415/55.450	0.0855/0.0860	952.9861 mins	(6.11627 mins)	0.104351	0.2530561
55.415/55.450	0.0856/0.0860	959.2921 mins	(6.306021 mins)	0.106618	0.2477787
55.415/55.450	0.0857/0.0860	965.5486 mins	(6.256491 mins)	0.10311	0.2568421
55.415/55.450	0.0858/0.0860	971.6688 mins	(6.120236 mins)	0.099094	0.2480691
55.415/55.450	0.0859/0.0860	977.6227 mins	(5.953885 mins)	0.096013	0.2439518
55.415/55.450	0.0860/0.0860	983.9238 mins	(6.301095 mins)	0.103964	0.2400428


55.420/55.450	0.0850/0.0860	989.961 mins	(6.037158 mins)	0.100251	0.2505615
55.420/55.450	0.0851/0.0860	995.8798 mins	(5.918799 mins)	0.095361	0.2471337
55.420/55.450	0.0852/0.0860	1001.811 mins	(5.931706 mins)	0.098864	0.248421
55.420/55.450	0.0853/0.0860	1007.89 mins	(6.078877 mins)	0.103022	0.2544466
55.420/55.450	0.0854/0.0860	1014.155 mins	(6.264828 mins)	0.107699	0.2517497
55.420/55.450	0.0855/0.0860	1020.369 mins	(6.213326 mins)	0.104877	0.2454977
55.420/55.450	0.0856/0.0860	1026.591 mins	(6.222257 mins)	0.104002	0.2489245
55.420/55.450	0.0857/0.0860	1032.706 mins	(6.115623 mins)	0.101742	0.2526263
55.420/55.450	0.0858/0.0860	1039.089 mins	(6.382468 mins)	0.10485	0.246071
55.420/55.450	0.0859/0.0860	1045.403 mins	(6.314291 mins)	0.1058	0.2459496
55.420/55.450	0.0860/0.0860	1051.594 mins	(6.190726 mins)	0.108441	0.2584979


55.425/55.450	0.0850/0.0860	1057.727 mins	(6.132983 mins)	0.101565	0.2501626
55.425/55.450	0.0851/0.0860	1063.76 mins	(6.033175 mins)	0.101731	0.2551367
55.425/55.450	0.0852/0.0860	1069.991 mins	(6.231305 mins)	0.103318	0.2553398
55.425/55.450	0.0853/0.0860	1076.292 mins	(6.300993 mins)	0.102079	0.2488227
55.425/55.450	0.0854/0.0860	1082.613 mins	(6.320311 mins)	0.102043	0.251701
55.425/55.450	0.0855/0.0860	1088.777 mins	(6.164307 mins)	0.100396	0.2519523
55.425/55.450	0.0856/0.0860	1095.194 mins	(6.416899 mins)	0.098469	0.2472536
55.425/55.450	0.0857/0.0860	1101.463 mins	(6.2693 mins)	0.100946	0.2516323
55.425/55.450	0.0858/0.0860	1107.65 mins	(6.187241 mins)	0.103253	0.2603136
55.425/55.450	0.0859/0.0860	1113.936 mins	(6.285117 mins)	0.107147	0.2557662
55.425/55.450	0.0860/0.0860	1120.305 mins	(6.369027 mins)	0.106705	0.2442994


55.430/55.450	0.0850/0.0860	1126.403 mins	(6.098083 mins)	0.097923	0.2440079
55.430/55.450	0.0851/0.0860	1132.473 mins	(6.070593 mins)	0.097997	0.2454468
55.430/55.450	0.0852/0.0860	1138.558 mins	(6.084829 mins)	0.100917	0.249198
55.430/55.450	0.0853/0.0860	1144.922 mins	(6.363502 mins)	0.101193	0.2565643
55.430/55.450	0.0854/0.0860	1150.988 mins	(6.066771 mins)	0.097983	0.2495235
55.430/55.450	0.0855/0.0860	1157.311 mins	(6.322738 mins)	0.105923	0.2528552
55.430/55.450	0.0856/0.0860	1163.376 mins	(6.064606 mins)	0.099455	0.2516478
55.430/55.450	0.0857/0.0860	1169.717 mins	(6.341422 mins)	0.10571	0.2566681
55.430/55.450	0.0858/0.0860	1175.759 mins	(6.041517 mins)	0.100291	0.2489139
55.430/55.450	0.0859/0.0860	1182.171 mins	(6.412868 mins)	0.103164	0.2500604
55.430/55.450	0.0860/0.0860	1188.544 mins	(6.372711 mins)	0.104509	0.2566317


55.435/55.450	0.0850/0.0860	1194.667 mins	(6.122636 mins)	0.09776	0.2462288
55.435/55.450	0.0851/0.0860	1200.67 mins	(6.003169 mins)	0.099078	0.2503261
55.435/55.450	0.0852/0.0860	1207.097 mins	(6.426987 mins)	0.103196	0.2539546
55.435/55.450	0.0853/0.0860	1213.30 mins	(6.202939 mins)	0.1017	0.2510324
55.435/55.450	0.0854/0.0860	1219.516 mins	(6.215987 mins)	0.096714	0.2554291
55.435/55.450	0.0855/0.0860	1225.592 mins	(6.076292 mins)	0.104075	0.2502146
55.435/55.450	0.0856/0.0860	1231.87 mins	(6.27765 mins)	0.096293	0.2512568
55.435/55.450	0.0857/0.0860	1238.075 mins	(6.205362 mins)	0.102713	0.2502321
55.435/55.450	0.0858/0.0860	1244.392 mins	(6.316715 mins)	0.101399	0.2413059
55.435/55.450	0.0859/0.0860	1250.499 mins	(6.10732 mins)	0.101877	0.2516711
55.435/55.450	0.0860/0.0860	1256.884 mins	(6.385167 mins)	0.107163	0.2663701


55.440/55.450	0.0850/0.0860	1263.046 mins	(6.161769 mins)	0.099692	0.2476578
55.440/55.450	0.0851/0.0860	1269.314 mins	(6.267727 mins)	0.10072	0.2509664
55.440/55.450	0.0852/0.0860	1275.562 mins	(6.2485 mins)	0.104375	0.2501946
55.440/55.450	0.0853/0.0860	1281.692 mins	(6.129772 mins)	0.10591	0.2513833
55.440/55.450	0.0854/0.0860	1288.123 mins	(6.430639 mins)	0.111434	0.2581111
55.440/55.450	0.0855/0.0860	1294.594 mins	(6.470778 mins)	0.10435	0.2494728
55.440/55.450	0.0856/0.0860	1300.727 mins	(6.13368 mins)	0.102796	0.2547024
55.440/55.450	0.0857/0.0860	1306.887 mins	(6.160095 mins)	0.104686	0.2502788
55.440/55.450	0.0858/0.0860	1313.262 mins	(6.375128 mins)	0.105752	0.2525228
55.440/55.450	0.0859/0.0860	1319.674 mins	(6.411496 mins)	0.104143	0.254635
55.440/55.450	0.0860/0.0860	1325.728 mins	(6.054287 mins)	0.098668	0.2503553


55.445/55.450	0.0850/0.0860	1331.915 mins	(6.186298 mins)	0.101107	0.2459761
55.445/55.450	0.0851/0.0860	1338.105 mins	(6.190415 mins)	0.100791	0.2571059
55.445/55.450	0.0852/0.0860	1344.483 mins	(6.377844 mins)	0.100148	0.2556138
55.445/55.450	0.0853/0.0860	1350.681 mins	(6.198371 mins)	0.097311	0.2530237
55.445/55.450	0.0854/0.0860	1357.198 mins	(6.517293 mins)	0.103234	0.2591477
55.445/55.450	0.0855/0.0860	1363.249 mins	(6.050225 mins)	0.096951	0.2353587
55.445/55.450	0.0856/0.0860	1369.373 mins	(6.124725 mins)	0.097443	0.258749
55.445/55.450	0.0857/0.0860	1375.532 mins	(6.158353 mins)	0.101934	0.2484879
55.445/55.450	0.0858/0.0860	1382.026 mins	(6.493815 mins)	0.106615	0.2486547
55.445/55.450	0.0859/0.0860	1388.214 mins	(6.188815 mins)	0.099985	0.2528184
55.445/55.450	0.0860/0.0860	1394.514 mins	(6.299659 mins)	0.101611	0.2497441


55.450/55.450	0.0850/0.0860	1400.715 mins	(6.200936 mins)	0.102897	0.2570272
55.450/55.450	0.0851/0.0860	1407.205 mins	(6.489578 mins)	0.10171	0.2546344
55.450/55.450	0.0852/0.0860	1413.992 mins	(6.787044 mins)	0.100245	0.2433513
55.450/55.450	0.0853/0.0860	1420.228 mins	(6.2368 mins)	0.105062	0.2489758
55.450/55.450	0.0854/0.0860	1426.526 mins	(6.297645 mins)	0.109855	0.2498169
